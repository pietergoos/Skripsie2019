#include "user.h"
#include "lcd.h"

#define ONESEC 1000

uint8_t spiData[3];
uint8_t r;
uint32_t tickCtr;
uint32_t prevTick;
uint16_t cData[5];
uint8_t cBtns[5][16];
uint8_t txBuff[50];

uint32_t adc[2], adcDMA[2];

uint16_t vol, bpm, volOld, bpmOld;

uint8_t t;
uint8_t tm;
float tempF;
uint16_t timer;

DIR Directory;
FIL Files[5];
static uint32_t WaveDataLength = 0;
#define AUDIO_BUFFER_SIZE 4096
uint8_t audioPart[5][AUDIO_BUFFER_SIZE];

static uint8_t USBH_USR_ApplicationState = USBH_USR_FS_INIT;

void userInit(){
	r = 0;
	tickCtr = 0;
	prevTick = HAL_GetTick();

	cData[0] = 0b0000000000000000;
	cData[1] = 0b0000000000000000;
	cData[2] = 0b0000000000000000;
	cData[3] = 0b0000000000000000;
	cData[4] = 0b0000000000000000;

	initBtns();
	startLEDs();

	initLCD();

	//HAL_UART_Transmit_DMA(&huart1, txBuff, 17);

	HAL_ADC_Start_DMA(&hadc1, adcDMA, 2);

}

void userLoop(){

	switch(Appli_state){
	case APPLICATION_READY:
		//THINGS
		switch(USBH_USR_ApplicationState){
		case USBH_USR_FS_INIT:
			f_mount(&USBHFatFS, (TCHAR const*)USBHPath, 0);
			USBH_USR_ApplicationState = USBH_USR_AUDIO;
			break;
		case USBH_USR_AUDIO:
			//WavePlayerStart();
			USBH_USR_ApplicationState = USBH_USR_FS_INIT;
			break;
		}
		break;
	case APPLICATION_IDLE:
	default:
		break;
	}

	//Do nothing between ticks
	while(HAL_GetTick() == prevTick);
	tickCtr++;
	prevTick = HAL_GetTick();

	updateLCD();

	//if(tickCtr % 1 == 0){
		sendLED();
		r++;
		if(r >= 5){
			r = 0;
		}
	//}

	//Resets on high (PE11) /\ Clk on PE12
	if (tickCtr % (ONESEC/160) == 0){
		incrBtns();
	}

	timer = (4096-adc[0]) * ONESEC / 4095;
	if (tickCtr >= timer){
		t++;
		if(t == 16){
			t = 0;
		}
		incrCol(t);

		//sprintf(txBuff, "A: %04u B: %04u\r\n", adc[0], adc[1]);
		//HAL_UART_Transmit_DMA(&huart1, txBuff, 17);

		bpmOld = bpm;
		volOld = vol;

		bpm = 60 * 4095 / (4096-adc[0]);
		vol = adc[1] * 100 / 4095;

		if(bpm != bpmOld || vol != volOld){
			lcdRefresh(vol, bpm);
		}

		//once a second tick counter resets
		tickCtr = 0;
	}



}

void sendLED(){
	//Get Data
	spiData[1] = ((cData[r] & 0xFF00) >> 8);
	spiData[0] = (cData[r] & 0x00FF);
	spiData[2] = (0b10000000 >> r);

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); //Enable Goes Low
	HAL_SPI_Transmit(&hspi5, spiData, 3, 10); //Transmit 3 bytes
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); //Enable Goes High
}

void setLED(uint8_t row, uint8_t col, uint8_t val){
	/*
	 * row - value from 0 to 4
	 * col - value from 0 to 15
	 * val - 1 or 0 to set bit
	 */
	cData[row] = (cData[row] & ~(1 << (15-col))) | (val << (15-col));
}

void toggleLED(uint8_t row, uint8_t col){
	/*
	 * row - value from 0 to 4
	 * col - value from 0 to 15
	 */
	cData[row]  ^= 1 << (15-col);
}

void toggleLEDCol(uint8_t col){
	uint8_t i;
	for(i = 0; i<5; i++){
		toggleLED(i, col);
	}
}

void incrCol(uint8_t col){
	uint8_t cl = col-1;
	if (col == 0){
		cl = 15;
	}
	toggleLEDCol(col);
	toggleLEDCol(cl);
}

void startLEDs(){
	t = 0;
	toggleLEDCol(0);
}

void stopLEDs(){
	toggleLEDCol(t);
}

void initBtns(){
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
	tm = 0;
	resetBtns();
}

void incrBtns(){
	tm++;
	if(tm == 16){
		tm = 0;
	}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);

	GPIO_TypeDef* letter[] = {GPIOE, GPIOE, GPIOE, GPIOE, GPIOC};
	uint16_t number[] = {GPIO_PIN_7, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_4};
	uint8_t i;

	for (i = 0; i<5; i++){
		if(cBtns[i][tm] != HAL_GPIO_ReadPin(letter[i], number[i])){
			//Change
			if(cBtns[i][tm] == 0){
				//Update the LED
				//setLED(0, tm, ~cBtns[0][tm]);
				toggleLED(i, tm);
			}
			//Change the value of the array
			cBtns[i][tm] = ~cBtns[i][tm];
		}
	}
}

void resetBtns(){
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	adc[0] = adcDMA[0];
	adc[1] = adcDMA[1];
}

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
}

void WavePlayerStart(void)
{
  UINT bytesread = 0;
  char path[] = "0:/";
  WAVE_FormatTypeDef waveformat;

  /* Get the read out protection status */
  if(f_opendir(&Directory, path) == FR_OK)
  {
    /* Open the Wave file to be played */
	if(f_open(&Files[0], "0:wave0.wav", FA_READ) != FR_OK && f_open(&Files[1], "0:wave1.wav", FA_READ) != FR_OK && f_open(&Files[2], "0:wave2.wav", FA_READ) != FR_OK && f_open(&Files[3], "0:wave3.wav", FA_READ) != FR_OK && f_open(&Files[4], "0:wave4.wav", FA_READ) != FR_OK )
    {
		//File not found
    }
    else
    {
    	// Why is it read again?
    	//f_open(&Files[0], "0:wave0.wav", FA_READ);

      /* Read sizeof(WaveFormat) from the selected file */
      //f_read (&FileRead, &waveformat, sizeof(waveformat), &bytesread);
      f_read (&Files[0], &waveformat, sizeof(waveformat), &bytesread);

      /* Set WaveDataLenght to the Speech Wave length */
      WaveDataLength = waveformat.FileSize;

      /* Play the Wave */
      WavePlayBack(waveformat.SampleRate);
    }
  }
}

void WavePlayBack(uint32_t AudioFreq)
{
  UINT bytesread = 0;
  int i = 0;
  int j = 0;

  /* Start playing */
  //AudioPlayStart = 1;
  //RepeatState = REPEAT_ON;

  /* Initialize Wave player (Codec, DMA, I2C) */
  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, Volume, AudioFreq) != 0)
  {
    Error_Handler();
  }

  /* Get Data from USB Flash Disk */
  /*
  f_lseek(&FileRead, 0);
  f_read (&FileRead, &Audio_Buffer[0], AUDIO_BUFFER_SIZE, &bytesread);
  AudioRemSize = WaveDataLength - bytesread;
  */

  for(i = 0; i < 5; i++){
	  f_lseek(&Files[i], 0);
	  f_read(&Files[i], &audioPart[i][0], AUDIO_BUFFER_SIZE, &bytesread);
  }

  AudioRemSize = WaveDataLength - bytesread;

  for(j = 0; j < AUDIO_BUFFER_SIZE; j++){
	  tempInt = (audioPart[0][j] + audioPart[1][j] + audioPart[2][j] + audioPart[3][j] + audioPart[4][j]) / 5;
	  //tempInt = audioPart[0][j];
	  Audio_Buffer[j] = (uint8_t) tempInt;
  }

  /* Start playing Wave */
  BSP_AUDIO_OUT_Play((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE);
  LEDsState = LED6_TOGGLE;
  PauseResumeStatus = RESUME_STATUS;
  PressCount = 0;

  /* Check if the device is connected.*/
  while((AudioRemSize != 0) && (AppliState != APPLICATION_IDLE))
  {
    /* Test on the command: Playing */
    if(CmdIndex == CMD_PLAY)
    {
      if(PauseResumeStatus == PAUSE_STATUS)
      {
        /* Stop Toggling LED2 to signal Pause */
        LEDsState = STOP_TOGGLE;
        /* Pause playing Wave */
        WavePlayerPauseResume(PauseResumeStatus);
        PauseResumeStatus = IDLE_STATUS;
      }
      else if(PauseResumeStatus == RESUME_STATUS)
      {
        /* Toggling LED6 to signal Play */
        LEDsState = LED6_TOGGLE;
        /* Resume playing Wave */
        WavePlayerPauseResume(PauseResumeStatus);
        PauseResumeStatus = IDLE_STATUS;
      }

      bytesread = 0;

      if(BufferOffset == BUFFER_OFFSET_HALF)
      {
    	  for(i = 0; i < 5; i++){
    		  f_read(&Files[i], &audioPart[i][0], AUDIO_BUFFER_SIZE/2, (void *)&bytesread);
    	  }

    	  for(j = 0; j < AUDIO_BUFFER_SIZE / 2; j++){
    		  tempInt = (audioPart[0][j] + audioPart[1][j] + audioPart[2][j] + audioPart[3][j] + audioPart[4][j]) / 5;
    		  //tempInt = audioPart[0][j];
    		  Audio_Buffer[j] = (uint8_t) tempInt;
    	}

    	/*
        f_read(&FileRead,
               &Audio_Buffer[0],
               AUDIO_BUFFER_SIZE/2,
               (void *)&bytesread);
        */
        BufferOffset = BUFFER_OFFSET_NONE;
      }

      if(BufferOffset == BUFFER_OFFSET_FULL)
      {
    	  /*
        f_read(&FileRead,
               &Audio_Buffer[AUDIO_BUFFER_SIZE/2],
               AUDIO_BUFFER_SIZE/2,
               (void *)&bytesread);
               */

    	  for(i = 0; i < 5; i++){
			  f_read(&Files[i], &audioPart[i][0], AUDIO_BUFFER_SIZE/2, (void *)&bytesread);
		  }

		  for(j = 0; j < AUDIO_BUFFER_SIZE / 2; j++){
			  tempInt = (audioPart[0][j] + audioPart[1][j] + audioPart[2][j] + audioPart[3][j] + audioPart[4][j]) / 5;
			  //tempInt = audioPart[0][j];

			  Audio_Buffer[j + (AUDIO_BUFFER_SIZE / 2)] = (uint8_t) tempInt;

			  //Audio_Buffer[j + (AUDIO_BUFFER_SIZE / 2)] = (audioPart[0][j] + audioPart[1][j] + audioPart[2][j] + audioPart[3][j] + audioPart[4][j]) / 5;
		  }

        BufferOffset = BUFFER_OFFSET_NONE;
      }
      if(AudioRemSize > (AUDIO_BUFFER_SIZE / 2))
      {
        AudioRemSize -= bytesread;
      }
      else
      {
        AudioRemSize = 0;
      }
    }
    else
    {
      /* Stop playing Wave */
      WavePlayerStop();
      //f_close(&FileRead);
      f_close(&Files[0]);
      f_close(&Files[1]);
      f_close(&Files[2]);
      f_close(&Files[3]);
      f_close(&Files[4]);
      AudioRemSize = 0;
      RepeatState = REPEAT_ON;
      break;
    }
  }
#ifdef PLAY_REPEAT_DISABLED
  RepeatState = REPEAT_OFF;
  /* Stop playing Wave */
  WavePlayerStop();
  f_close(&FileRead);
  /* Test on the command: Playing */
  if(CmdIndex == CMD_PLAY)
  {
    LEDsState = LED4_TOGGLE;
  }
#else
  LEDsState = LEDS_OFF;
  RepeatState = REPEAT_ON;
  AudioPlayStart = 0;
  /* Stop playing Wave */
  WavePlayerStop();
  //f_close(&FileRead);
  f_close(&Files[0]);
   f_close(&Files[1]);
   f_close(&Files[2]);
   f_close(&Files[3]);
   f_close(&Files[4]);
#endif /* PLAY_REPEAT_DISABLED */
}

