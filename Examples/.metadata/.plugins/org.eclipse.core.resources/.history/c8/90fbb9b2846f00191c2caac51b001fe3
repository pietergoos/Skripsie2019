#include "user.h"
#include "lcd.h"
#include "../Components/cs43l22/cs43l22.h"
#include "stm32f411e_discovery_audio.h"

#define ONESEC 1000


uint8_t spiData[3];
uint8_t r;
uint32_t tickCtr;
uint32_t prevTick;
uint16_t cData[5];
uint8_t cBtns[5][16];
uint8_t txBuff[50];

uint32_t adc[2], adcDMA[2];

uint16_t vol, bpm, volOld, bpmOld;

uint8_t t;
uint8_t tm;
float tempF;
uint16_t timer;
uint8_t startPlay = 0;

FIL Files[5];
#define AUDIO_BUFFER_SIZE 4096
volatile uint32_t sampleRate = 0;
uint8_t Volume = 70;
uint32_t fSize[5]; //Max filesize of the given row
FIL FileCall[80]; //File array to use for playing
static __IO uint32_t bLeft[80]; //Number of bytes remaining to read for the given file pointer
__IO BUFFER_StateTypeDef BufferOffset = BUFFER_OFFSET_NONE;
uint16_t AudioBuffer[AUDIO_BUFFER_SIZE];

uint16_t *fRow0;
uint16_t *fRow1;
uint16_t *fRow2;
uint16_t *fRow3;
uint16_t *fRow4;

static uint8_t USBH_USR_ApplicationState = USBH_USR_FS_INIT;

void userInit() {
	r = 0;
	tickCtr = 0;
	prevTick = HAL_GetTick();

	cData[0] = 0b0000000000000000;
	cData[1] = 0b0000000000000000;
	cData[2] = 0b0000000000000000;
	cData[3] = 0b0000000000000000;
	cData[4] = 0b0000000000000000;

	initBtns();
	startLEDs();

	initLCD();

	//HAL_UART_Transmit_DMA(&huart1, txBuff, 17);

	HAL_ADC_Start_DMA(&hadc1, adcDMA, 2);

}

void userLoop() {

	switch (Appli_state) {
	case APPLICATION_READY:
		//THINGS
		if (startPlay != 1) {
			switch (USBH_USR_ApplicationState) {
			case USBH_USR_FS_INIT:
				f_mount(&USBHFatFS, (TCHAR const*) USBHPath, 0);
				USBH_USR_ApplicationState = USBH_USR_AUDIO;
				break;
			case USBH_USR_AUDIO:
				//WavePlayerStart();
				startPlay = 1;
				initFiles();
				//USBH_USR_ApplicationState = USBH_USR_FS_INIT;
				break;
			}
		}
		break;
	case APPLICATION_IDLE:
		break;
	case APPLICATION_DISCONNECT:
		BSP_AUDIO_OUT_Stop(CODEC_PDWN_HW);
		f_mount(NULL, (TCHAR const*) "", 0);
		Appli_state = APPLICATION_IDLE;
		USBH_USR_ApplicationState = USBH_USR_FS_INIT;
		break;
	default:
		break;
	}

	if (startPlay == 1) {

		if (BufferOffset != BUFFER_OFFSET_NONE) {
			fillDMAArr();
		}

		if (HAL_GetTick() != prevTick) {

			//Do nothing between ticks
			//while (HAL_GetTick() == prevTick);
			tickCtr++;
			prevTick = HAL_GetTick();

			updateLCD();

			//if(tickCtr % 1 == 0){_
			sendLED();
			r++;
			if (r >= 5) {
				r = 0;
			}
			//}

			//Resets on high (PE11) /\ Clk on PE12
			if (tickCtr % (ONESEC / 160) == 0) {
				incrBtns();

			}

			timer = (4096 - adc[0]) * ONESEC / 4095;
			if (tickCtr >= timer) {
				t++;
				if (t == 16) {
					t = 0;
				}
				incrCol(t);
				primeCol(t);

				//sprintf(txBuff, "A: %04u B: %04u\r\n", adc[0], adc[1]);
				//HAL_UART_Transmit_DMA(&huart1, txBuff, 17);

				bpmOld = bpm;
				volOld = vol;

				bpm = 60 * 4095 / (4096 - adc[0]);
				vol = adc[1] * 100 / 4095;

				if (bpm != bpmOld || vol != volOld) {
					lcdRefresh(vol, bpm);
				}
				if (vol != volOld) {
					BSP_AUDIO_OUT_SetVolume(vol);
				}

				//once a cycle tick counter resets
				tickCtr = 0;
			}
		}
	}
}

void sendLED() {
	//Get Data
	spiData[1] = ((cData[r] & 0xFF00) >> 8);
	spiData[0] = (cData[r] & 0x00FF);
	spiData[2] = (0b10000000 >> r);

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); //Enable Goes Low
	HAL_SPI_Transmit(&hspi5, spiData, 3, 10); //Transmit 3 bytes
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); //Enable Goes High
}

void setLED(uint8_t row, uint8_t col, uint8_t val) {
	/*
	 * row - value from 0 to 4
	 * col - value from 0 to 15
	 * val - 1 or 0 to set bit
	 */
	cData[row] = (cData[row] & ~(1 << (15 - col))) | (val << (15 - col));
}

void toggleLED(uint8_t row, uint8_t col) {
	/*
	 * row - value from 0 to 4
	 * col - value from 0 to 15
	 */
	cData[row] ^= 1 << (15 - col);
}

void toggleLEDCol(uint8_t col) {
	uint8_t i;
	for (i = 0; i < 5; i++) {
		toggleLED(i, col);
	}
}

void incrCol(uint8_t col) {
	uint8_t cl = col - 1;
	if (col == 0) {
		cl = 15;
	}
	toggleLEDCol(col);
	toggleLEDCol(cl);
}

void startLEDs() {
	t = 0;
	toggleLEDCol(0);
}

void stopLEDs() {
	toggleLEDCol(t);
}

void initBtns() {
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
	tm = 0;
	resetBtns();
}

void incrBtns() {
	tm++;
	if (tm == 16) {
		tm = 0;
	}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);

	GPIO_TypeDef* letter[] = { GPIOE, GPIOE, GPIOE, GPIOE, GPIOC };
	uint16_t number[] = { GPIO_PIN_7, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10,
	GPIO_PIN_4 };
	uint8_t i;

	for (i = 0; i < 5; i++) {
		if (cBtns[i][tm] != HAL_GPIO_ReadPin(letter[i], number[i])) {
			//Change
			if (cBtns[i][tm] == 0) {
				//Update the LED
				//setLED(0, tm, ~cBtns[0][tm]);
				toggleLED(i, tm);
			}
			//Change the value of the array
			cBtns[i][tm] = ~cBtns[i][tm];
		}
	}
}

void resetBtns() {
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
	adc[0] = adcDMA[0];
	adc[1] = adcDMA[1];
}

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart) {
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
}

/**
 * Returns 0 for no errors, 1 for file not found, 2 for non-matching sample rate, 3 for cannot open filter
 */
uint8_t initFiles() {
	char path[] = "0:/";
	char wvName[] = "0:wave0.wav";
	DIR Directory;
	WAVE_FormatTypeDef waveformat;
	UINT bytesread = 0;
	uint8_t outputResult = 0;
	uint32_t fSample[5];

	//Clear the Audio Array
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++) {
		AudioBuffer[i] = 0;
	}
	//memset(AudioBuffer, 0, AUDIO_BUFFER_SIZE);

	//Get read out protection status
	if (f_opendir(&Directory, path) == FR_OK) {
		//Open wave file to play

		for (int i = 0; i < 5; i++) {
			if (f_open(&Files[i], wvName, FA_READ) == FR_OK) {
				//Read the header of the file
				f_read(&Files[i], &waveformat, sizeof(waveformat), &bytesread);

				//Get Filesize and samplerate
				fSize[i] = waveformat.FileSize;
				fSample[i] = waveformat.SampleRate;

				if (fSample[0] != fSample[i]) {
					outputResult = 2;
				}
				//reset pointer to home position for reading.
				f_lseek(&Files[i], 0);

				switch (i) {
				case 0:
					fRow0 = malloc(/*sizeof(*fRow0) * */  waveformat.FileSize);
					f_read(&Files[i], fRow0, waveformat.FileSize, &bytesread);
					f_close(&Files[i]);
					break;
				case 1:
					fRow1 = malloc(/*sizeof(*fRow1) * */  waveformat.FileSize);
					f_read(&Files[i], fRow1, waveformat.FileSize, &bytesread);
					f_close(&Files[i]);
					break;
				case 2:
					fRow2 = malloc(/*sizeof(*fRow2) * */ waveformat.FileSize);
					f_read(&Files[i], fRow2, waveformat.FileSize, &bytesread);
					f_close(&Files[i]);
					break;
				case 3:
					fRow3 = malloc(/*sizeof(*fRow3) * */ waveformat.FileSize);
					f_read(&Files[i], fRow3, waveformat.FileSize, &bytesread);
					f_close(&Files[i]);
					break;
				case 4:
					fRow4 = malloc(/*sizeof(*fRow4) * */ waveformat.FileSize);
					f_read(&Files[i], fRow4, waveformat.FileSize, &bytesread);
					f_close(&Files[i]);
					break;
				default:
					break;
				}

			} else {
				//Error! File not found
				outputResult = 1;
				return outputResult;
			}
			wvName[6]++;
		}

		sampleRate = fSample[0];
		//Initialize the audio handler (DMA, I2S, I2C)

		BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, Volume, sampleRate);
		BSP_AUDIO_OUT_Play((uint16_t*) &AudioBuffer[0], AUDIO_BUFFER_SIZE);

	} else {
		outputResult = 3;
	}
	return outputResult;
}

/**
 * The function where the file will be copied from the prototype into the buffer and the bytes left will be reset
 */
void primeCol(uint8_t c) {
	uint8_t datapt = 0;
	uint8_t col = 15 - c;
	for (int i = 0; i < 5; i++) {
		datapt = (c * 5) + i;
		//If the LED is on in this position, cue sound, otherwise set bLeft to 0
		if (((cData[i]) & (1 << col)) >> col == 0) {
			bLeft[datapt] = fSize[i];
			FileCall[datapt] = Files[i];
		} else {
			bLeft[datapt] = 0;
		}
	}
}

void fillDMAArr() {
	uint16_t halfSz = AUDIO_BUFFER_SIZE / 2;
	volatile uint16_t dataPart[halfSz];
	uint8_t singleDataPc[halfSz];
	uint8_t divisor = 0;
	uint32_t bytesread;
	uint16_t offs = 0;

	if (BufferOffset != BUFFER_OFFSET_NONE) {
		switch (BufferOffset) {
		case BUFFER_OFFSET_FULL:
			offs = halfSz;
			break;
		case BUFFER_OFFSET_HALF:
			offs = 0;
			break;
		case BUFFER_OFFSET_NONE:
			//This is never called, just here for warning suppression
			return;
			break;
		}

		for (volatile int i = 0; i < halfSz; i++) {
			dataPart[i] = 0U;
			dataPart[i] -= dataPart[i];

			//Removing need for dataPart
			AudioBuffer[i + offs] = 0U;

		}

		//memset(dataPart, 0, halfSz);
		for (int i = 0; i < 80; i++) {
			if (bLeft[i] < halfSz) {
				bLeft[i] = 0;
			}

			if (bLeft[i] != 0) {
				divisor++;
				//f_read(&FileCall[i], &singleDataPc[0], halfSz, (void *) &bytesread);
				uint16_t tracker = 0;

				for (int j = 0; j < halfSz / 2; j++) {
					//volatile uint16_t t = ((singleDataPc[j] & 0x00FF)<<8) | ((singleDataPc[j] & 0xFF00)>>8);
					//dataPart[j] += t;

					//dataPart[j] += singleDataPc[j] /5; //added /5

					uint16_t temp1 = 0;

					switch (i % 5) {
					case 0:
						temp1 = fSize[0] - bLeft[i];
						//uint16_t t = ((fRow0[j+temp1] & 0x00FF)<<8) | ((fRow0[j+temp1] & 0xFF00)>>8);
						uint16_t t = fRow0[j+temp1];
						AudioBuffer[offs + tracker] += t;
						AudioBuffer[offs + tracker + 1] += t;
						//dataPart[j] += fRow0[j + temp1]/5;
						break;
					case 1:
						temp1 = fSize[1] - bLeft[i];
						AudioBuffer[offs + tracker] += fRow1[j + temp1] / 5;
						AudioBuffer[offs + tracker + 1] += fRow1[j + temp1] / 5;
						//dataPart[j] += fRow1[j + temp1]/5;
						break;
					case 2:
						temp1 = fSize[2] - bLeft[i];
						AudioBuffer[offs + tracker] += fRow2[j + temp1] / 5;
						AudioBuffer[offs + tracker + 1] += fRow2[j + temp1] / 5;
						//dataPart[j] += fRow2[j + temp1]/5;
						break;
					case 3:
						temp1 = fSize[3] - bLeft[i];
						AudioBuffer[offs + tracker] += fRow3[j + temp1] / 5;
						AudioBuffer[offs + tracker + 1] += fRow3[j + temp1] / 5;
						//dataPart[j] += fRow3[j + temp1]/5;
						break;
					case 4:
						temp1 = fSize[4] - bLeft[i];
						AudioBuffer[offs + tracker] += fRow4[j + temp1] / 5;
						AudioBuffer[offs + tracker + 1] += fRow4[j + temp1] / 5;
						//dataPart[j] += fRow4[j + temp1]/5;
						break;
					}
					tracker += 2;
				}
				bLeft[i] -= halfSz / 2;
			}
		}



//		if(divisor == 0){
//			BSP_AUDIO_OUT_Pause();
//		}else{
//			BSP_AUDIO_OUT_Resume();
//		}

		/*
		 if (divisor == 0) {
		 // Fill with zeroes
		 for (int j = 0; j < halfSz; j++) {
		 AudioBuffer[j + offs] = 0;
		 }
		 } else {
		 for (int j = 0; j < halfSz; j++) {
		 AudioBuffer[j + offs] = (uint16_t) (dataPart[j] / divisor);
		 //AudioBuffer[j+offs] = (uint16_t) (dat[j+bbb]);
		 //bbb++;
		 }
		 //bLeft[0] = sizeof(dat) - halfSz;

		 }
		 */
		BufferOffset = BUFFER_OFFSET_NONE;
	}
}

/**
 * @brief  Manages the DMA full Transfer complete event.
 */
void BSP_AUDIO_OUT_TransferComplete_CallBack(void) {
	BufferOffset = BUFFER_OFFSET_FULL;
	BSP_AUDIO_OUT_ChangeBuffer((uint16_t *) &AudioBuffer[0], AUDIO_BUFFER_SIZE/2); //was /2 for audio buff
}

/**
 * @brief  Manages the DMA Half Transfer complete event.
 */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void) {
	BufferOffset = BUFFER_OFFSET_HALF;
}

