
AudioTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a968  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000828  0800ab00  0800ab00  0001ab00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b328  0800b328  0001b328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b32c  0800b32c  0001b32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000041c  20000000  0800b330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000a058  2000041c  0800b74c  0002041c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000a474  0800b74c  0002a474  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002041c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0003fcda  00000000  00000000  0002044a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000077d9  00000000  00000000  00060124  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00015f90  00000000  00000000  000678fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001630  00000000  00000000  0007d890  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002098  00000000  00000000  0007eec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000f8de  00000000  00000000  00080f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007f6d  00000000  00000000  00090836  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      000000fe  00000000  00000000  000987a3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004858  00000000  00000000  000988a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000041c 	.word	0x2000041c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800aae8 	.word	0x0800aae8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000420 	.word	0x20000420
 80001d4:	0800aae8 	.word	0x0800aae8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2uiz>:
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	d211      	bcs.n	8000b20 <__aeabi_d2uiz+0x28>
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d211      	bcs.n	8000b26 <__aeabi_d2uiz+0x2e>
 8000b02:	d50d      	bpl.n	8000b20 <__aeabi_d2uiz+0x28>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d40e      	bmi.n	8000b2c <__aeabi_d2uiz+0x34>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d102      	bne.n	8000b32 <__aeabi_d2uiz+0x3a>
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_d2f>:
 8000b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b40:	bf24      	itt	cs
 8000b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4a:	d90d      	bls.n	8000b68 <__aeabi_d2f+0x30>
 8000b4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b6c:	d121      	bne.n	8000bb2 <__aeabi_d2f+0x7a>
 8000b6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b72:	bfbc      	itt	lt
 8000b74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	4770      	bxlt	lr
 8000b7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b82:	f1c2 0218 	rsb	r2, r2, #24
 8000b86:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	bf18      	it	ne
 8000b94:	f040 0001 	orrne.w	r0, r0, #1
 8000b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba4:	ea40 000c 	orr.w	r0, r0, ip
 8000ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb0:	e7cc      	b.n	8000b4c <__aeabi_d2f+0x14>
 8000bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb6:	d107      	bne.n	8000bc8 <__aeabi_d2f+0x90>
 8000bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bc6:	4770      	bxne	lr
 8000bc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <cs43l22_SetFrequency>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
  return 0;
}
 8000bd8:	2000      	movs	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <cs43l22_Reset>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
  return 0;
}
 8000bdc:	2000      	movs	r0, #0
 8000bde:	4770      	bx	lr

08000be0 <cs43l22_SetVolume>:
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000be0:	2964      	cmp	r1, #100	; 0x64
{
 8000be2:	b538      	push	{r3, r4, r5, lr}
 8000be4:	b2c5      	uxtb	r5, r0
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000be6:	d80e      	bhi.n	8000c06 <cs43l22_SetVolume+0x26>
 8000be8:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8000bec:	2464      	movs	r4, #100	; 0x64
 8000bee:	fb91 f4f4 	sdiv	r4, r1, r4
 8000bf2:	b2e4      	uxtb	r4, r4
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 8000bf4:	3419      	adds	r4, #25
 8000bf6:	b2e4      	uxtb	r4, r4
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  uint32_t result = 0;
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8000bf8:	4622      	mov	r2, r4
 8000bfa:	2120      	movs	r1, #32
 8000bfc:	4628      	mov	r0, r5
 8000bfe:	f007 f958 	bl	8007eb2 <AUDIO_IO_Write>
 8000c02:	4622      	mov	r2, r4
 8000c04:	e007      	b.n	8000c16 <cs43l22_SetVolume+0x36>
  if(Volume > 0xE6)
 8000c06:	29e6      	cmp	r1, #230	; 0xe6
 8000c08:	d90b      	bls.n	8000c22 <cs43l22_SetVolume+0x42>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000c0a:	227d      	movs	r2, #125	; 0x7d
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	4628      	mov	r0, r5
 8000c10:	f007 f94f 	bl	8007eb2 <AUDIO_IO_Write>
 8000c14:	227d      	movs	r2, #125	; 0x7d
 8000c16:	4628      	mov	r0, r5
 8000c18:	2121      	movs	r1, #33	; 0x21
 8000c1a:	f007 f94a 	bl	8007eb2 <AUDIO_IO_Write>
}
 8000c1e:	2000      	movs	r0, #0
 8000c20:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000c22:	2464      	movs	r4, #100	; 0x64
 8000c24:	e7e6      	b.n	8000bf4 <cs43l22_SetVolume+0x14>
	...

08000c28 <cs43l22_Init>:
{
 8000c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2a:	4606      	mov	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000c2c:	b2f4      	uxtb	r4, r6
{
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4617      	mov	r7, r2
  AUDIO_IO_Init();     
 8000c32:	f007 f90b 	bl	8007e4c <AUDIO_IO_Init>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000c36:	2201      	movs	r2, #1
 8000c38:	2102      	movs	r1, #2
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f007 f939 	bl	8007eb2 <AUDIO_IO_Write>
  switch (OutputDevice)
 8000c40:	1e6a      	subs	r2, r5, #1
 8000c42:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <cs43l22_Init+0xc4>)
 8000c44:	2a03      	cmp	r2, #3
 8000c46:	d84e      	bhi.n	8000ce6 <cs43l22_Init+0xbe>
 8000c48:	e8df f002 	tbb	[pc, r2]
 8000c4c:	4d4b4902 	.word	0x4d4b4902
    OutputDev = 0xFA;
 8000c50:	22fa      	movs	r2, #250	; 0xfa
    OutputDev = 0x05;
 8000c52:	701a      	strb	r2, [r3, #0]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000c54:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8000c56:	2104      	movs	r1, #4
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f007 f92a 	bl	8007eb2 <AUDIO_IO_Write>
 8000c5e:	2281      	movs	r2, #129	; 0x81
 8000c60:	2105      	movs	r1, #5
 8000c62:	4620      	mov	r0, r4
 8000c64:	f007 f925 	bl	8007eb2 <AUDIO_IO_Write>
 8000c68:	2204      	movs	r2, #4
 8000c6a:	2106      	movs	r1, #6
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	f007 f920 	bl	8007eb2 <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000c72:	4630      	mov	r0, r6
 8000c74:	4639      	mov	r1, r7
 8000c76:	f7ff ffb3 	bl	8000be0 <cs43l22_SetVolume>
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000c7a:	2d02      	cmp	r5, #2
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000c7c:	4606      	mov	r6, r0
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000c7e:	d00e      	beq.n	8000c9e <cs43l22_Init+0x76>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000c80:	2206      	movs	r2, #6
 8000c82:	210f      	movs	r1, #15
 8000c84:	4620      	mov	r0, r4
 8000c86:	f007 f914 	bl	8007eb2 <AUDIO_IO_Write>
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2124      	movs	r1, #36	; 0x24
 8000c8e:	4620      	mov	r0, r4
 8000c90:	f007 f90f 	bl	8007eb2 <AUDIO_IO_Write>
 8000c94:	2200      	movs	r2, #0
 8000c96:	2125      	movs	r1, #37	; 0x25
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f007 f90a 	bl	8007eb2 <AUDIO_IO_Write>
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	210a      	movs	r1, #10
 8000ca4:	f007 f905 	bl	8007eb2 <AUDIO_IO_Write>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	2204      	movs	r2, #4
 8000cac:	210e      	movs	r1, #14
 8000cae:	f007 f900 	bl	8007eb2 <AUDIO_IO_Write>
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2127      	movs	r1, #39	; 0x27
 8000cb8:	f007 f8fb 	bl	8007eb2 <AUDIO_IO_Write>
 8000cbc:	4620      	mov	r0, r4
 8000cbe:	220f      	movs	r2, #15
 8000cc0:	211f      	movs	r1, #31
 8000cc2:	f007 f8f6 	bl	8007eb2 <AUDIO_IO_Write>
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	220a      	movs	r2, #10
 8000cca:	211a      	movs	r1, #26
 8000ccc:	f007 f8f1 	bl	8007eb2 <AUDIO_IO_Write>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	220a      	movs	r2, #10
 8000cd4:	211b      	movs	r1, #27
 8000cd6:	f007 f8ec 	bl	8007eb2 <AUDIO_IO_Write>
}
 8000cda:	4630      	mov	r0, r6
 8000cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OutputDev = 0xAF;
 8000cde:	22af      	movs	r2, #175	; 0xaf
 8000ce0:	e7b7      	b.n	8000c52 <cs43l22_Init+0x2a>
    OutputDev = 0xAA;
 8000ce2:	22aa      	movs	r2, #170	; 0xaa
 8000ce4:	e7b5      	b.n	8000c52 <cs43l22_Init+0x2a>
    OutputDev = 0x05;
 8000ce6:	2205      	movs	r2, #5
 8000ce8:	e7b3      	b.n	8000c52 <cs43l22_Init+0x2a>
 8000cea:	bf00      	nop
 8000cec:	20000438 	.word	0x20000438

08000cf0 <cs43l22_DeInit>:
  AUDIO_IO_DeInit();
 8000cf0:	f007 b8de 	b.w	8007eb0 <AUDIO_IO_DeInit>

08000cf4 <cs43l22_ReadID>:
{
 8000cf4:	b510      	push	{r4, lr}
 8000cf6:	4604      	mov	r4, r0
  AUDIO_IO_Init(); 
 8000cf8:	f007 f8a8 	bl	8007e4c <AUDIO_IO_Init>
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	b2e0      	uxtb	r0, r4
 8000d00:	f007 f8d9 	bl	8007eb6 <AUDIO_IO_Read>
}
 8000d04:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8000d08:	bd10      	pop	{r4, pc}

08000d0a <cs43l22_SetMute.part.0>:
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
 8000d0a:	b510      	push	{r4, lr}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8000d0c:	b2c4      	uxtb	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000d0e:	4620      	mov	r0, r4
 8000d10:	22ff      	movs	r2, #255	; 0xff
 8000d12:	2104      	movs	r1, #4
 8000d14:	f007 f8cd 	bl	8007eb2 <AUDIO_IO_Write>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2122      	movs	r1, #34	; 0x22
 8000d1e:	f007 f8c8 	bl	8007eb2 <AUDIO_IO_Write>
 8000d22:	4620      	mov	r0, r4
 8000d24:	2201      	movs	r2, #1
 8000d26:	2123      	movs	r1, #35	; 0x23
}
 8000d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AUDIO_IO_Write(Addr, Reg, Value);
 8000d2c:	f007 b8c1 	b.w	8007eb2 <AUDIO_IO_Write>

08000d30 <cs43l22_SetMute>:
  if(Cmd == AUDIO_MUTE_ON)
 8000d30:	2901      	cmp	r1, #1
{
 8000d32:	b510      	push	{r4, lr}
  if(Cmd == AUDIO_MUTE_ON)
 8000d34:	d103      	bne.n	8000d3e <cs43l22_SetMute+0xe>
 8000d36:	f7ff ffe8 	bl	8000d0a <cs43l22_SetMute.part.0>
}
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	bd10      	pop	{r4, pc}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 8000d3e:	b2c4      	uxtb	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000d40:	4620      	mov	r0, r4
 8000d42:	2200      	movs	r2, #0
 8000d44:	2122      	movs	r1, #34	; 0x22
 8000d46:	f007 f8b4 	bl	8007eb2 <AUDIO_IO_Write>
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2123      	movs	r1, #35	; 0x23
 8000d50:	f007 f8af 	bl	8007eb2 <AUDIO_IO_Write>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <cs43l22_SetMute+0x34>)
  AUDIO_IO_Write(Addr, Reg, Value);
 8000d56:	2104      	movs	r1, #4
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000d58:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f007 f8a9 	bl	8007eb2 <AUDIO_IO_Write>
 8000d60:	e7eb      	b.n	8000d3a <cs43l22_SetMute+0xa>
 8000d62:	bf00      	nop
 8000d64:	20000438 	.word	0x20000438

08000d68 <cs43l22_Resume>:
{
 8000d68:	b573      	push	{r0, r1, r4, r5, r6, lr}
  volatile uint32_t index = 0x00;
 8000d6a:	2500      	movs	r5, #0
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000d6c:	4629      	mov	r1, r5
{
 8000d6e:	4604      	mov	r4, r0
  volatile uint32_t index = 0x00;
 8000d70:	9501      	str	r5, [sp, #4]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000d72:	f7ff ffdd 	bl	8000d30 <cs43l22_SetMute>
  for(index = 0x00; index < 0xFF; index++);
 8000d76:	9501      	str	r5, [sp, #4]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000d78:	4606      	mov	r6, r0
  for(index = 0x00; index < 0xFF; index++);
 8000d7a:	9b01      	ldr	r3, [sp, #4]
 8000d7c:	2bfe      	cmp	r3, #254	; 0xfe
 8000d7e:	d90e      	bls.n	8000d9e <cs43l22_Resume+0x36>
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <cs43l22_Resume+0x40>)
 8000d82:	b2e4      	uxtb	r4, r4
 8000d84:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8000d86:	4620      	mov	r0, r4
 8000d88:	2104      	movs	r1, #4
 8000d8a:	f007 f892 	bl	8007eb2 <AUDIO_IO_Write>
 8000d8e:	4620      	mov	r0, r4
 8000d90:	229e      	movs	r2, #158	; 0x9e
 8000d92:	2102      	movs	r1, #2
 8000d94:	f007 f88d 	bl	8007eb2 <AUDIO_IO_Write>
}
 8000d98:	4630      	mov	r0, r6
 8000d9a:	b002      	add	sp, #8
 8000d9c:	bd70      	pop	{r4, r5, r6, pc}
  for(index = 0x00; index < 0xFF; index++);
 8000d9e:	9b01      	ldr	r3, [sp, #4]
 8000da0:	3301      	adds	r3, #1
 8000da2:	9301      	str	r3, [sp, #4]
 8000da4:	e7e9      	b.n	8000d7a <cs43l22_Resume+0x12>
 8000da6:	bf00      	nop
 8000da8:	20000438 	.word	0x20000438

08000dac <cs43l22_Pause>:
{  
 8000dac:	b510      	push	{r4, lr}
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff ffab 	bl	8000d0a <cs43l22_SetMute.part.0>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000db4:	b2e0      	uxtb	r0, r4
 8000db6:	2201      	movs	r2, #1
 8000db8:	2102      	movs	r1, #2
 8000dba:	f007 f87a 	bl	8007eb2 <AUDIO_IO_Write>
}
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	bd10      	pop	{r4, pc}
	...

08000dc4 <cs43l22_Stop>:
{
 8000dc4:	b510      	push	{r4, lr}
 8000dc6:	4604      	mov	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000dc8:	b2e4      	uxtb	r4, r4
 8000dca:	f7ff ff9e 	bl	8000d0a <cs43l22_SetMute.part.0>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000dce:	4620      	mov	r0, r4
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	210e      	movs	r1, #14
 8000dd4:	f007 f86d 	bl	8007eb2 <AUDIO_IO_Write>
 8000dd8:	4620      	mov	r0, r4
 8000dda:	229f      	movs	r2, #159	; 0x9f
 8000ddc:	2102      	movs	r1, #2
 8000dde:	f007 f868 	bl	8007eb2 <AUDIO_IO_Write>
  Is_cs43l22_Stop = 1;
 8000de2:	4b02      	ldr	r3, [pc, #8]	; (8000dec <cs43l22_Stop+0x28>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	701a      	strb	r2, [r3, #0]
}
 8000de8:	2000      	movs	r0, #0
 8000dea:	bd10      	pop	{r4, pc}
 8000dec:	20000000 	.word	0x20000000

08000df0 <cs43l22_Play>:
{
 8000df0:	b570      	push	{r4, r5, r6, lr}
  if(Is_cs43l22_Stop == 1)
 8000df2:	4d0d      	ldr	r5, [pc, #52]	; (8000e28 <cs43l22_Play+0x38>)
 8000df4:	782b      	ldrb	r3, [r5, #0]
 8000df6:	2b01      	cmp	r3, #1
{
 8000df8:	4604      	mov	r4, r0
  if(Is_cs43l22_Stop == 1)
 8000dfa:	d113      	bne.n	8000e24 <cs43l22_Play+0x34>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8000dfc:	b2c6      	uxtb	r6, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000dfe:	2206      	movs	r2, #6
 8000e00:	210e      	movs	r1, #14
 8000e02:	4630      	mov	r0, r6
 8000e04:	f007 f855 	bl	8007eb2 <AUDIO_IO_Write>
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	f7ff ff90 	bl	8000d30 <cs43l22_SetMute>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000e10:	229e      	movs	r2, #158	; 0x9e
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000e12:	4604      	mov	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000e14:	2102      	movs	r1, #2
 8000e16:	4630      	mov	r0, r6
 8000e18:	f007 f84b 	bl	8007eb2 <AUDIO_IO_Write>
    Is_cs43l22_Stop = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	702b      	strb	r3, [r5, #0]
}
 8000e20:	4620      	mov	r0, r4
 8000e22:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t counter = 0;
 8000e24:	2400      	movs	r4, #0
  return counter;  
 8000e26:	e7fb      	b.n	8000e20 <cs43l22_Play+0x30>
 8000e28:	20000000 	.word	0x20000000

08000e2c <cs43l22_SetOutputMode>:
  switch (Output) 
 8000e2c:	3901      	subs	r1, #1
{
 8000e2e:	b510      	push	{r4, lr}
 8000e30:	b2c0      	uxtb	r0, r0
 8000e32:	4c10      	ldr	r4, [pc, #64]	; (8000e74 <cs43l22_SetOutputMode+0x48>)
  switch (Output) 
 8000e34:	2903      	cmp	r1, #3
 8000e36:	d817      	bhi.n	8000e68 <cs43l22_SetOutputMode+0x3c>
 8000e38:	e8df f001 	tbb	[pc, r1]
 8000e3c:	16100a02 	.word	0x16100a02
  AUDIO_IO_Write(Addr, Reg, Value);
 8000e40:	22fa      	movs	r2, #250	; 0xfa
 8000e42:	2104      	movs	r1, #4
 8000e44:	f007 f835 	bl	8007eb2 <AUDIO_IO_Write>
      OutputDev = 0xFA;
 8000e48:	23fa      	movs	r3, #250	; 0xfa
      OutputDev = 0x05;
 8000e4a:	7023      	strb	r3, [r4, #0]
}
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	bd10      	pop	{r4, pc}
  AUDIO_IO_Write(Addr, Reg, Value);
 8000e50:	22af      	movs	r2, #175	; 0xaf
 8000e52:	2104      	movs	r1, #4
 8000e54:	f007 f82d 	bl	8007eb2 <AUDIO_IO_Write>
      OutputDev = 0xAF;
 8000e58:	23af      	movs	r3, #175	; 0xaf
 8000e5a:	e7f6      	b.n	8000e4a <cs43l22_SetOutputMode+0x1e>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000e5c:	22aa      	movs	r2, #170	; 0xaa
 8000e5e:	2104      	movs	r1, #4
 8000e60:	f007 f827 	bl	8007eb2 <AUDIO_IO_Write>
      OutputDev = 0xAA;
 8000e64:	23aa      	movs	r3, #170	; 0xaa
 8000e66:	e7f0      	b.n	8000e4a <cs43l22_SetOutputMode+0x1e>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000e68:	2205      	movs	r2, #5
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	f007 f821 	bl	8007eb2 <AUDIO_IO_Write>
      OutputDev = 0x05;
 8000e70:	2305      	movs	r3, #5
 8000e72:	e7ea      	b.n	8000e4a <cs43l22_SetOutputMode+0x1e>
 8000e74:	20000438 	.word	0x20000438

08000e78 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8000e78:	4770      	bx	lr

08000e7a <LSM303DLHC_AccInit>:
{  
 8000e7a:	b510      	push	{r4, lr}
 8000e7c:	4604      	mov	r4, r0
  COMPASSACCELERO_IO_Init();
 8000e7e:	f007 f81d 	bl	8007ebc <COMPASSACCELERO_IO_Init>
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8000e82:	b2e2      	uxtb	r2, r4
 8000e84:	2120      	movs	r1, #32
 8000e86:	2032      	movs	r0, #50	; 0x32
 8000e88:	f007 f864 	bl	8007f54 <COMPASSACCELERO_IO_Write>
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2123      	movs	r1, #35	; 0x23
 8000e90:	2032      	movs	r0, #50	; 0x32
}
 8000e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8000e96:	f007 b85d 	b.w	8007f54 <COMPASSACCELERO_IO_Write>

08000e9a <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8000e9a:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8000e9c:	f007 f80e 	bl	8007ebc <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8000ea0:	210f      	movs	r1, #15
 8000ea2:	2032      	movs	r0, #50	; 0x32
  
  return ctrl;
}
 8000ea4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8000ea8:	f007 b856 	b.w	8007f58 <COMPASSACCELERO_IO_Read>

08000eac <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8000eac:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8000eae:	2124      	movs	r1, #36	; 0x24
 8000eb0:	2032      	movs	r0, #50	; 0x32
 8000eb2:	f007 f851 	bl	8007f58 <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8000eb6:	f060 027f 	orn	r2, r0, #127	; 0x7f
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	2124      	movs	r1, #36	; 0x24
 8000ebe:	2032      	movs	r0, #50	; 0x32
}
 8000ec0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8000ec4:	f007 b846 	b.w	8007f54 <COMPASSACCELERO_IO_Write>

08000ec8 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8000ec8:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000eca:	2121      	movs	r1, #33	; 0x21
{
 8000ecc:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000ece:	2032      	movs	r0, #50	; 0x32
 8000ed0:	f007 f842 	bl	8007f58 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 8000ed4:	f000 020c 	and.w	r2, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000ed8:	4322      	orrs	r2, r4
 8000eda:	2121      	movs	r1, #33	; 0x21
 8000edc:	2032      	movs	r0, #50	; 0x32
}
 8000ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000ee2:	f007 b837 	b.w	8007f54 <COMPASSACCELERO_IO_Write>

08000ee6 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8000ee6:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000ee8:	2121      	movs	r1, #33	; 0x21
{
 8000eea:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000eec:	2032      	movs	r0, #50	; 0x32
 8000eee:	f007 f833 	bl	8007f58 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0xF7;
 8000ef2:	f000 02f7 	and.w	r2, r0, #247	; 0xf7
  
  tmpreg |= HighPassFilterState;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000ef6:	4322      	orrs	r2, r4
 8000ef8:	2121      	movs	r1, #33	; 0x21
 8000efa:	2032      	movs	r0, #50	; 0x32
}
 8000efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000f00:	f007 b828 	b.w	8007f54 <COMPASSACCELERO_IO_Write>

08000f04 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8000f04:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8000f08:	2123      	movs	r1, #35	; 0x23
{
 8000f0a:	4607      	mov	r7, r0
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8000f0c:	2032      	movs	r0, #50	; 0x32
 8000f0e:	f007 f823 	bl	8007f58 <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8000f12:	2124      	movs	r1, #36	; 0x24
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8000f14:	4604      	mov	r4, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8000f16:	2032      	movs	r0, #50	; 0x32
 8000f18:	f007 f81e 	bl	8007f58 <COMPASSACCELERO_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8000f1c:	2128      	movs	r1, #40	; 0x28
 8000f1e:	2032      	movs	r0, #50	; 0x32
 8000f20:	f007 f81a 	bl	8007f58 <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8000f24:	2129      	movs	r1, #41	; 0x29
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8000f26:	fa4f fa80 	sxtb.w	sl, r0
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8000f2a:	2032      	movs	r0, #50	; 0x32
 8000f2c:	f007 f814 	bl	8007f58 <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8000f30:	212a      	movs	r1, #42	; 0x2a
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8000f32:	fa4f f880 	sxtb.w	r8, r0
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8000f36:	2032      	movs	r0, #50	; 0x32
 8000f38:	f007 f80e 	bl	8007f58 <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8000f3c:	212b      	movs	r1, #43	; 0x2b
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8000f3e:	b246      	sxtb	r6, r0
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8000f40:	2032      	movs	r0, #50	; 0x32
 8000f42:	f007 f809 	bl	8007f58 <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8000f46:	212c      	movs	r1, #44	; 0x2c
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8000f48:	b245      	sxtb	r5, r0
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8000f4a:	2032      	movs	r0, #50	; 0x32
 8000f4c:	f007 f804 	bl	8007f58 <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8000f50:	212d      	movs	r1, #45	; 0x2d
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8000f52:	fa4f f980 	sxtb.w	r9, r0
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8000f56:	2032      	movs	r0, #50	; 0x32
 8000f58:	f006 fffe 	bl	8007f58 <COMPASSACCELERO_IO_Read>
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8000f5c:	0663      	lsls	r3, r4, #25
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8000f5e:	b240      	sxtb	r0, r0
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8000f60:	d428      	bmi.n	8000fb4 <LSM303DLHC_AccReadXYZ+0xb0>
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000f62:	eb0a 2808 	add.w	r8, sl, r8, lsl #8
 8000f66:	eb06 2505 	add.w	r5, r6, r5, lsl #8
 8000f6a:	f8ad 8000 	strh.w	r8, [sp]
 8000f6e:	f8ad 5002 	strh.w	r5, [sp, #2]
 8000f72:	eb09 2000 	add.w	r0, r9, r0, lsl #8
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8000f76:	f004 0430 	and.w	r4, r4, #48	; 0x30
 8000f7a:	2c20      	cmp	r4, #32
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000f7c:	f8ad 0004 	strh.w	r0, [sp, #4]
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8000f80:	d023      	beq.n	8000fca <LSM303DLHC_AccReadXYZ+0xc6>
 8000f82:	2c30      	cmp	r4, #48	; 0x30
 8000f84:	d023      	beq.n	8000fce <LSM303DLHC_AccReadXYZ+0xca>
 8000f86:	2c10      	cmp	r4, #16
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8000f88:	bf0c      	ite	eq
 8000f8a:	2302      	moveq	r3, #2
 8000f8c:	2301      	movne	r3, #1
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8000f8e:	f8bd 2000 	ldrh.w	r2, [sp]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	fb12 f203 	smulbb	r2, r2, r3
 8000f98:	803a      	strh	r2, [r7, #0]
 8000f9a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8000f9e:	fb12 f203 	smulbb	r2, r2, r3
 8000fa2:	807a      	strh	r2, [r7, #2]
 8000fa4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8000fa8:	fb12 f303 	smulbb	r3, r2, r3
 8000fac:	80bb      	strh	r3, [r7, #4]
  }
}
 8000fae:	b002      	add	sp, #8
 8000fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000fb4:	eb08 280a 	add.w	r8, r8, sl, lsl #8
 8000fb8:	eb05 2506 	add.w	r5, r5, r6, lsl #8
 8000fbc:	f8ad 8000 	strh.w	r8, [sp]
 8000fc0:	f8ad 5002 	strh.w	r5, [sp, #2]
 8000fc4:	eb00 2009 	add.w	r0, r0, r9, lsl #8
 8000fc8:	e7d5      	b.n	8000f76 <LSM303DLHC_AccReadXYZ+0x72>
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8000fca:	2304      	movs	r3, #4
    break;
 8000fcc:	e7df      	b.n	8000f8e <LSM303DLHC_AccReadXYZ+0x8a>
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8000fce:	230c      	movs	r3, #12
    break;
 8000fd0:	e7dd      	b.n	8000f8e <LSM303DLHC_AccReadXYZ+0x8a>

08000fd2 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8000fd2:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000fd4:	2121      	movs	r1, #33	; 0x21
{
 8000fd6:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8000fd8:	2032      	movs	r0, #50	; 0x32
 8000fda:	f006 ffbd 	bl	8007f58 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8000fde:	f000 02fb 	and.w	r2, r0, #251	; 0xfb
  
  tmpreg |= HighPassFilterClickState;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000fe2:	4322      	orrs	r2, r4
 8000fe4:	2121      	movs	r1, #33	; 0x21
 8000fe6:	2032      	movs	r0, #50	; 0x32
}
 8000fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8000fec:	f006 bfb2 	b.w	8007f54 <COMPASSACCELERO_IO_Write>

08000ff0 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8000ff0:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8000ff2:	2122      	movs	r1, #34	; 0x22
{
 8000ff4:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8000ff6:	2032      	movs	r0, #50	; 0x32
 8000ff8:	f006 ffae 	bl	8007f58 <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8000ffc:	ea40 0204 	orr.w	r2, r0, r4
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	2122      	movs	r1, #34	; 0x22
 8001004:	2032      	movs	r0, #50	; 0x32
}
 8001006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800100a:	f006 bfa3 	b.w	8007f54 <COMPASSACCELERO_IO_Write>

0800100e <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 800100e:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8001010:	2138      	movs	r1, #56	; 0x38
{  
 8001012:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8001014:	2032      	movs	r0, #50	; 0x32
 8001016:	f006 ff9f 	bl	8007f58 <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 800101a:	ea40 0204 	orr.w	r2, r0, r4
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	2138      	movs	r1, #56	; 0x38
 8001022:	2032      	movs	r0, #50	; 0x32
 8001024:	f006 ff96 	bl	8007f54 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8001028:	220a      	movs	r2, #10
 800102a:	213a      	movs	r1, #58	; 0x3a
 800102c:	2032      	movs	r0, #50	; 0x32
 800102e:	f006 ff91 	bl	8007f54 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8001032:	2205      	movs	r2, #5
 8001034:	213b      	movs	r1, #59	; 0x3b
 8001036:	2032      	movs	r0, #50	; 0x32
 8001038:	f006 ff8c 	bl	8007f54 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 800103c:	2205      	movs	r2, #5
 800103e:	213c      	movs	r1, #60	; 0x3c
 8001040:	2032      	movs	r0, #50	; 0x32
 8001042:	f006 ff87 	bl	8007f54 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8001046:	2232      	movs	r2, #50	; 0x32
 8001048:	213d      	movs	r1, #61	; 0x3d
 800104a:	4610      	mov	r0, r2
}
 800104c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8001050:	f006 bf80 	b.w	8007f54 <COMPASSACCELERO_IO_Write>

08001054 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8001054:	b508      	push	{r3, lr}
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8001056:	f006 ff53 	bl	8007f00 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 800105a:	2080      	movs	r0, #128	; 0x80
 800105c:	f7ff ffc8 	bl	8000ff0 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8001060:	2004      	movs	r0, #4
 8001062:	f7ff ffb6 	bl	8000fd2 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8001066:	2010      	movs	r0, #16
}
 8001068:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 800106c:	f7ff bfcf 	b.w	800100e <LSM303DLHC_AccClickITEnable>

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_InitTick+0x24>)
{
 8001074:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001080:	f000 f894 	bl	80011ac <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	4621      	mov	r1, r4
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f000 f84e 	bl	800112c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8001090:	2000      	movs	r0, #0
 8001092:	bd10      	pop	{r4, pc}
 8001094:	200000b0 	.word	0x200000b0

08001098 <HAL_Init>:
{
 8001098:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <HAL_Init+0x30>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010a2:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010aa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010b2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b4:	2003      	movs	r0, #3
 80010b6:	f000 f827 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ba:	200f      	movs	r0, #15
 80010bc:	f7ff ffd8 	bl	8001070 <HAL_InitTick>
  HAL_MspInit();
 80010c0:	f007 fa48 	bl	8008554 <HAL_MspInit>
}
 80010c4:	2000      	movs	r0, #0
 80010c6:	bd08      	pop	{r3, pc}
 80010c8:	40023c00 	.word	0x40023c00

080010cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80010cc:	4a02      	ldr	r2, [pc, #8]	; (80010d8 <HAL_IncTick+0xc>)
 80010ce:	6813      	ldr	r3, [r2, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000940 	.word	0x20000940

080010dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010dc:	4b01      	ldr	r3, [pc, #4]	; (80010e4 <HAL_GetTick+0x8>)
 80010de:	6818      	ldr	r0, [r3, #0]
}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20000940 	.word	0x20000940

080010e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80010e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80010ea:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ec:	f7ff fff6 	bl	80010dc <HAL_GetTick>
  uint32_t wait = Delay;
 80010f0:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f2:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80010f4:	4605      	mov	r5, r0
  {
     wait++;
 80010f6:	bf18      	it	ne
 80010f8:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010fa:	f7ff ffef 	bl	80010dc <HAL_GetTick>
 80010fe:	1b40      	subs	r0, r0, r5
 8001100:	42a0      	cmp	r0, r4
 8001102:	d3fa      	bcc.n	80010fa <HAL_Delay+0x12>
  {
  }
}
 8001104:	b003      	add	sp, #12
 8001106:	bd30      	pop	{r4, r5, pc}

08001108 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001108:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800110a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001110:	041b      	lsls	r3, r3, #16
 8001112:	0c1b      	lsrs	r3, r3, #16
 8001114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001118:	0200      	lsls	r0, r0, #8
 800111a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001122:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001124:	60d3      	str	r3, [r2, #12]
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112e:	b530      	push	{r4, r5, lr}
 8001130:	68dc      	ldr	r4, [r3, #12]
 8001132:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001136:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800113c:	2b04      	cmp	r3, #4
 800113e:	bf28      	it	cs
 8001140:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001142:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 0501 	mov.w	r5, #1
 8001148:	fa05 f303 	lsl.w	r3, r5, r3
 800114c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001150:	bf8c      	ite	hi
 8001152:	3c03      	subhi	r4, #3
 8001154:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001156:	4019      	ands	r1, r3
 8001158:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800115a:	fa05 f404 	lsl.w	r4, r5, r4
 800115e:	3c01      	subs	r4, #1
 8001160:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001162:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	ea42 0201 	orr.w	r2, r2, r1
 8001168:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	bfaf      	iteee	ge
 800116e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	f000 000f 	andlt.w	r0, r0, #15
 8001176:	4b06      	ldrlt	r3, [pc, #24]	; (8001190 <HAL_NVIC_SetPriority+0x64>)
 8001178:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117a:	bfa5      	ittet	ge
 800117c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001180:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001188:	bd30      	pop	{r4, r5, pc}
 800118a:	bf00      	nop
 800118c:	e000ed00 	.word	0xe000ed00
 8001190:	e000ed14 	.word	0xe000ed14

08001194 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001194:	0942      	lsrs	r2, r0, #5
 8001196:	2301      	movs	r3, #1
 8001198:	f000 001f 	and.w	r0, r0, #31
 800119c:	fa03 f000 	lsl.w	r0, r3, r0
 80011a0:	4b01      	ldr	r3, [pc, #4]	; (80011a8 <HAL_NVIC_EnableIRQ+0x14>)
 80011a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100

080011ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	3801      	subs	r0, #1
 80011ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80011b2:	d20a      	bcs.n	80011ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ba:	21f0      	movs	r1, #240	; 0xf0
 80011bc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80011ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e010 	.word	0xe000e010
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80011d8:	6803      	ldr	r3, [r0, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80011e0:	f023 0303 	bic.w	r3, r3, #3
 80011e4:	2118      	movs	r1, #24
 80011e6:	3a10      	subs	r2, #16
 80011e8:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80011ec:	4904      	ldr	r1, [pc, #16]	; (8001200 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80011ee:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80011f0:	bf88      	it	hi
 80011f2:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80011f4:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80011f6:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80011f8:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80011fa:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	0800ab00 	.word	0x0800ab00

08001204 <HAL_DMA_Init>:
{
 8001204:	b570      	push	{r4, r5, r6, lr}
 8001206:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001208:	f7ff ff68 	bl	80010dc <HAL_GetTick>
 800120c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800120e:	2c00      	cmp	r4, #0
 8001210:	d071      	beq.n	80012f6 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8001212:	2300      	movs	r3, #0
 8001214:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001218:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800121a:	2302      	movs	r3, #2
 800121c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001220:	6813      	ldr	r3, [r2, #0]
 8001222:	f023 0301 	bic.w	r3, r3, #1
 8001226:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001228:	6821      	ldr	r1, [r4, #0]
 800122a:	680b      	ldr	r3, [r1, #0]
 800122c:	07d8      	lsls	r0, r3, #31
 800122e:	d43c      	bmi.n	80012aa <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001230:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001232:	4d32      	ldr	r5, [pc, #200]	; (80012fc <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001234:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001236:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001238:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800123a:	68a3      	ldr	r3, [r4, #8]
 800123c:	4313      	orrs	r3, r2
 800123e:	68e2      	ldr	r2, [r4, #12]
 8001240:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001242:	6922      	ldr	r2, [r4, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	6962      	ldr	r2, [r4, #20]
 8001248:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800124a:	69e2      	ldr	r2, [r4, #28]
 800124c:	4303      	orrs	r3, r0
 800124e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001250:	6a22      	ldr	r2, [r4, #32]
 8001252:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001254:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001256:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001258:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800125c:	bf01      	itttt	eq
 800125e:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8001260:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8001262:	4335      	orreq	r5, r6
 8001264:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8001266:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001268:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800126a:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800126c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001270:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001274:	d10b      	bne.n	800128e <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8001276:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001278:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800127a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800127c:	b13d      	cbz	r5, 800128e <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800127e:	b9f8      	cbnz	r0, 80012c0 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8001280:	2a01      	cmp	r2, #1
 8001282:	d02d      	beq.n	80012e0 <HAL_DMA_Init+0xdc>
 8001284:	d301      	bcc.n	800128a <HAL_DMA_Init+0x86>
 8001286:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001288:	d101      	bne.n	800128e <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800128a:	01ea      	lsls	r2, r5, #7
 800128c:	d42b      	bmi.n	80012e6 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800128e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001290:	4620      	mov	r0, r4
 8001292:	f7ff ffa1 	bl	80011d8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001296:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001298:	233f      	movs	r3, #63	; 0x3f
 800129a:	4093      	lsls	r3, r2
 800129c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800129e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80012a0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012a2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80012a4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80012a8:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012aa:	f7ff ff17 	bl	80010dc <HAL_GetTick>
 80012ae:	1b40      	subs	r0, r0, r5
 80012b0:	2805      	cmp	r0, #5
 80012b2:	d9b9      	bls.n	8001228 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012b4:	2320      	movs	r3, #32
 80012b6:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012b8:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80012ba:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80012be:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80012c0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80012c4:	d113      	bne.n	80012ee <HAL_DMA_Init+0xea>
    switch (tmp)
 80012c6:	2a03      	cmp	r2, #3
 80012c8:	d8e1      	bhi.n	800128e <HAL_DMA_Init+0x8a>
 80012ca:	a001      	add	r0, pc, #4	; (adr r0, 80012d0 <HAL_DMA_Init+0xcc>)
 80012cc:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80012d0:	080012e7 	.word	0x080012e7
 80012d4:	0800128b 	.word	0x0800128b
 80012d8:	080012e7 	.word	0x080012e7
 80012dc:	080012e1 	.word	0x080012e1
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80012e0:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80012e4:	d1d3      	bne.n	800128e <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012e6:	2340      	movs	r3, #64	; 0x40
 80012e8:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80012ea:	2001      	movs	r0, #1
 80012ec:	e7e5      	b.n	80012ba <HAL_DMA_Init+0xb6>
    switch (tmp)
 80012ee:	2a02      	cmp	r2, #2
 80012f0:	d9f9      	bls.n	80012e6 <HAL_DMA_Init+0xe2>
 80012f2:	2a03      	cmp	r2, #3
 80012f4:	e7c8      	b.n	8001288 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80012f6:	2001      	movs	r0, #1
 80012f8:	bd70      	pop	{r4, r5, r6, pc}
 80012fa:	bf00      	nop
 80012fc:	f010803f 	.word	0xf010803f

08001300 <HAL_DMA_DeInit>:
{
 8001300:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8001302:	4605      	mov	r5, r0
 8001304:	b1f0      	cbz	r0, 8001344 <HAL_DMA_DeInit+0x44>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001306:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800130a:	b2e4      	uxtb	r4, r4
 800130c:	2c02      	cmp	r4, #2
 800130e:	d017      	beq.n	8001340 <HAL_DMA_DeInit+0x40>
  __HAL_DMA_DISABLE(hdma);
 8001310:	6803      	ldr	r3, [r0, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	f022 0201 	bic.w	r2, r2, #1
 8001318:	601a      	str	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 800131a:	2400      	movs	r4, #0
  hdma->Instance->FCR  = 0x00000021U;
 800131c:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 800131e:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8001320:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8001322:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8001324:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8001326:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8001328:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800132a:	f7ff ff55 	bl	80011d8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800132e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001330:	233f      	movs	r3, #63	; 0x3f
 8001332:	4093      	lsls	r3, r2
 8001334:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001336:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8001338:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 800133c:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
    return HAL_BUSY;
 8001340:	4620      	mov	r0, r4
}
 8001342:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001344:	2001      	movs	r0, #1
 8001346:	bd38      	pop	{r3, r4, r5, pc}

08001348 <HAL_DMA_Start_IT>:
{
 8001348:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800134a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800134e:	2c01      	cmp	r4, #1
 8001350:	d036      	beq.n	80013c0 <HAL_DMA_Start_IT+0x78>
 8001352:	2401      	movs	r4, #1
 8001354:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001358:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800135c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 800135e:	2c01      	cmp	r4, #1
 8001360:	f04f 0500 	mov.w	r5, #0
 8001364:	f04f 0402 	mov.w	r4, #2
 8001368:	d128      	bne.n	80013bc <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 800136a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800136e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001370:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001372:	6825      	ldr	r5, [r4, #0]
 8001374:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001378:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800137a:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800137c:	6883      	ldr	r3, [r0, #8]
 800137e:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8001380:	bf0e      	itee	eq
 8001382:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8001384:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001386:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001388:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 800138a:	bf08      	it	eq
 800138c:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800138e:	233f      	movs	r3, #63	; 0x3f
 8001390:	4093      	lsls	r3, r2
 8001392:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001394:	6823      	ldr	r3, [r4, #0]
 8001396:	f043 0316 	orr.w	r3, r3, #22
 800139a:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800139c:	6963      	ldr	r3, [r4, #20]
 800139e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a2:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80013a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80013a6:	b11b      	cbz	r3, 80013b0 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	f043 0308 	orr.w	r3, r3, #8
 80013ae:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013b8:	2000      	movs	r0, #0
 80013ba:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80013bc:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80013c0:	2002      	movs	r0, #2
}
 80013c2:	bd70      	pop	{r4, r5, r6, pc}

080013c4 <HAL_DMA_Abort>:
{
 80013c4:	b570      	push	{r4, r5, r6, lr}
 80013c6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013c8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80013ca:	f7ff fe87 	bl	80010dc <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ce:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80013d2:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 80013d4:	4606      	mov	r6, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013d6:	d006      	beq.n	80013e6 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80013dc:	2300      	movs	r3, #0
 80013de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80013e2:	2001      	movs	r0, #1
 80013e4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013e6:	6823      	ldr	r3, [r4, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	f022 0216 	bic.w	r2, r2, #22
 80013ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013f0:	695a      	ldr	r2, [r3, #20]
 80013f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013f6:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80013fa:	b90a      	cbnz	r2, 8001400 <HAL_DMA_Abort+0x3c>
 80013fc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80013fe:	b11a      	cbz	r2, 8001408 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	f022 0208 	bic.w	r2, r2, #8
 8001406:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	f022 0201 	bic.w	r2, r2, #1
 800140e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001410:	6823      	ldr	r3, [r4, #0]
 8001412:	6818      	ldr	r0, [r3, #0]
 8001414:	f010 0001 	ands.w	r0, r0, #1
 8001418:	d109      	bne.n	800142e <HAL_DMA_Abort+0x6a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800141a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800141c:	233f      	movs	r3, #63	; 0x3f
 800141e:	4093      	lsls	r3, r2
 8001420:	60ab      	str	r3, [r5, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001422:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8001424:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8001428:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800142c:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800142e:	f7ff fe55 	bl	80010dc <HAL_GetTick>
 8001432:	1b80      	subs	r0, r0, r6
 8001434:	2805      	cmp	r0, #5
 8001436:	d9eb      	bls.n	8001410 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001438:	2320      	movs	r3, #32
 800143a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800143c:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 800143e:	2300      	movs	r3, #0
 8001440:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001444:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8001448:	bd70      	pop	{r4, r5, r6, pc}
	...

0800144c <HAL_DMA_IRQHandler>:
{
 800144c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001452:	4b5a      	ldr	r3, [pc, #360]	; (80015bc <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001454:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001456:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001458:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800145a:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800145c:	2208      	movs	r2, #8
 800145e:	409a      	lsls	r2, r3
 8001460:	4216      	tst	r6, r2
{
 8001462:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001464:	d00c      	beq.n	8001480 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001466:	6801      	ldr	r1, [r0, #0]
 8001468:	6808      	ldr	r0, [r1, #0]
 800146a:	0740      	lsls	r0, r0, #29
 800146c:	d508      	bpl.n	8001480 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800146e:	6808      	ldr	r0, [r1, #0]
 8001470:	f020 0004 	bic.w	r0, r0, #4
 8001474:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001476:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001478:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800147a:	f042 0201 	orr.w	r2, r2, #1
 800147e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001480:	4a4f      	ldr	r2, [pc, #316]	; (80015c0 <HAL_DMA_IRQHandler+0x174>)
 8001482:	409a      	lsls	r2, r3
 8001484:	4216      	tst	r6, r2
 8001486:	d008      	beq.n	800149a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001488:	6821      	ldr	r1, [r4, #0]
 800148a:	6949      	ldr	r1, [r1, #20]
 800148c:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800148e:	bf41      	itttt	mi
 8001490:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001492:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001494:	f042 0202 	orrmi.w	r2, r2, #2
 8001498:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800149a:	4a4a      	ldr	r2, [pc, #296]	; (80015c4 <HAL_DMA_IRQHandler+0x178>)
 800149c:	409a      	lsls	r2, r3
 800149e:	4216      	tst	r6, r2
 80014a0:	d008      	beq.n	80014b4 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014a2:	6821      	ldr	r1, [r4, #0]
 80014a4:	6809      	ldr	r1, [r1, #0]
 80014a6:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014a8:	bf41      	itttt	mi
 80014aa:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014ac:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80014ae:	f042 0204 	orrmi.w	r2, r2, #4
 80014b2:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014b4:	2210      	movs	r2, #16
 80014b6:	409a      	lsls	r2, r3
 80014b8:	4216      	tst	r6, r2
 80014ba:	d010      	beq.n	80014de <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014bc:	6823      	ldr	r3, [r4, #0]
 80014be:	6819      	ldr	r1, [r3, #0]
 80014c0:	0709      	lsls	r1, r1, #28
 80014c2:	d50c      	bpl.n	80014de <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014c4:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	0350      	lsls	r0, r2, #13
 80014ca:	d535      	bpl.n	8001538 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	0319      	lsls	r1, r3, #12
 80014d0:	d401      	bmi.n	80014d6 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80014d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014d4:	e000      	b.n	80014d8 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80014d8:	b10b      	cbz	r3, 80014de <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80014da:	4620      	mov	r0, r4
 80014dc:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014de:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80014e0:	2220      	movs	r2, #32
 80014e2:	408a      	lsls	r2, r1
 80014e4:	4216      	tst	r6, r2
 80014e6:	d038      	beq.n	800155a <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	6818      	ldr	r0, [r3, #0]
 80014ec:	06c6      	lsls	r6, r0, #27
 80014ee:	d534      	bpl.n	800155a <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014f0:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014f2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80014f6:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014f8:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014fa:	d125      	bne.n	8001548 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014fc:	f022 0216 	bic.w	r2, r2, #22
 8001500:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001502:	695a      	ldr	r2, [r3, #20]
 8001504:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001508:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800150a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800150c:	b90a      	cbnz	r2, 8001512 <HAL_DMA_IRQHandler+0xc6>
 800150e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001510:	b11a      	cbz	r2, 800151a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	f022 0208 	bic.w	r2, r2, #8
 8001518:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800151a:	233f      	movs	r3, #63	; 0x3f
 800151c:	408b      	lsls	r3, r1
 800151e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001520:	2300      	movs	r3, #0
 8001522:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001526:	2301      	movs	r3, #1
 8001528:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800152c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800152e:	b10b      	cbz	r3, 8001534 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001530:	4620      	mov	r0, r4
 8001532:	4798      	blx	r3
}
 8001534:	b003      	add	sp, #12
 8001536:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800153c:	bf5e      	ittt	pl
 800153e:	681a      	ldrpl	r2, [r3, #0]
 8001540:	f022 0208 	bicpl.w	r2, r2, #8
 8001544:	601a      	strpl	r2, [r3, #0]
 8001546:	e7c4      	b.n	80014d2 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001548:	0350      	lsls	r0, r2, #13
 800154a:	d528      	bpl.n	800159e <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	0319      	lsls	r1, r3, #12
 8001550:	d432      	bmi.n	80015b8 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8001552:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001554:	b10b      	cbz	r3, 800155a <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8001556:	4620      	mov	r0, r4
 8001558:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800155a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0e9      	beq.n	8001534 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001560:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001562:	07da      	lsls	r2, r3, #31
 8001564:	d519      	bpl.n	800159a <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001566:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001568:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800156a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800156e:	6813      	ldr	r3, [r2, #0]
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001576:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800157a:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 800157e:	9b01      	ldr	r3, [sp, #4]
 8001580:	3301      	adds	r3, #1
 8001582:	429f      	cmp	r7, r3
 8001584:	9301      	str	r3, [sp, #4]
 8001586:	d302      	bcc.n	800158e <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001588:	6813      	ldr	r3, [r2, #0]
 800158a:	07db      	lsls	r3, r3, #31
 800158c:	d4f7      	bmi.n	800157e <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 800158e:	2300      	movs	r3, #0
 8001590:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001594:	2301      	movs	r3, #1
 8001596:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800159a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800159c:	e7c7      	b.n	800152e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80015a4:	d108      	bne.n	80015b8 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015a6:	6819      	ldr	r1, [r3, #0]
 80015a8:	f021 0110 	bic.w	r1, r1, #16
 80015ac:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80015ae:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80015b0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80015b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80015b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015ba:	e7cb      	b.n	8001554 <HAL_DMA_IRQHandler+0x108>
 80015bc:	200000b0 	.word	0x200000b0
 80015c0:	00800001 	.word	0x00800001
 80015c4:	00800004 	.word	0x00800004

080015c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015cc:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ce:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d0:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8001770 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015d4:	4a64      	ldr	r2, [pc, #400]	; (8001768 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015d6:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 80015d8:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015dc:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015de:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80015e0:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e4:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 80015e8:	42b7      	cmp	r7, r6
 80015ea:	f040 80ad 	bne.w	8001748 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ee:	684c      	ldr	r4, [r1, #4]
 80015f0:	f024 0a10 	bic.w	sl, r4, #16
 80015f4:	f1ba 0f02 	cmp.w	sl, #2
 80015f8:	d116      	bne.n	8001628 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 80015fa:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80015fe:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001602:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001606:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800160a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800160e:	f04f 0e0f 	mov.w	lr, #15
 8001612:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001616:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800161a:	690d      	ldr	r5, [r1, #16]
 800161c:	fa05 f50b 	lsl.w	r5, r5, fp
 8001620:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001624:	f8cc 5020 	str.w	r5, [ip, #32]
 8001628:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800162c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800162e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001632:	fa05 f50c 	lsl.w	r5, r5, ip
 8001636:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001638:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800163c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001640:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001644:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001648:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800164c:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001650:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8001652:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001656:	d815      	bhi.n	8001684 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8001658:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800165c:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001660:	68cd      	ldr	r5, [r1, #12]
 8001662:	fa05 fa0c 	lsl.w	sl, r5, ip
 8001666:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 800166a:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 800166e:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001672:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001676:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 800167a:	fa0e fe03 	lsl.w	lr, lr, r3
 800167e:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8001682:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001684:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001686:	9d00      	ldr	r5, [sp, #0]
 8001688:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800168a:	688f      	ldr	r7, [r1, #8]
 800168c:	fa07 f70c 	lsl.w	r7, r7, ip
 8001690:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001692:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001694:	00e5      	lsls	r5, r4, #3
 8001696:	d557      	bpl.n	8001748 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001698:	f04f 0b00 	mov.w	fp, #0
 800169c:	f8cd b00c 	str.w	fp, [sp, #12]
 80016a0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016a4:	4d31      	ldr	r5, [pc, #196]	; (800176c <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a6:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80016aa:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80016ae:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80016b2:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80016b6:	9703      	str	r7, [sp, #12]
 80016b8:	9f03      	ldr	r7, [sp, #12]
 80016ba:	f023 0703 	bic.w	r7, r3, #3
 80016be:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80016c2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c6:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80016ca:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016ce:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80016d2:	f04f 0e0f 	mov.w	lr, #15
 80016d6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016da:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016dc:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016e0:	d039      	beq.n	8001756 <HAL_GPIO_Init+0x18e>
 80016e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016e6:	42a8      	cmp	r0, r5
 80016e8:	d037      	beq.n	800175a <HAL_GPIO_Init+0x192>
 80016ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016ee:	42a8      	cmp	r0, r5
 80016f0:	d035      	beq.n	800175e <HAL_GPIO_Init+0x196>
 80016f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016f6:	42a8      	cmp	r0, r5
 80016f8:	d033      	beq.n	8001762 <HAL_GPIO_Init+0x19a>
 80016fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016fe:	42a8      	cmp	r0, r5
 8001700:	bf14      	ite	ne
 8001702:	2507      	movne	r5, #7
 8001704:	2504      	moveq	r5, #4
 8001706:	fa05 f50c 	lsl.w	r5, r5, ip
 800170a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800170e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001710:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001712:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001714:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001718:	bf0c      	ite	eq
 800171a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800171c:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800171e:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001720:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001722:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001726:	bf0c      	ite	eq
 8001728:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800172a:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800172c:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800172e:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001730:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001734:	bf0c      	ite	eq
 8001736:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001738:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800173a:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800173c:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800173e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001740:	bf54      	ite	pl
 8001742:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001744:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001746:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001748:	3301      	adds	r3, #1
 800174a:	2b10      	cmp	r3, #16
 800174c:	f47f af47 	bne.w	80015de <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001750:	b005      	add	sp, #20
 8001752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001756:	465d      	mov	r5, fp
 8001758:	e7d5      	b.n	8001706 <HAL_GPIO_Init+0x13e>
 800175a:	2501      	movs	r5, #1
 800175c:	e7d3      	b.n	8001706 <HAL_GPIO_Init+0x13e>
 800175e:	2502      	movs	r5, #2
 8001760:	e7d1      	b.n	8001706 <HAL_GPIO_Init+0x13e>
 8001762:	2503      	movs	r5, #3
 8001764:	e7cf      	b.n	8001706 <HAL_GPIO_Init+0x13e>
 8001766:	bf00      	nop
 8001768:	40013c00 	.word	0x40013c00
 800176c:	40020000 	.word	0x40020000
 8001770:	40023800 	.word	0x40023800

08001774 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001774:	b10a      	cbz	r2, 800177a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001776:	6181      	str	r1, [r0, #24]
 8001778:	4770      	bx	lr
 800177a:	0409      	lsls	r1, r1, #16
 800177c:	e7fb      	b.n	8001776 <HAL_GPIO_WritePin+0x2>

0800177e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800177e:	6943      	ldr	r3, [r0, #20]
 8001780:	4059      	eors	r1, r3
 8001782:	6141      	str	r1, [r0, #20]
 8001784:	4770      	bx	lr
	...

08001788 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001788:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800178c:	6959      	ldr	r1, [r3, #20]
 800178e:	4201      	tst	r1, r0
 8001790:	d002      	beq.n	8001798 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001792:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001794:	f006 f9ca 	bl	8007b2c <HAL_GPIO_EXTI_Callback>
 8001798:	bd08      	pop	{r3, pc}
 800179a:	bf00      	nop
 800179c:	40013c00 	.word	0x40013c00

080017a0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80017a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80017a4:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd); 
 80017a6:	f890 0290 	ldrb.w	r0, [r0, #656]	; 0x290
{
 80017aa:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
 80017ae:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 80017b2:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd); 
 80017b6:	2801      	cmp	r0, #1
 80017b8:	d021      	beq.n	80017fe <HAL_HCD_HC_Init+0x5e>
 80017ba:	2001      	movs	r0, #1
 80017bc:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  
  hhcd->hc[ch_num].dev_addr = dev_address;
 80017c0:	2028      	movs	r0, #40	; 0x28
 80017c2:	fb00 4001 	mla	r0, r0, r1, r4
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 80017c6:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 80017ca:	09d5      	lsrs	r5, r2, #7
  hhcd->hc[ch_num].dev_addr = dev_address;
 80017cc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 80017d0:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 80017d4:	f880 703f 	strb.w	r7, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 80017d8:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 80017dc:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  hhcd->hc[ch_num].speed = speed;
 80017e0:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 80017e4:	f8a0 e040 	strh.w	lr, [r0, #64]	; 0x40
  
  status =  USB_HC_Init(hhcd->Instance, 
 80017e8:	e88d 40c0 	stmia.w	sp, {r6, r7, lr}
 80017ec:	6820      	ldr	r0, [r4, #0]
 80017ee:	f002 fbaf 	bl	8003f50 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd); 
 80017f2:	2300      	movs	r3, #0
 80017f4:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  
  return status;
}
 80017f8:	b004      	add	sp, #16
 80017fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hhcd); 
 80017fe:	2002      	movs	r0, #2
 8001800:	e7fa      	b.n	80017f8 <HAL_HCD_HC_Init+0x58>

08001802 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd);   
 8001802:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8001806:	2b01      	cmp	r3, #1
{
 8001808:	b510      	push	{r4, lr}
 800180a:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);   
 800180c:	d009      	beq.n	8001822 <HAL_HCD_HC_Halt+0x20>
 800180e:	2301      	movs	r3, #1
 8001810:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);   
 8001814:	6800      	ldr	r0, [r0, #0]
 8001816:	f002 fd54 	bl	80042c2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800181a:	2000      	movs	r0, #0
 800181c:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  
  return status;
 8001820:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);   
 8001822:	2002      	movs	r0, #2
}
 8001824:	bd10      	pop	{r4, pc}

08001826 <HAL_HCD_Init>:
{ 
 8001826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hhcd == NULL)
 800182a:	4607      	mov	r7, r0
{ 
 800182c:	b08a      	sub	sp, #40	; 0x28
  if(hhcd == NULL)
 800182e:	b3a0      	cbz	r0, 800189a <HAL_HCD_Init+0x74>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8001830:	2303      	movs	r3, #3
  __HAL_HCD_DISABLE(hhcd);
 8001832:	463c      	mov	r4, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 8001834:	f880 3291 	strb.w	r3, [r0, #657]	; 0x291
  HAL_HCD_MspInit(hhcd);
 8001838:	f006 ff18 	bl	800866c <HAL_HCD_MspInit>
  __HAL_HCD_DISABLE(hhcd);
 800183c:	f854 0b10 	ldr.w	r0, [r4], #16
 8001840:	f002 fa30 	bl	8003ca4 <USB_DisableGlobalInt>
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001846:	466d      	mov	r5, sp
 8001848:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800184a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800184c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800184e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001852:	e885 0003 	stmia.w	r5, {r0, r1}
 8001856:	f107 0804 	add.w	r8, r7, #4
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 800185a:	463e      	mov	r6, r7
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 800185c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001860:	6838      	ldr	r0, [r7, #0]
 8001862:	f002 f9df 	bl	8003c24 <USB_CoreInit>
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8001866:	f856 0b10 	ldr.w	r0, [r6], #16
 800186a:	2101      	movs	r1, #1
 800186c:	f002 fa20 	bl	8003cb0 <USB_SetCurrentMode>
  USB_HostInit(hhcd->Instance, hhcd->Init);
 8001870:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001872:	466d      	mov	r5, sp
 8001874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001876:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001878:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800187a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800187e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001882:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001886:	6838      	ldr	r0, [r7, #0]
 8001888:	f002 fa8e 	bl	8003da8 <USB_HostInit>
  hhcd->State= HAL_HCD_STATE_READY;
 800188c:	2301      	movs	r3, #1
 800188e:	f887 3291 	strb.w	r3, [r7, #657]	; 0x291
  return HAL_OK;
 8001892:	2000      	movs	r0, #0
}
 8001894:	b00a      	add	sp, #40	; 0x28
 8001896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800189a:	2001      	movs	r0, #1
 800189c:	e7fa      	b.n	8001894 <HAL_HCD_Init+0x6e>
	...

080018a0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,  
                                           uint8_t token, 
                                           uint8_t* pbuff, 
                                           uint16_t length,
                                           uint8_t do_ping) 
{
 80018a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  hhcd->hc[ch_num].ep_is_in = direction;
 80018a2:	2628      	movs	r6, #40	; 0x28
 80018a4:	fb06 0601 	mla	r6, r6, r1, r0
{
 80018a8:	f89d e014 	ldrb.w	lr, [sp, #20]
 80018ac:	9d06      	ldr	r5, [sp, #24]
 80018ae:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 80018b2:	f89d 7020 	ldrb.w	r7, [sp, #32]
  hhcd->hc[ch_num].ep_is_in = direction;
 80018b6:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type; 
 80018ba:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
  
  if(token == 0)
 80018be:	f1be 0f00 	cmp.w	lr, #0
 80018c2:	d10e      	bne.n	80018e2 <HAL_HCD_HC_SubmitRequest+0x42>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80018c4:	f04f 0e03 	mov.w	lr, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }
  
  /* Manage Data Toggle */
  switch(ep_type)
 80018c8:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80018ca:	f886 e042 	strb.w	lr, [r6, #66]	; 0x42
  switch(ep_type)
 80018ce:	d04a      	beq.n	8001966 <HAL_HCD_HC_SubmitRequest+0xc6>
 80018d0:	4573      	cmp	r3, lr
 80018d2:	d055      	beq.n	8001980 <HAL_HCD_HC_SubmitRequest+0xe0>
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d12f      	bne.n	8001938 <HAL_HCD_HC_SubmitRequest+0x98>
      }
    }
    break;
    
  case EP_TYPE_ISOC: 
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018d8:	2328      	movs	r3, #40	; 0x28
 80018da:	fb03 0301 	mla	r3, r3, r1, r0
 80018de:	2200      	movs	r2, #0
 80018e0:	e055      	b.n	800198e <HAL_HCD_HC_SubmitRequest+0xee>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018e2:	f04f 0c02 	mov.w	ip, #2
 80018e6:	f886 c042 	strb.w	ip, [r6, #66]	; 0x42
  switch(ep_type)
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d824      	bhi.n	8001938 <HAL_HCD_HC_SubmitRequest+0x98>
 80018ee:	a601      	add	r6, pc, #4	; (adr r6, 80018f4 <HAL_HCD_HC_SubmitRequest+0x54>)
 80018f0:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
 80018f4:	08001905 	.word	0x08001905
 80018f8:	080018d9 	.word	0x080018d9
 80018fc:	08001967 	.word	0x08001967
 8001900:	08001981 	.word	0x08001981
    if((token == 1) && (direction == 0)) /*send data */
 8001904:	f1be 0f01 	cmp.w	lr, #1
 8001908:	d116      	bne.n	8001938 <HAL_HCD_HC_SubmitRequest+0x98>
 800190a:	b9aa      	cbnz	r2, 8001938 <HAL_HCD_HC_SubmitRequest+0x98>
      if (length == 0)
 800190c:	b924      	cbnz	r4, 8001918 <HAL_HCD_HC_SubmitRequest+0x78>
        hhcd->hc[ch_num].toggle_out = 1;
 800190e:	2328      	movs	r3, #40	; 0x28
 8001910:	fb03 0301 	mla	r3, r3, r1, r0
 8001914:	f883 e051 	strb.w	lr, [r3, #81]	; 0x51
      if (hhcd->hc[ch_num].toggle_out == 0)
 8001918:	2328      	movs	r3, #40	; 0x28
 800191a:	fb03 0201 	mla	r2, r3, r1, r0
 800191e:	f892 6051 	ldrb.w	r6, [r2, #81]	; 0x51
 8001922:	b9f6      	cbnz	r6, 8001962 <HAL_HCD_HC_SubmitRequest+0xc2>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001924:	f882 6042 	strb.w	r6, [r2, #66]	; 0x42
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8001928:	fb03 0301 	mla	r3, r3, r1, r0
 800192c:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8001930:	2a02      	cmp	r2, #2
 8001932:	d001      	beq.n	8001938 <HAL_HCD_HC_SubmitRequest+0x98>
        hhcd->hc[ch_num].do_ping = do_ping;
 8001934:	f883 703d 	strb.w	r7, [r3, #61]	; 0x3d
    break;  
  }
  
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001938:	2628      	movs	r6, #40	; 0x28
 800193a:	fb06 0301 	mla	r3, r6, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 800193e:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0;
  hhcd->hc[ch_num].ch_num = ch_num;
 8001940:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
  
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8001944:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001946:	645d      	str	r5, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8001948:	649c      	str	r4, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 800194a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0;
 800194e:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8001950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8001954:	3138      	adds	r1, #56	; 0x38
 8001956:	7c02      	ldrb	r2, [r0, #16]
 8001958:	6800      	ldr	r0, [r0, #0]
}
 800195a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 800195e:	f002 bb63 	b.w	8004028 <USB_HC_StartXfer>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001962:	2602      	movs	r6, #2
 8001964:	e7de      	b.n	8001924 <HAL_HCD_HC_SubmitRequest+0x84>
 8001966:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8001968:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 800196c:	b992      	cbnz	r2, 8001994 <HAL_HCD_HC_SubmitRequest+0xf4>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 800196e:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 8001972:	b91e      	cbnz	r6, 800197c <HAL_HCD_HC_SubmitRequest+0xdc>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8001978:	2328      	movs	r3, #40	; 0x28
 800197a:	e7d5      	b.n	8001928 <HAL_HCD_HC_SubmitRequest+0x88>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800197c:	2202      	movs	r2, #2
 800197e:	e7f9      	b.n	8001974 <HAL_HCD_HC_SubmitRequest+0xd4>
 8001980:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8001982:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 8001986:	b92a      	cbnz	r2, 8001994 <HAL_HCD_HC_SubmitRequest+0xf4>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8001988:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 800198c:	b936      	cbnz	r6, 800199c <HAL_HCD_HC_SubmitRequest+0xfc>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800198e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    break;  
 8001992:	e7d1      	b.n	8001938 <HAL_HCD_HC_SubmitRequest+0x98>
      if( hhcd->hc[ch_num].toggle_in == 0)
 8001994:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001998:	2a00      	cmp	r2, #0
 800199a:	d0f8      	beq.n	800198e <HAL_HCD_HC_SubmitRequest+0xee>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800199c:	2202      	movs	r2, #2
 800199e:	e7f6      	b.n	800198e <HAL_HCD_HC_SubmitRequest+0xee>

080019a0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019a4:	6806      	ldr	r6, [r0, #0]
{
 80019a6:	b087      	sub	sp, #28
 80019a8:	4604      	mov	r4, r0
  uint32_t i = 0U , interrupt = 0U;
  
  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019aa:	4630      	mov	r0, r6
 80019ac:	f002 f9e0 	bl	8003d70 <USB_GetMode>
 80019b0:	2801      	cmp	r0, #1
 80019b2:	f040 80ec 	bne.w	8001b8e <HAL_HCD_IRQHandler+0x1ee>
  {
    /* Avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 80019b6:	6820      	ldr	r0, [r4, #0]
 80019b8:	f002 f9d6 	bl	8003d68 <USB_ReadInterrupts>
 80019bc:	2800      	cmp	r0, #0
 80019be:	f000 80e6 	beq.w	8001b8e <HAL_HCD_IRQHandler+0x1ee>
    {
      return;
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019c2:	6820      	ldr	r0, [r4, #0]
 80019c4:	f002 f9d0 	bl	8003d68 <USB_ReadInterrupts>
 80019c8:	0281      	lsls	r1, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019ca:	bf48      	it	mi
 80019cc:	6823      	ldrmi	r3, [r4, #0]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019ce:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019d0:	bf44      	itt	mi
 80019d2:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 80019d6:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019d8:	f002 f9c6 	bl	8003d68 <USB_ReadInterrupts>
 80019dc:	02c2      	lsls	r2, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019de:	bf48      	it	mi
 80019e0:	6823      	ldrmi	r3, [r4, #0]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019e2:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019e4:	bf44      	itt	mi
 80019e6:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 80019ea:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019ec:	f002 f9bc 	bl	8003d68 <USB_ReadInterrupts>
 80019f0:	0143      	lsls	r3, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019f2:	bf48      	it	mi
 80019f4:	6823      	ldrmi	r3, [r4, #0]
    }   
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019f6:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019f8:	bf44      	itt	mi
 80019fa:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 80019fe:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a00:	f002 f9b2 	bl	8003d68 <USB_ReadInterrupts>
 8001a04:	0787      	lsls	r7, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a06:	bf48      	it	mi
 8001a08:	6823      	ldrmi	r3, [r4, #0]
    }     
    
    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a0a:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a0c:	bf44      	itt	mi
 8001a0e:	2202      	movmi	r2, #2
 8001a10:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a12:	f002 f9a9 	bl	8003d68 <USB_ReadInterrupts>
 8001a16:	0085      	lsls	r5, r0, #2
 8001a18:	d510      	bpl.n	8001a3c <HAL_HCD_IRQHandler+0x9c>
    {
      
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001a1a:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8001a1e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001a22:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 8001a26:	4620      	mov	r0, r4
 8001a28:	f006 fe8e 	bl	8008748 <HAL_HCD_Disconnect_Callback>
      USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	6820      	ldr	r0, [r4, #0]
 8001a30:	f002 fa2c 	bl	8003e8c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a34:	6823      	ldr	r3, [r4, #0]
 8001a36:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a3a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a3c:	6820      	ldr	r0, [r4, #0]
 8001a3e:	f002 f993 	bl	8003d68 <USB_ReadInterrupts>
 8001a42:	01c0      	lsls	r0, r0, #7
 8001a44:	d540      	bpl.n	8001ac8 <HAL_HCD_IRQHandler+0x128>
  * @param  hhcd: HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8001a46:	6825      	ldr	r5, [r4, #0]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001a48:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001a4c:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8001a4e:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001a52:	9305      	str	r3, [sp, #20]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001a54:	9b05      	ldr	r3, [sp, #20]
 8001a56:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001a5a:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect Detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001a5c:	9b04      	ldr	r3, [sp, #16]
 8001a5e:	0799      	lsls	r1, r3, #30
 8001a60:	d50d      	bpl.n	8001a7e <HAL_HCD_IRQHandler+0xde>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001a62:	9b04      	ldr	r3, [sp, #16]
 8001a64:	07da      	lsls	r2, r3, #31
 8001a66:	d506      	bpl.n	8001a76 <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001a68:	69ab      	ldr	r3, [r5, #24]
 8001a6a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001a6e:	61ab      	str	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8001a70:	4620      	mov	r0, r4
 8001a72:	f006 fe65 	bl	8008740 <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8001a76:	9b05      	ldr	r3, [sp, #20]
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	9305      	str	r3, [sp, #20]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001a7e:	9b04      	ldr	r3, [sp, #16]
 8001a80:	071b      	lsls	r3, r3, #28
 8001a82:	d517      	bpl.n	8001ab4 <HAL_HCD_IRQHandler+0x114>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001a84:	9b05      	ldr	r3, [sp, #20]
 8001a86:	f043 0308 	orr.w	r3, r3, #8
 8001a8a:	9305      	str	r3, [sp, #20]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001a8c:	9b04      	ldr	r3, [sp, #16]
 8001a8e:	075f      	lsls	r7, r3, #29
 8001a90:	f140 8088 	bpl.w	8001ba4 <HAL_HCD_IRQHandler+0x204>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001a94:	69a1      	ldr	r1, [r4, #24]
 8001a96:	2902      	cmp	r1, #2
 8001a98:	d17c      	bne.n	8001b94 <HAL_HCD_IRQHandler+0x1f4>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8001a9a:	9b04      	ldr	r3, [sp, #16]
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8001a9c:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8001a9e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001aa2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8001aa6:	bf18      	it	ne
 8001aa8:	2101      	movne	r1, #1
 8001aaa:	f002 f9ef 	bl	8003e8c <USB_InitFSLSPClkSel>
        {
          USBx_HOST->HFIR = 60000U;
        }
      }
      
      HAL_HCD_Connect_Callback(hhcd);
 8001aae:	4620      	mov	r0, r4
 8001ab0:	f006 fe46 	bl	8008740 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
    }    
  }
  
  /* Check for an over current */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001ab4:	9b04      	ldr	r3, [sp, #16]
 8001ab6:	0698      	lsls	r0, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001ab8:	bf42      	ittt	mi
 8001aba:	9b05      	ldrmi	r3, [sp, #20]
 8001abc:	f043 0320 	orrmi.w	r3, r3, #32
 8001ac0:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001ac2:	9b05      	ldr	r3, [sp, #20]
 8001ac4:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001ac8:	6820      	ldr	r0, [r4, #0]
 8001aca:	f002 f94d 	bl	8003d68 <USB_ReadInterrupts>
 8001ace:	0701      	lsls	r1, r0, #28
 8001ad0:	d505      	bpl.n	8001ade <HAL_HCD_IRQHandler+0x13e>
      HAL_HCD_SOF_Callback(hhcd);
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f006 fe30 	bl	8008738 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	2208      	movs	r2, #8
 8001adc:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ade:	6820      	ldr	r0, [r4, #0]
 8001ae0:	f002 f942 	bl	8003d68 <USB_ReadInterrupts>
 8001ae4:	0182      	lsls	r2, r0, #6
 8001ae6:	d514      	bpl.n	8001b12 <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ae8:	6820      	ldr	r0, [r4, #0]
 8001aea:	f002 fbdb 	bl	80042a4 <USB_HC_ReadInterrupt>
 8001aee:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 8001af2:	9002      	str	r0, [sp, #8]
 8001af4:	9301      	str	r3, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001af6:	f04f 0b00 	mov.w	fp, #0
        if (interrupt & (1U << i))
 8001afa:	f04f 0a01 	mov.w	sl, #1
    if(hhcd->hc[chnum].state == HC_XFRC)
 8001afe:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001b00:	f04f 0902 	mov.w	r9, #2
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b04:	68a3      	ldr	r3, [r4, #8]
 8001b06:	459b      	cmp	fp, r3
 8001b08:	d358      	bcc.n	8001bbc <HAL_HCD_IRQHandler+0x21c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b0a:	6823      	ldr	r3, [r4, #0]
 8001b0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b10:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 8001b12:	6820      	ldr	r0, [r4, #0]
 8001b14:	f002 f928 	bl	8003d68 <USB_ReadInterrupts>
 8001b18:	06c3      	lsls	r3, r0, #27
 8001b1a:	d538      	bpl.n	8001b8e <HAL_HCD_IRQHandler+0x1ee>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b1c:	6825      	ldr	r5, [r4, #0]
 8001b1e:	69ab      	ldr	r3, [r5, #24]
 8001b20:	f023 0310 	bic.w	r3, r3, #16
 8001b24:	61ab      	str	r3, [r5, #24]
  temp = hhcd->Instance->GRXSTSP;
 8001b26:	6a2f      	ldr	r7, [r5, #32]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17U;
 8001b28:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d129      	bne.n	8001b84 <HAL_HCD_IRQHandler+0x1e4>
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4U;
 8001b30:	f3c7 180a 	ubfx	r8, r7, #4, #11
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8001b34:	f1b8 0f00 	cmp.w	r8, #0
 8001b38:	d024      	beq.n	8001b84 <HAL_HCD_IRQHandler+0x1e4>
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 8001b3a:	f007 070f 	and.w	r7, r7, #15
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8001b3e:	2628      	movs	r6, #40	; 0x28
 8001b40:	fb06 4607 	mla	r6, r6, r7, r4
 8001b44:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8001b46:	b1e9      	cbz	r1, 8001b84 <HAL_HCD_IRQHandler+0x1e4>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 8001b48:	4642      	mov	r2, r8
 8001b4a:	4628      	mov	r0, r5
 8001b4c:	f002 f8fe 	bl	8003d4c <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 8001b50:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8001b52:	4443      	add	r3, r8
 8001b54:	6473      	str	r3, [r6, #68]	; 0x44
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8001b56:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8001b5a:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8001b5c:	eb05 1547 	add.w	r5, r5, r7, lsl #5
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8001b60:	4443      	add	r3, r8
 8001b62:	64f3      	str	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8001b64:	692a      	ldr	r2, [r5, #16]
 8001b66:	4bb7      	ldr	r3, [pc, #732]	; (8001e44 <HAL_HCD_IRQHandler+0x4a4>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	b15b      	cbz	r3, 8001b84 <HAL_HCD_IRQHandler+0x1e4>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8001b6c:	682b      	ldr	r3, [r5, #0]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001b6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8001b76:	602b      	str	r3, [r5, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 8001b78:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8001b7c:	f083 0301 	eor.w	r3, r3, #1
 8001b80:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b84:	6822      	ldr	r2, [r4, #0]
 8001b86:	6993      	ldr	r3, [r2, #24]
 8001b88:	f043 0310 	orr.w	r3, r3, #16
 8001b8c:	6193      	str	r3, [r2, #24]
}
 8001b8e:	b007      	add	sp, #28
 8001b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8001b94:	68e3      	ldr	r3, [r4, #12]
 8001b96:	2b03      	cmp	r3, #3
          USBx_HOST->HFIR = 60000U;
 8001b98:	bf04      	itt	eq
 8001b9a:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8001b9e:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 8001ba2:	e784      	b.n	8001aae <HAL_HCD_IRQHandler+0x10e>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001ba4:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8001ba8:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001baa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001bae:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8001bb2:	6993      	ldr	r3, [r2, #24]
 8001bb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001bb8:	6193      	str	r3, [r2, #24]
 8001bba:	e77b      	b.n	8001ab4 <HAL_HCD_IRQHandler+0x114>
        if (interrupt & (1U << i))
 8001bbc:	9a02      	ldr	r2, [sp, #8]
 8001bbe:	fa0a f30b 	lsl.w	r3, sl, fp
 8001bc2:	4213      	tst	r3, r2
 8001bc4:	f000 8086 	beq.w	8001cd4 <HAL_HCD_IRQHandler+0x334>
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 8001bc8:	9b01      	ldr	r3, [sp, #4]
 8001bca:	6820      	ldr	r0, [r4, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001bd2:	fa5f f58b 	uxtb.w	r5, fp
 8001bd6:	f000 810a 	beq.w	8001dee <HAL_HCD_IRQHandler+0x44e>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8001bda:	016a      	lsls	r2, r5, #5
 8001bdc:	f500 68a0 	add.w	r8, r0, #1280	; 0x500
 8001be0:	eb02 0608 	add.w	r6, r2, r8
 8001be4:	68b1      	ldr	r1, [r6, #8]
 8001be6:	074b      	lsls	r3, r1, #29
 8001be8:	d513      	bpl.n	8001c12 <HAL_HCD_IRQHandler+0x272>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001bea:	2104      	movs	r1, #4
 8001bec:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001bee:	68f1      	ldr	r1, [r6, #12]
 8001bf0:	f041 0102 	orr.w	r1, r1, #2
 8001bf4:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8001bf6:	68b1      	ldr	r1, [r6, #8]
 8001bf8:	058b      	lsls	r3, r1, #22
 8001bfa:	d53d      	bpl.n	8001c78 <HAL_HCD_IRQHandler+0x2d8>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001bfc:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001bfe:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001c06:	4629      	mov	r1, r5
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001c08:	f002 fb5b 	bl	80042c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c10:	e12b      	b.n	8001e6a <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8001c12:	68b1      	ldr	r1, [r6, #8]
 8001c14:	0689      	lsls	r1, r1, #26
 8001c16:	d502      	bpl.n	8001c1e <HAL_HCD_IRQHandler+0x27e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001c18:	2120      	movs	r1, #32
 8001c1a:	60b1      	str	r1, [r6, #8]
 8001c1c:	e7eb      	b.n	8001bf6 <HAL_HCD_IRQHandler+0x256>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8001c1e:	68b1      	ldr	r1, [r6, #8]
 8001c20:	070b      	lsls	r3, r1, #28
 8001c22:	d513      	bpl.n	8001c4c <HAL_HCD_IRQHandler+0x2ac>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001c24:	68f1      	ldr	r1, [r6, #12]
 8001c26:	9203      	str	r2, [sp, #12]
 8001c28:	f041 0102 	orr.w	r1, r1, #2
 8001c2c:	60f1      	str	r1, [r6, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8001c2e:	fb07 4105 	mla	r1, r7, r5, r4
 8001c32:	f04f 0e05 	mov.w	lr, #5
 8001c36:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001c3a:	2110      	movs	r1, #16
 8001c3c:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 8001c3e:	2108      	movs	r1, #8
 8001c40:	60b1      	str	r1, [r6, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 8001c42:	4629      	mov	r1, r5
 8001c44:	f002 fb3d 	bl	80042c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001c48:	9a03      	ldr	r2, [sp, #12]
 8001c4a:	e7d4      	b.n	8001bf6 <HAL_HCD_IRQHandler+0x256>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8001c4c:	68b1      	ldr	r1, [r6, #8]
 8001c4e:	0549      	lsls	r1, r1, #21
 8001c50:	d5d1      	bpl.n	8001bf6 <HAL_HCD_IRQHandler+0x256>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001c52:	68f1      	ldr	r1, [r6, #12]
 8001c54:	9203      	str	r2, [sp, #12]
 8001c56:	f041 0102 	orr.w	r1, r1, #2
 8001c5a:	60f1      	str	r1, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	f002 fb30 	bl	80042c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 8001c62:	2110      	movs	r1, #16
 8001c64:	60b1      	str	r1, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001c66:	fb07 4105 	mla	r1, r7, r5, r4
 8001c6a:	2008      	movs	r0, #8
 8001c6c:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c74:	60b1      	str	r1, [r6, #8]
 8001c76:	e7e7      	b.n	8001c48 <HAL_HCD_IRQHandler+0x2a8>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8001c78:	68b1      	ldr	r1, [r6, #8]
 8001c7a:	07c8      	lsls	r0, r1, #31
 8001c7c:	d540      	bpl.n	8001d00 <HAL_HCD_IRQHandler+0x360>
    if (hhcd->Init.dma_enable)
 8001c7e:	6921      	ldr	r1, [r4, #16]
 8001c80:	b149      	cbz	r1, 8001c96 <HAL_HCD_IRQHandler+0x2f6>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8001c82:	fb07 4e05 	mla	lr, r7, r5, r4
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001c86:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8001c88:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001c8c:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8001c90:	1a09      	subs	r1, r1, r0
 8001c92:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[chnum].state = HC_XFRC;
 8001c96:	fb07 4105 	mla	r1, r7, r5, r4
    hhcd->hc[chnum].ErrCnt = 0U;
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	6588      	str	r0, [r1, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XFRC;
 8001c9e:	f881 a05d 	strb.w	sl, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001ca2:	f8c6 a008 	str.w	sl, [r6, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001ca6:	f891 003f 	ldrb.w	r0, [r1, #63]	; 0x3f
 8001caa:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 8001cae:	d117      	bne.n	8001ce0 <HAL_HCD_IRQHandler+0x340>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001cb0:	68f3      	ldr	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8001cb2:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001cb4:	f043 0302 	orr.w	r3, r3, #2
 8001cb8:	60f3      	str	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8001cba:	4629      	mov	r1, r5
 8001cbc:	f002 fb01 	bl	80042c2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001cc0:	2310      	movs	r3, #16
 8001cc2:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].toggle_in ^= 1U;
 8001cc4:	fb07 4505 	mla	r5, r7, r5, r4
 8001cc8:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8001ccc:	f083 0301 	eor.w	r3, r3, #1
 8001cd0:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
 8001cd4:	9b01      	ldr	r3, [sp, #4]
 8001cd6:	3320      	adds	r3, #32
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cd8:	f10b 0b01 	add.w	fp, fp, #1
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	e711      	b.n	8001b04 <HAL_HCD_IRQHandler+0x164>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001ce0:	2803      	cmp	r0, #3
 8001ce2:	d1ef      	bne.n	8001cc4 <HAL_HCD_IRQHandler+0x324>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001ce4:	f852 0008 	ldr.w	r0, [r2, r8]
 8001ce8:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8001cec:	f842 0008 	str.w	r0, [r2, r8]
      hhcd->hc[chnum].urb_state = URB_DONE; 
 8001cf0:	f881 a05c 	strb.w	sl, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	4629      	mov	r1, r5
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	f006 fd29 	bl	8008750 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001cfe:	e7e1      	b.n	8001cc4 <HAL_HCD_IRQHandler+0x324>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8001d00:	68b1      	ldr	r1, [r6, #8]
 8001d02:	0789      	lsls	r1, r1, #30
 8001d04:	d535      	bpl.n	8001d72 <HAL_HCD_IRQHandler+0x3d2>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8001d06:	68f1      	ldr	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8001d08:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8001d0c:	f021 0102 	bic.w	r1, r1, #2
 8001d10:	60f1      	str	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8001d12:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8001d16:	2901      	cmp	r1, #1
 8001d18:	d10c      	bne.n	8001d34 <HAL_HCD_IRQHandler+0x394>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8001d1a:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8001d1e:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001d22:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 8001d26:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8001d2a:	4629      	mov	r1, r5
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	f006 fd0f 	bl	8008750 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001d32:	e7cf      	b.n	8001cd4 <HAL_HCD_IRQHandler+0x334>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8001d34:	2905      	cmp	r1, #5
 8001d36:	d0f0      	beq.n	8001d1a <HAL_HCD_IRQHandler+0x37a>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001d38:	2906      	cmp	r1, #6
 8001d3a:	d001      	beq.n	8001d40 <HAL_HCD_IRQHandler+0x3a0>
 8001d3c:	2908      	cmp	r1, #8
 8001d3e:	d1ee      	bne.n	8001d1e <HAL_HCD_IRQHandler+0x37e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8001d40:	fb07 4105 	mla	r1, r7, r5, r4
 8001d44:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8001d46:	2803      	cmp	r0, #3
 8001d48:	f100 0301 	add.w	r3, r0, #1
        hhcd->hc[chnum].ErrCnt = 0U;
 8001d4c:	bf88      	it	hi
 8001d4e:	2000      	movhi	r0, #0
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8001d50:	658b      	str	r3, [r1, #88]	; 0x58
        hhcd->hc[chnum].ErrCnt = 0U;
 8001d52:	bf83      	ittte	hi
 8001d54:	6588      	strhi	r0, [r1, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001d56:	2004      	movhi	r0, #4
 8001d58:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001d5c:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8001d60:	f852 1008 	ldr.w	r1, [r2, r8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d64:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d68:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8001d6c:	f842 1008 	str.w	r1, [r2, r8]
 8001d70:	e7d5      	b.n	8001d1e <HAL_HCD_IRQHandler+0x37e>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8001d72:	68b1      	ldr	r1, [r6, #8]
 8001d74:	060b      	lsls	r3, r1, #24
 8001d76:	d511      	bpl.n	8001d9c <HAL_HCD_IRQHandler+0x3fc>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001d78:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);     
 8001d7a:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	60f3      	str	r3, [r6, #12]
    hhcd->hc[chnum].ErrCnt++;
 8001d82:	fb07 4305 	mla	r3, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);     
 8001d86:	4629      	mov	r1, r5
    hhcd->hc[chnum].ErrCnt++;
 8001d88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d8a:	3201      	adds	r2, #1
 8001d8c:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XACTERR;
 8001d8e:	2206      	movs	r2, #6
 8001d90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    USB_HC_Halt(hhcd->Instance, chnum);     
 8001d94:	f002 fa95 	bl	80042c2 <USB_HC_Halt>
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	e066      	b.n	8001e6a <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8001d9c:	68b1      	ldr	r1, [r6, #8]
 8001d9e:	06c8      	lsls	r0, r1, #27
 8001da0:	d598      	bpl.n	8001cd4 <HAL_HCD_IRQHandler+0x334>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001da2:	fb07 4105 	mla	r1, r7, r5, r4
 8001da6:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 8001daa:	2903      	cmp	r1, #3
 8001dac:	d109      	bne.n	8001dc2 <HAL_HCD_IRQHandler+0x422>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001dae:	68f1      	ldr	r1, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8001db0:	6820      	ldr	r0, [r4, #0]
 8001db2:	9203      	str	r2, [sp, #12]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001db4:	f041 0102 	orr.w	r1, r1, #2
 8001db8:	60f1      	str	r1, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8001dba:	4629      	mov	r1, r5
 8001dbc:	f002 fa81 	bl	80042c2 <USB_HC_Halt>
 8001dc0:	9a03      	ldr	r2, [sp, #12]
    hhcd->hc[chnum].state = HC_NAK;
 8001dc2:	fb07 4505 	mla	r5, r7, r5, r4
 8001dc6:	2103      	movs	r1, #3
 8001dc8:	f885 105d 	strb.w	r1, [r5, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001dcc:	2110      	movs	r1, #16
 8001dce:	60b1      	str	r1, [r6, #8]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001dd0:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
 8001dd4:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8001dd8:	f47f af7c 	bne.w	8001cd4 <HAL_HCD_IRQHandler+0x334>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8001ddc:	f852 1008 	ldr.w	r1, [r2, r8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001de0:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001de4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8001de8:	f842 1008 	str.w	r1, [r2, r8]
 8001dec:	e772      	b.n	8001cd4 <HAL_HCD_IRQHandler+0x334>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8001dee:	f500 66a0 	add.w	r6, r0, #1280	; 0x500
 8001df2:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 8001df6:	68b3      	ldr	r3, [r6, #8]
 8001df8:	0759      	lsls	r1, r3, #29
 8001dfa:	d506      	bpl.n	8001e0a <HAL_HCD_IRQHandler+0x46a>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001e00:	68f3      	ldr	r3, [r6, #12]
 8001e02:	f043 0302 	orr.w	r3, r3, #2
 8001e06:	60f3      	str	r3, [r6, #12]
 8001e08:	e764      	b.n	8001cd4 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8001e0a:	68b3      	ldr	r3, [r6, #8]
 8001e0c:	f013 0320 	ands.w	r3, r3, #32
 8001e10:	d01a      	beq.n	8001e48 <HAL_HCD_IRQHandler+0x4a8>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001e12:	2320      	movs	r3, #32
 8001e14:	60b3      	str	r3, [r6, #8]
    if( hhcd->hc[chnum].do_ping == 1U)
 8001e16:	fb07 4305 	mla	r3, r7, r5, r4
 8001e1a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8001e1e:	2a01      	cmp	r2, #1
 8001e20:	f47f af58 	bne.w	8001cd4 <HAL_HCD_IRQHandler+0x334>
      hhcd->hc[chnum].state = HC_NYET;     
 8001e24:	2204      	movs	r2, #4
 8001e26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001e2a:	68f2      	ldr	r2, [r6, #12]
      hhcd->hc[chnum].state = HC_NYET;     
 8001e2c:	9303      	str	r3, [sp, #12]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001e2e:	f042 0202 	orr.w	r2, r2, #2
 8001e32:	60f2      	str	r2, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8001e34:	4629      	mov	r1, r5
 8001e36:	f002 fa44 	bl	80042c2 <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8001e3a:	9b03      	ldr	r3, [sp, #12]
 8001e3c:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 8001e40:	e748      	b.n	8001cd4 <HAL_HCD_IRQHandler+0x334>
 8001e42:	bf00      	nop
 8001e44:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 8001e48:	68b2      	ldr	r2, [r6, #8]
 8001e4a:	0652      	lsls	r2, r2, #25
 8001e4c:	d50f      	bpl.n	8001e6e <HAL_HCD_IRQHandler+0x4ce>
    hhcd->hc[chnum].state = HC_NYET;
 8001e4e:	fb07 4205 	mla	r2, r7, r5, r4
 8001e52:	2104      	movs	r1, #4
    hhcd->hc[chnum].ErrCnt= 0U;    
 8001e54:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001e56:	68f3      	ldr	r3, [r6, #12]
    hhcd->hc[chnum].state = HC_NYET;
 8001e58:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001e62:	4629      	mov	r1, r5
 8001e64:	f002 fa2d 	bl	80042c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001e68:	2340      	movs	r3, #64	; 0x40
 8001e6a:	60b3      	str	r3, [r6, #8]
 8001e6c:	e732      	b.n	8001cd4 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8001e6e:	68b2      	ldr	r2, [r6, #8]
 8001e70:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8001e74:	d005      	beq.n	8001e82 <HAL_HCD_IRQHandler+0x4e2>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001e76:	68f3      	ldr	r3, [r6, #12]
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001e7e:	4629      	mov	r1, r5
 8001e80:	e6c2      	b.n	8001c08 <HAL_HCD_IRQHandler+0x268>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8001e82:	68b3      	ldr	r3, [r6, #8]
 8001e84:	07d9      	lsls	r1, r3, #31
 8001e86:	d510      	bpl.n	8001eaa <HAL_HCD_IRQHandler+0x50a>
      hhcd->hc[chnum].ErrCnt = 0U;  
 8001e88:	fb07 4305 	mla	r3, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001e8c:	4629      	mov	r1, r5
      hhcd->hc[chnum].ErrCnt = 0U;  
 8001e8e:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001e90:	68f2      	ldr	r2, [r6, #12]
      hhcd->hc[chnum].ErrCnt = 0U;  
 8001e92:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001e94:	f042 0202 	orr.w	r2, r2, #2
 8001e98:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001e9a:	f002 fa12 	bl	80042c2 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XFRC;
 8001e9e:	9b03      	ldr	r3, [sp, #12]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001ea0:	f8c6 a008 	str.w	sl, [r6, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8001ea4:	f883 a05d 	strb.w	sl, [r3, #93]	; 0x5d
 8001ea8:	e714      	b.n	8001cd4 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8001eaa:	68b3      	ldr	r3, [r6, #8]
 8001eac:	071a      	lsls	r2, r3, #28
 8001eae:	d50e      	bpl.n	8001ece <HAL_HCD_IRQHandler+0x52e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 8001eb0:	2308      	movs	r3, #8
 8001eb2:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001eb4:	68f3      	ldr	r3, [r6, #12]
 8001eb6:	f043 0302 	orr.w	r3, r3, #2
 8001eba:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	f002 fa00 	bl	80042c2 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 8001ec2:	fb07 4505 	mla	r5, r7, r5, r4
 8001ec6:	2305      	movs	r3, #5
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001ec8:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8001ecc:	e702      	b.n	8001cd4 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8001ece:	68b3      	ldr	r3, [r6, #8]
 8001ed0:	06db      	lsls	r3, r3, #27
 8001ed2:	d511      	bpl.n	8001ef8 <HAL_HCD_IRQHandler+0x558>
    hhcd->hc[chnum].ErrCnt = 0U;  
 8001ed4:	fb07 4305 	mla	r3, r7, r5, r4
 8001ed8:	2200      	movs	r2, #0
 8001eda:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001edc:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[chnum].ErrCnt = 0U;  
 8001ede:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001ee0:	f042 0202 	orr.w	r2, r2, #2
 8001ee4:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	f002 f9eb 	bl	80042c2 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8001eec:	9b03      	ldr	r3, [sp, #12]
 8001eee:	2203      	movs	r2, #3
 8001ef0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001ef4:	2310      	movs	r3, #16
 8001ef6:	e7b8      	b.n	8001e6a <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8001ef8:	68b3      	ldr	r3, [r6, #8]
 8001efa:	0619      	lsls	r1, r3, #24
 8001efc:	d50c      	bpl.n	8001f18 <HAL_HCD_IRQHandler+0x578>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001efe:	68f3      	ldr	r3, [r6, #12]
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001f06:	4629      	mov	r1, r5
    hhcd->hc[chnum].state = HC_XACTERR;  
 8001f08:	fb07 4505 	mla	r5, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001f0c:	f002 f9d9 	bl	80042c2 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 8001f10:	2306      	movs	r3, #6
 8001f12:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8001f16:	e73f      	b.n	8001d98 <HAL_HCD_IRQHandler+0x3f8>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8001f18:	68b1      	ldr	r1, [r6, #8]
 8001f1a:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8001f1e:	d00f      	beq.n	8001f40 <HAL_HCD_IRQHandler+0x5a0>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001f20:	68f3      	ldr	r3, [r6, #12]
 8001f22:	f043 0302 	orr.w	r3, r3, #2
 8001f26:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001f28:	4629      	mov	r1, r5
 8001f2a:	f002 f9ca 	bl	80042c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001f2e:	2310      	movs	r3, #16
 8001f30:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 8001f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f36:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001f38:	fb07 4505 	mla	r5, r7, r5, r4
 8001f3c:	2308      	movs	r3, #8
 8001f3e:	e7c3      	b.n	8001ec8 <HAL_HCD_IRQHandler+0x528>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8001f40:	68b3      	ldr	r3, [r6, #8]
 8001f42:	079a      	lsls	r2, r3, #30
 8001f44:	f57f aec6 	bpl.w	8001cd4 <HAL_HCD_IRQHandler+0x334>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8001f48:	68f3      	ldr	r3, [r6, #12]
 8001f4a:	f023 0302 	bic.w	r3, r3, #2
 8001f4e:	60f3      	str	r3, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8001f50:	fb07 4305 	mla	r3, r7, r5, r4
 8001f54:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8001f58:	2a01      	cmp	r2, #1
 8001f5a:	d10d      	bne.n	8001f78 <HAL_HCD_IRQHandler+0x5d8>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 8001f5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 8001f60:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8001f64:	2a02      	cmp	r2, #2
 8001f66:	f47f aeda 	bne.w	8001d1e <HAL_HCD_IRQHandler+0x37e>
        hhcd->hc[chnum].toggle_out ^= 1U; 
 8001f6a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8001f6e:	f082 0201 	eor.w	r2, r2, #1
 8001f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8001f76:	e6d2      	b.n	8001d1e <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 8001f78:	2a03      	cmp	r2, #3
 8001f7a:	d102      	bne.n	8001f82 <HAL_HCD_IRQHandler+0x5e2>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001f7c:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 8001f80:	e6cd      	b.n	8001d1e <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 8001f82:	2a04      	cmp	r2, #4
 8001f84:	d104      	bne.n	8001f90 <HAL_HCD_IRQHandler+0x5f0>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8001f86:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      hhcd->hc[chnum].do_ping = 0U;
 8001f8a:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
 8001f8e:	e6c6      	b.n	8001d1e <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8001f90:	2a05      	cmp	r2, #5
 8001f92:	d102      	bne.n	8001f9a <HAL_HCD_IRQHandler+0x5fa>
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001f94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001f98:	e6c1      	b.n	8001d1e <HAL_HCD_IRQHandler+0x37e>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001f9a:	2a06      	cmp	r2, #6
 8001f9c:	d002      	beq.n	8001fa4 <HAL_HCD_IRQHandler+0x604>
 8001f9e:	2a08      	cmp	r2, #8
 8001fa0:	f47f aebd 	bne.w	8001d1e <HAL_HCD_IRQHandler+0x37e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8001fa4:	fb07 4305 	mla	r3, r7, r5, r4
 8001fa8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001faa:	1c51      	adds	r1, r2, #1
 8001fac:	2a03      	cmp	r2, #3
 8001fae:	6599      	str	r1, [r3, #88]	; 0x58
 8001fb0:	d9e4      	bls.n	8001f7c <HAL_HCD_IRQHandler+0x5dc>
        hhcd->hc[chnum].ErrCnt = 0U;
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	659a      	str	r2, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001fb6:	2204      	movs	r2, #4
 8001fb8:	e7ec      	b.n	8001f94 <HAL_HCD_IRQHandler+0x5f4>
 8001fba:	bf00      	nop

08001fbc <HAL_HCD_Start>:
{ 
 8001fbc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd); 
 8001fbe:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8001fc2:	2b01      	cmp	r3, #1
{ 
 8001fc4:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 8001fc6:	d00d      	beq.n	8001fe4 <HAL_HCD_Start+0x28>
 8001fc8:	2501      	movs	r5, #1
 8001fca:	f880 5290 	strb.w	r5, [r0, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 8001fce:	6800      	ldr	r0, [r0, #0]
 8001fd0:	f001 fe62 	bl	8003c98 <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1U);  
 8001fd4:	4629      	mov	r1, r5
 8001fd6:	6820      	ldr	r0, [r4, #0]
 8001fd8:	f001 ff8e 	bl	8003ef8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd); 
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 8001fe2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd); 
 8001fe4:	2002      	movs	r0, #2
}
 8001fe6:	bd38      	pop	{r3, r4, r5, pc}

08001fe8 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd); 
 8001fe8:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8001fec:	2b01      	cmp	r3, #1
{ 
 8001fee:	b510      	push	{r4, lr}
 8001ff0:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 8001ff2:	d009      	beq.n	8002008 <HAL_HCD_Stop+0x20>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 8001ffa:	6800      	ldr	r0, [r0, #0]
 8001ffc:	f002 fa86 	bl	800450c <USB_StopHost>
  __HAL_UNLOCK(hhcd); 
 8002000:	2000      	movs	r0, #0
 8002002:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 8002006:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd); 
 8002008:	2002      	movs	r0, #2
}
 800200a:	bd10      	pop	{r4, pc}

0800200c <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 800200c:	6800      	ldr	r0, [r0, #0]
 800200e:	f001 bf5a 	b.w	8003ec6 <USB_ResetPort>

08002012 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8002012:	2328      	movs	r3, #40	; 0x28
 8002014:	fb03 0101 	mla	r1, r3, r1, r0
}
 8002018:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 800201c:	4770      	bx	lr

0800201e <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count; 
 800201e:	2328      	movs	r3, #40	; 0x28
 8002020:	fb03 0101 	mla	r1, r3, r1, r0
}
 8002024:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8002026:	4770      	bx	lr

08002028 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002028:	6800      	ldr	r0, [r0, #0]
 800202a:	f001 bf8c 	b.w	8003f46 <USB_GetCurrentFrame>

0800202e <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 800202e:	6800      	ldr	r0, [r0, #0]
 8002030:	f001 bf80 	b.w	8003f34 <USB_GetHostSpeed>

08002034 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002034:	6802      	ldr	r2, [r0, #0]
 8002036:	6953      	ldr	r3, [r2, #20]
 8002038:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800203c:	d00d      	beq.n	800205a <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800203e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002042:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002044:	2304      	movs	r3, #4
 8002046:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8002048:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 800204a:	2300      	movs	r3, #0
 800204c:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800204e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8002052:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8002056:	2001      	movs	r0, #1
 8002058:	4770      	bx	lr
  }
  return HAL_OK;
 800205a:	4618      	mov	r0, r3
}
 800205c:	4770      	bx	lr

0800205e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800205e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002062:	4604      	mov	r4, r0
 8002064:	4617      	mov	r7, r2
 8002066:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002068:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800206c:	b28e      	uxth	r6, r1
 800206e:	6825      	ldr	r5, [r4, #0]
 8002070:	f1b8 0f01 	cmp.w	r8, #1
 8002074:	bf0c      	ite	eq
 8002076:	696b      	ldreq	r3, [r5, #20]
 8002078:	69ab      	ldrne	r3, [r5, #24]
 800207a:	ea36 0303 	bics.w	r3, r6, r3
 800207e:	bf14      	ite	ne
 8002080:	2001      	movne	r0, #1
 8002082:	2000      	moveq	r0, #0
 8002084:	b908      	cbnz	r0, 800208a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8002086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800208a:	696b      	ldr	r3, [r5, #20]
 800208c:	055a      	lsls	r2, r3, #21
 800208e:	d512      	bpl.n	80020b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002090:	682b      	ldr	r3, [r5, #0]
 8002092:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002096:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002098:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800209c:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800209e:	2304      	movs	r3, #4
 80020a0:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80020a2:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 80020a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80020ac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 80020b0:	2001      	movs	r0, #1
 80020b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80020b6:	1c7b      	adds	r3, r7, #1
 80020b8:	d0d9      	beq.n	800206e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80020ba:	b94f      	cbnz	r7, 80020d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 80020bc:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80020be:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80020c0:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80020c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80020c6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 80020ca:	2003      	movs	r0, #3
 80020cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80020d0:	f7ff f804 	bl	80010dc <HAL_GetTick>
 80020d4:	eba0 0009 	sub.w	r0, r0, r9
 80020d8:	4287      	cmp	r7, r0
 80020da:	d2c8      	bcs.n	800206e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80020dc:	e7ee      	b.n	80020bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

080020de <I2C_WaitOnFlagUntilTimeout>:
{
 80020de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020e2:	9e08      	ldr	r6, [sp, #32]
 80020e4:	4604      	mov	r4, r0
 80020e6:	4690      	mov	r8, r2
 80020e8:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80020ea:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80020ee:	b28d      	uxth	r5, r1
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	f1b9 0f01 	cmp.w	r9, #1
 80020f6:	bf0c      	ite	eq
 80020f8:	695b      	ldreq	r3, [r3, #20]
 80020fa:	699b      	ldrne	r3, [r3, #24]
 80020fc:	ea35 0303 	bics.w	r3, r5, r3
 8002100:	bf0c      	ite	eq
 8002102:	2301      	moveq	r3, #1
 8002104:	2300      	movne	r3, #0
 8002106:	4543      	cmp	r3, r8
 8002108:	d002      	beq.n	8002110 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800210a:	2000      	movs	r0, #0
}
 800210c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002110:	1c7b      	adds	r3, r7, #1
 8002112:	d0ed      	beq.n	80020f0 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002114:	b95f      	cbnz	r7, 800212e <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002116:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8002118:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800211a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800211c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8002120:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8002124:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002126:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800212a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800212e:	f7fe ffd5 	bl	80010dc <HAL_GetTick>
 8002132:	1b80      	subs	r0, r0, r6
 8002134:	4287      	cmp	r7, r0
 8002136:	d2db      	bcs.n	80020f0 <I2C_WaitOnFlagUntilTimeout+0x12>
 8002138:	e7ed      	b.n	8002116 <I2C_WaitOnFlagUntilTimeout+0x38>

0800213a <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 800213a:	b570      	push	{r4, r5, r6, lr}
 800213c:	4604      	mov	r4, r0
 800213e:	460d      	mov	r5, r1
 8002140:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	061b      	lsls	r3, r3, #24
 8002148:	d501      	bpl.n	800214e <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 800214a:	2000      	movs	r0, #0
 800214c:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800214e:	4620      	mov	r0, r4
 8002150:	f7ff ff70 	bl	8002034 <I2C_IsAcknowledgeFailed>
 8002154:	b9a8      	cbnz	r0, 8002182 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8002156:	1c6a      	adds	r2, r5, #1
 8002158:	d0f3      	beq.n	8002142 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800215a:	b965      	cbnz	r5, 8002176 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800215c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800215e:	f043 0320 	orr.w	r3, r3, #32
 8002162:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8002164:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002166:	2300      	movs	r3, #0
 8002168:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800216a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800216e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8002172:	2003      	movs	r0, #3
 8002174:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002176:	f7fe ffb1 	bl	80010dc <HAL_GetTick>
 800217a:	1b80      	subs	r0, r0, r6
 800217c:	4285      	cmp	r5, r0
 800217e:	d2e0      	bcs.n	8002142 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8002180:	e7ec      	b.n	800215c <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8002182:	2001      	movs	r0, #1
}
 8002184:	bd70      	pop	{r4, r5, r6, pc}
	...

08002188 <I2C_RequestMemoryWrite>:
{
 8002188:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800218c:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800218e:	6802      	ldr	r2, [r0, #0]
{
 8002190:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8002192:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8002194:	6813      	ldr	r3, [r2, #0]
 8002196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219a:	6013      	str	r3, [r2, #0]
{
 800219c:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800219e:	9600      	str	r6, [sp, #0]
 80021a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80021a2:	2200      	movs	r2, #0
 80021a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80021a8:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021aa:	f7ff ff98 	bl	80020de <I2C_WaitOnFlagUntilTimeout>
 80021ae:	b968      	cbnz	r0, 80021cc <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021b0:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80021b4:	491c      	ldr	r1, [pc, #112]	; (8002228 <I2C_RequestMemoryWrite+0xa0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021b6:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80021ba:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021bc:	4620      	mov	r0, r4
 80021be:	4633      	mov	r3, r6
 80021c0:	f7ff ff4d 	bl	800205e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021c4:	b130      	cbz	r0, 80021d4 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d018      	beq.n	80021fe <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 80021cc:	2003      	movs	r0, #3
}
 80021ce:	b004      	add	sp, #16
 80021d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021d4:	6823      	ldr	r3, [r4, #0]
 80021d6:	9003      	str	r0, [sp, #12]
 80021d8:	695a      	ldr	r2, [r3, #20]
 80021da:	9203      	str	r2, [sp, #12]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021e0:	4632      	mov	r2, r6
 80021e2:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021e4:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021e6:	4620      	mov	r0, r4
 80021e8:	f7ff ffa7 	bl	800213a <I2C_WaitOnTXEFlagUntilTimeout>
 80021ec:	b148      	cbz	r0, 8002202 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d1eb      	bne.n	80021cc <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80021f4:	6822      	ldr	r2, [r4, #0]
 80021f6:	6813      	ldr	r3, [r2, #0]
 80021f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021fc:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80021fe:	2001      	movs	r0, #1
 8002200:	e7e5      	b.n	80021ce <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002202:	f1b8 0f01 	cmp.w	r8, #1
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	d102      	bne.n	8002210 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800220a:	b2ed      	uxtb	r5, r5
 800220c:	611d      	str	r5, [r3, #16]
 800220e:	e7de      	b.n	80021ce <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002210:	0a2a      	lsrs	r2, r5, #8
 8002212:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002214:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002216:	4632      	mov	r2, r6
 8002218:	4620      	mov	r0, r4
 800221a:	f7ff ff8e 	bl	800213a <I2C_WaitOnTXEFlagUntilTimeout>
 800221e:	2800      	cmp	r0, #0
 8002220:	d1e5      	bne.n	80021ee <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002222:	6823      	ldr	r3, [r4, #0]
 8002224:	e7f1      	b.n	800220a <I2C_RequestMemoryWrite+0x82>
 8002226:	bf00      	nop
 8002228:	00010002 	.word	0x00010002

0800222c <I2C_RequestMemoryRead>:
{
 800222c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002230:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002232:	6803      	ldr	r3, [r0, #0]
{
 8002234:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002236:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800223e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002246:	601a      	str	r2, [r3, #0]
{
 8002248:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800224a:	9500      	str	r5, [sp, #0]
 800224c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800224e:	2200      	movs	r2, #0
 8002250:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8002254:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002256:	f7ff ff42 	bl	80020de <I2C_WaitOnFlagUntilTimeout>
 800225a:	b980      	cbnz	r0, 800227e <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800225c:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800225e:	492f      	ldr	r1, [pc, #188]	; (800231c <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002260:	b2ff      	uxtb	r7, r7
 8002262:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8002266:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002268:	4620      	mov	r0, r4
 800226a:	462b      	mov	r3, r5
 800226c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800226e:	f7ff fef6 	bl	800205e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002272:	b140      	cbz	r0, 8002286 <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002274:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002276:	2b04      	cmp	r3, #4
 8002278:	d101      	bne.n	800227e <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 800227a:	2001      	movs	r0, #1
 800227c:	e000      	b.n	8002280 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 800227e:	2003      	movs	r0, #3
}
 8002280:	b004      	add	sp, #16
 8002282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002286:	6823      	ldr	r3, [r4, #0]
 8002288:	9003      	str	r0, [sp, #12]
 800228a:	695a      	ldr	r2, [r3, #20]
 800228c:	9203      	str	r2, [sp, #12]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002292:	462a      	mov	r2, r5
 8002294:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002296:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002298:	4620      	mov	r0, r4
 800229a:	f7ff ff4e 	bl	800213a <I2C_WaitOnTXEFlagUntilTimeout>
 800229e:	b140      	cbz	r0, 80022b2 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d1eb      	bne.n	800227e <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80022a6:	6822      	ldr	r2, [r4, #0]
 80022a8:	6813      	ldr	r3, [r2, #0]
 80022aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	e7e3      	b.n	800227a <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022b2:	f1b8 0f01 	cmp.w	r8, #1
 80022b6:	6823      	ldr	r3, [r4, #0]
 80022b8:	d124      	bne.n	8002304 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022ba:	b2f6      	uxtb	r6, r6
 80022bc:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022be:	462a      	mov	r2, r5
 80022c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80022c2:	4620      	mov	r0, r4
 80022c4:	f7ff ff39 	bl	800213a <I2C_WaitOnTXEFlagUntilTimeout>
 80022c8:	4602      	mov	r2, r0
 80022ca:	2800      	cmp	r0, #0
 80022cc:	d1e8      	bne.n	80022a0 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80022ce:	6821      	ldr	r1, [r4, #0]
 80022d0:	680b      	ldr	r3, [r1, #0]
 80022d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d6:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022d8:	4620      	mov	r0, r4
 80022da:	9500      	str	r5, [sp, #0]
 80022dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80022de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022e2:	f7ff fefc 	bl	80020de <I2C_WaitOnFlagUntilTimeout>
 80022e6:	2800      	cmp	r0, #0
 80022e8:	d1c9      	bne.n	800227e <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80022ea:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80022ee:	490b      	ldr	r1, [pc, #44]	; (800231c <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80022f0:	f047 0701 	orr.w	r7, r7, #1
 80022f4:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022f6:	4620      	mov	r0, r4
 80022f8:	462b      	mov	r3, r5
 80022fa:	f7ff feb0 	bl	800205e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022fe:	2800      	cmp	r0, #0
 8002300:	d1b8      	bne.n	8002274 <I2C_RequestMemoryRead+0x48>
 8002302:	e7bd      	b.n	8002280 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002304:	0a32      	lsrs	r2, r6, #8
 8002306:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002308:	990a      	ldr	r1, [sp, #40]	; 0x28
 800230a:	462a      	mov	r2, r5
 800230c:	4620      	mov	r0, r4
 800230e:	f7ff ff14 	bl	800213a <I2C_WaitOnTXEFlagUntilTimeout>
 8002312:	2800      	cmp	r0, #0
 8002314:	d1c4      	bne.n	80022a0 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	e7cf      	b.n	80022ba <I2C_RequestMemoryRead+0x8e>
 800231a:	bf00      	nop
 800231c:	00010002 	.word	0x00010002

08002320 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8002320:	b570      	push	{r4, r5, r6, lr}
 8002322:	4604      	mov	r4, r0
 8002324:	460d      	mov	r5, r1
 8002326:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002328:	6820      	ldr	r0, [r4, #0]
 800232a:	6943      	ldr	r3, [r0, #20]
 800232c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8002330:	d001      	beq.n	8002336 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8002332:	2000      	movs	r0, #0
}
 8002334:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002336:	6942      	ldr	r2, [r0, #20]
 8002338:	06d2      	lsls	r2, r2, #27
 800233a:	d50b      	bpl.n	8002354 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800233c:	f06f 0210 	mvn.w	r2, #16
 8002340:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8002342:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002344:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002346:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 800234a:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800234c:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 800234e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8002352:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002354:	b95d      	cbnz	r5, 800236e <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002356:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002358:	f043 0320 	orr.w	r3, r3, #32
 800235c:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800235e:	2320      	movs	r3, #32
 8002360:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8002364:	2300      	movs	r3, #0
 8002366:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800236a:	2003      	movs	r0, #3
 800236c:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800236e:	f7fe feb5 	bl	80010dc <HAL_GetTick>
 8002372:	1b80      	subs	r0, r0, r6
 8002374:	4285      	cmp	r5, r0
 8002376:	d2d7      	bcs.n	8002328 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8002378:	e7ed      	b.n	8002356 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

0800237a <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 800237a:	b570      	push	{r4, r5, r6, lr}
 800237c:	4604      	mov	r4, r0
 800237e:	460d      	mov	r5, r1
 8002380:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	075b      	lsls	r3, r3, #29
 8002388:	d501      	bpl.n	800238e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800238a:	2000      	movs	r0, #0
 800238c:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800238e:	4620      	mov	r0, r4
 8002390:	f7ff fe50 	bl	8002034 <I2C_IsAcknowledgeFailed>
 8002394:	b9a8      	cbnz	r0, 80023c2 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8002396:	1c6a      	adds	r2, r5, #1
 8002398:	d0f3      	beq.n	8002382 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800239a:	b965      	cbnz	r5, 80023b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800239c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800239e:	f043 0320 	orr.w	r3, r3, #32
 80023a2:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80023a4:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80023aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80023ae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80023b2:	2003      	movs	r0, #3
 80023b4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80023b6:	f7fe fe91 	bl	80010dc <HAL_GetTick>
 80023ba:	1b80      	subs	r0, r0, r6
 80023bc:	4285      	cmp	r5, r0
 80023be:	d2e0      	bcs.n	8002382 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 80023c0:	e7ec      	b.n	800239c <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80023c2:	2001      	movs	r0, #1
}
 80023c4:	bd70      	pop	{r4, r5, r6, pc}

080023c6 <HAL_I2C_MspInit>:
 80023c6:	4770      	bx	lr

080023c8 <HAL_I2C_Init>:
{
 80023c8:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 80023ca:	4604      	mov	r4, r0
 80023cc:	2800      	cmp	r0, #0
 80023ce:	d062      	beq.n	8002496 <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80023d0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80023d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023d8:	b91b      	cbnz	r3, 80023e2 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80023da:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80023de:	f7ff fff2 	bl	80023c6 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 80023e2:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80023e4:	4e2d      	ldr	r6, [pc, #180]	; (800249c <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 80023e6:	4d2e      	ldr	r5, [pc, #184]	; (80024a0 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 80023e8:	2324      	movs	r3, #36	; 0x24
 80023ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80023ee:	6813      	ldr	r3, [r2, #0]
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023f6:	f001 f8ab 	bl	8003550 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80023fa:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 80023fc:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80023fe:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002402:	42b3      	cmp	r3, r6
 8002404:	bf84      	itt	hi
 8002406:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 800240a:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 800240c:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800240e:	bf91      	iteee	ls
 8002410:	1c69      	addls	r1, r5, #1
 8002412:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8002416:	fbb1 f1f5 	udivhi	r1, r1, r5
 800241a:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800241c:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800241e:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002420:	d821      	bhi.n	8002466 <HAL_I2C_Init+0x9e>
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fbb0 f0f3 	udiv	r0, r0, r3
 8002428:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800242c:	2b03      	cmp	r3, #3
 800242e:	bf98      	it	ls
 8002430:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002432:	6a21      	ldr	r1, [r4, #32]
 8002434:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002436:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002438:	430b      	orrs	r3, r1
 800243a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800243c:	68e1      	ldr	r1, [r4, #12]
 800243e:	6923      	ldr	r3, [r4, #16]
 8002440:	430b      	orrs	r3, r1
 8002442:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8002444:	69a1      	ldr	r1, [r4, #24]
 8002446:	6963      	ldr	r3, [r4, #20]
 8002448:	430b      	orrs	r3, r1
 800244a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800244c:	6813      	ldr	r3, [r2, #0]
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002454:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002456:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002458:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800245a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800245e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002460:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002464:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002466:	68a1      	ldr	r1, [r4, #8]
 8002468:	b949      	cbnz	r1, 800247e <HAL_I2C_Init+0xb6>
 800246a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800246e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002472:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8002476:	b163      	cbz	r3, 8002492 <HAL_I2C_Init+0xca>
 8002478:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800247c:	e7d9      	b.n	8002432 <HAL_I2C_Init+0x6a>
 800247e:	2119      	movs	r1, #25
 8002480:	434b      	muls	r3, r1
 8002482:	fbb0 f0f3 	udiv	r0, r0, r3
 8002486:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800248a:	b113      	cbz	r3, 8002492 <HAL_I2C_Init+0xca>
 800248c:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8002490:	e7cf      	b.n	8002432 <HAL_I2C_Init+0x6a>
 8002492:	2001      	movs	r0, #1
 8002494:	e7cd      	b.n	8002432 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8002496:	2001      	movs	r0, #1
}
 8002498:	bd70      	pop	{r4, r5, r6, pc}
 800249a:	bf00      	nop
 800249c:	000186a0 	.word	0x000186a0
 80024a0:	000f4240 	.word	0x000f4240

080024a4 <HAL_I2C_MspDeInit>:
 80024a4:	4770      	bx	lr

080024a6 <HAL_I2C_DeInit>:
{
 80024a6:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 80024a8:	4604      	mov	r4, r0
 80024aa:	b198      	cbz	r0, 80024d4 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80024ac:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80024ae:	2324      	movs	r3, #36	; 0x24
 80024b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80024b4:	6813      	ldr	r3, [r2, #0]
 80024b6:	f023 0301 	bic.w	r3, r3, #1
 80024ba:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80024bc:	f7ff fff2 	bl	80024a4 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80024c0:	2000      	movs	r0, #0
 80024c2:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 80024c4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 80024c8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024cc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80024ce:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80024d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80024d4:	2001      	movs	r0, #1
}
 80024d6:	bd10      	pop	{r4, pc}

080024d8 <HAL_I2C_Mem_Write>:
{
 80024d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80024dc:	4604      	mov	r4, r0
 80024de:	469a      	mov	sl, r3
 80024e0:	4688      	mov	r8, r1
 80024e2:	4691      	mov	r9, r2
 80024e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 80024e6:	f7fe fdf9 	bl	80010dc <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80024ea:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80024ee:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 80024f0:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80024f2:	d003      	beq.n	80024fc <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80024f4:	2002      	movs	r0, #2
}
 80024f6:	b002      	add	sp, #8
 80024f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024fc:	9000      	str	r0, [sp, #0]
 80024fe:	2319      	movs	r3, #25
 8002500:	2201      	movs	r2, #1
 8002502:	493e      	ldr	r1, [pc, #248]	; (80025fc <HAL_I2C_Mem_Write+0x124>)
 8002504:	4620      	mov	r0, r4
 8002506:	f7ff fdea 	bl	80020de <I2C_WaitOnFlagUntilTimeout>
 800250a:	2800      	cmp	r0, #0
 800250c:	d1f2      	bne.n	80024f4 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 800250e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002512:	2b01      	cmp	r3, #1
 8002514:	d0ee      	beq.n	80024f4 <HAL_I2C_Mem_Write+0x1c>
 8002516:	2301      	movs	r3, #1
 8002518:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800251c:	6823      	ldr	r3, [r4, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002522:	bf5e      	ittt	pl
 8002524:	681a      	ldrpl	r2, [r3, #0]
 8002526:	f042 0201 	orrpl.w	r2, r2, #1
 800252a:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002532:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002534:	2321      	movs	r3, #33	; 0x21
 8002536:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800253a:	2340      	movs	r3, #64	; 0x40
 800253c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8002540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002542:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002544:	2700      	movs	r7, #0
    hi2c->XferCount   = Size;
 8002546:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800254a:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800254c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800254e:	4b2c      	ldr	r3, [pc, #176]	; (8002600 <HAL_I2C_Mem_Write+0x128>)
 8002550:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002552:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002554:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002556:	9501      	str	r5, [sp, #4]
 8002558:	9600      	str	r6, [sp, #0]
 800255a:	4653      	mov	r3, sl
 800255c:	464a      	mov	r2, r9
 800255e:	4641      	mov	r1, r8
 8002560:	4620      	mov	r0, r4
 8002562:	f7ff fe11 	bl	8002188 <I2C_RequestMemoryWrite>
 8002566:	2800      	cmp	r0, #0
 8002568:	d02a      	beq.n	80025c0 <HAL_I2C_Mem_Write+0xe8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800256a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800256c:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002570:	2b04      	cmp	r3, #4
 8002572:	d107      	bne.n	8002584 <HAL_I2C_Mem_Write+0xac>
        return HAL_ERROR;
 8002574:	2001      	movs	r0, #1
 8002576:	e7be      	b.n	80024f6 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002578:	f7ff fddf 	bl	800213a <I2C_WaitOnTXEFlagUntilTimeout>
 800257c:	b120      	cbz	r0, 8002588 <HAL_I2C_Mem_Write+0xb0>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800257e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002580:	2b04      	cmp	r3, #4
 8002582:	d034      	beq.n	80025ee <HAL_I2C_Mem_Write+0x116>
          return HAL_TIMEOUT;
 8002584:	2003      	movs	r0, #3
 8002586:	e7b6      	b.n	80024f6 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8002588:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800258a:	6827      	ldr	r7, [r4, #0]
      hi2c->XferSize--;
 800258c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800258e:	1c4b      	adds	r3, r1, #1
 8002590:	6263      	str	r3, [r4, #36]	; 0x24
 8002592:	780b      	ldrb	r3, [r1, #0]
 8002594:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8002596:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002598:	3b01      	subs	r3, #1
 800259a:	b29b      	uxth	r3, r3
 800259c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800259e:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 80025a0:	1e50      	subs	r0, r2, #1
 80025a2:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025a4:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 80025a6:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025a8:	d50a      	bpl.n	80025c0 <HAL_I2C_Mem_Write+0xe8>
 80025aa:	b148      	cbz	r0, 80025c0 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80025ac:	1c8b      	adds	r3, r1, #2
 80025ae:	6263      	str	r3, [r4, #36]	; 0x24
 80025b0:	784b      	ldrb	r3, [r1, #1]
 80025b2:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 80025b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025b6:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 80025b8:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80025ba:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80025bc:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80025be:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 80025c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c2:	462a      	mov	r2, r5
 80025c4:	4631      	mov	r1, r6
 80025c6:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1d5      	bne.n	8002578 <HAL_I2C_Mem_Write+0xa0>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025cc:	f7ff fed5 	bl	800237a <I2C_WaitOnBTFFlagUntilTimeout>
 80025d0:	2800      	cmp	r0, #0
 80025d2:	d1d4      	bne.n	800257e <HAL_I2C_Mem_Write+0xa6>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80025d4:	6822      	ldr	r2, [r4, #0]
 80025d6:	6813      	ldr	r3, [r2, #0]
 80025d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025dc:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80025de:	2320      	movs	r3, #32
 80025e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80025e4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80025ec:	e783      	b.n	80024f6 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80025ee:	6822      	ldr	r2, [r4, #0]
 80025f0:	6813      	ldr	r3, [r2, #0]
 80025f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	e7bc      	b.n	8002574 <HAL_I2C_Mem_Write+0x9c>
 80025fa:	bf00      	nop
 80025fc:	00100002 	.word	0x00100002
 8002600:	ffff0000 	.word	0xffff0000

08002604 <HAL_I2C_Mem_Read>:
{
 8002604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002608:	4604      	mov	r4, r0
 800260a:	b086      	sub	sp, #24
 800260c:	469a      	mov	sl, r3
 800260e:	460d      	mov	r5, r1
 8002610:	4691      	mov	r9, r2
 8002612:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 8002614:	f7fe fd62 	bl	80010dc <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002618:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800261c:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 800261e:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002620:	d004      	beq.n	800262c <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8002622:	2502      	movs	r5, #2
}
 8002624:	4628      	mov	r0, r5
 8002626:	b006      	add	sp, #24
 8002628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800262c:	9000      	str	r0, [sp, #0]
 800262e:	2319      	movs	r3, #25
 8002630:	2201      	movs	r2, #1
 8002632:	4979      	ldr	r1, [pc, #484]	; (8002818 <HAL_I2C_Mem_Read+0x214>)
 8002634:	4620      	mov	r0, r4
 8002636:	f7ff fd52 	bl	80020de <I2C_WaitOnFlagUntilTimeout>
 800263a:	2800      	cmp	r0, #0
 800263c:	d1f1      	bne.n	8002622 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 800263e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002642:	2b01      	cmp	r3, #1
 8002644:	d0ed      	beq.n	8002622 <HAL_I2C_Mem_Read+0x1e>
 8002646:	2301      	movs	r3, #1
 8002648:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800264c:	6823      	ldr	r3, [r4, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002652:	bf5e      	ittt	pl
 8002654:	681a      	ldrpl	r2, [r3, #0]
 8002656:	f042 0201 	orrpl.w	r2, r2, #1
 800265a:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002662:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002664:	2322      	movs	r3, #34	; 0x22
 8002666:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800266a:	2340      	movs	r3, #64	; 0x40
 800266c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8002670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002672:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002674:	f04f 0800 	mov.w	r8, #0
    hi2c->XferCount   = Size;
 8002678:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800267c:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002680:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002682:	4b66      	ldr	r3, [pc, #408]	; (800281c <HAL_I2C_Mem_Read+0x218>)
 8002684:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002686:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002688:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800268a:	4629      	mov	r1, r5
 800268c:	9601      	str	r6, [sp, #4]
 800268e:	9700      	str	r7, [sp, #0]
 8002690:	4653      	mov	r3, sl
 8002692:	464a      	mov	r2, r9
 8002694:	4620      	mov	r0, r4
 8002696:	f7ff fdc9 	bl	800222c <I2C_RequestMemoryRead>
 800269a:	4605      	mov	r5, r0
 800269c:	b130      	cbz	r0, 80026ac <HAL_I2C_Mem_Read+0xa8>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800269e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80026a0:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d13a      	bne.n	800271e <HAL_I2C_Mem_Read+0x11a>
              return HAL_ERROR;
 80026a8:	2501      	movs	r5, #1
 80026aa:	e7bb      	b.n	8002624 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 80026ac:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	b992      	cbnz	r2, 80026d8 <HAL_I2C_Mem_Read+0xd4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b2:	9002      	str	r0, [sp, #8]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	9202      	str	r2, [sp, #8]
 80026b8:	699a      	ldr	r2, [r3, #24]
 80026ba:	9202      	str	r2, [sp, #8]
 80026bc:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c4:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80026c6:	2320      	movs	r3, #32
 80026c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80026d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80026d6:	e7a5      	b.n	8002624 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 80026d8:	2a01      	cmp	r2, #1
 80026da:	d122      	bne.n	8002722 <HAL_I2C_Mem_Read+0x11e>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026e2:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e4:	9003      	str	r0, [sp, #12]
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	9203      	str	r2, [sp, #12]
 80026ea:	699a      	ldr	r2, [r3, #24]
 80026ec:	9203      	str	r2, [sp, #12]
 80026ee:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f6:	601a      	str	r2, [r3, #0]
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026f8:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8002820 <HAL_I2C_Mem_Read+0x21c>
    while(hi2c->XferSize > 0U)
 80026fc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0e1      	beq.n	80026c6 <HAL_I2C_Mem_Read+0xc2>
      if(hi2c->XferSize <= 3U)
 8002702:	2b03      	cmp	r3, #3
 8002704:	d86b      	bhi.n	80027de <HAL_I2C_Mem_Read+0x1da>
        if(hi2c->XferSize== 1U)
 8002706:	2b01      	cmp	r3, #1
 8002708:	d123      	bne.n	8002752 <HAL_I2C_Mem_Read+0x14e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 800270a:	4632      	mov	r2, r6
 800270c:	4639      	mov	r1, r7
 800270e:	4620      	mov	r0, r4
 8002710:	f7ff fe06 	bl	8002320 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002714:	2800      	cmp	r0, #0
 8002716:	d039      	beq.n	800278c <HAL_I2C_Mem_Read+0x188>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002718:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800271a:	2b20      	cmp	r3, #32
 800271c:	d1c4      	bne.n	80026a8 <HAL_I2C_Mem_Read+0xa4>
              return HAL_TIMEOUT;
 800271e:	2503      	movs	r5, #3
 8002720:	e780      	b.n	8002624 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 8002722:	2a02      	cmp	r2, #2
 8002724:	d10e      	bne.n	8002744 <HAL_I2C_Mem_Read+0x140>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800272c:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002734:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002736:	9004      	str	r0, [sp, #16]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	9204      	str	r2, [sp, #16]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	9304      	str	r3, [sp, #16]
 8002740:	9b04      	ldr	r3, [sp, #16]
 8002742:	e7d9      	b.n	80026f8 <HAL_I2C_Mem_Read+0xf4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002744:	9005      	str	r0, [sp, #20]
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	9205      	str	r2, [sp, #20]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	9305      	str	r3, [sp, #20]
 800274e:	9b05      	ldr	r3, [sp, #20]
 8002750:	e7d2      	b.n	80026f8 <HAL_I2C_Mem_Read+0xf4>
        else if(hi2c->XferSize == 2U)
 8002752:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002754:	9600      	str	r6, [sp, #0]
 8002756:	463b      	mov	r3, r7
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	4641      	mov	r1, r8
 800275e:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8002760:	d122      	bne.n	80027a8 <HAL_I2C_Mem_Read+0x1a4>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002762:	f7ff fcbc 	bl	80020de <I2C_WaitOnFlagUntilTimeout>
 8002766:	2800      	cmp	r0, #0
 8002768:	d1d9      	bne.n	800271e <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800276a:	6823      	ldr	r3, [r4, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002772:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002774:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	1c51      	adds	r1, r2, #1
 800277a:	6261      	str	r1, [r4, #36]	; 0x24
 800277c:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 800277e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002780:	3b01      	subs	r3, #1
 8002782:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002784:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002786:	3b01      	subs	r3, #1
 8002788:	b29b      	uxth	r3, r3
 800278a:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800278c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	6262      	str	r2, [r4, #36]	; 0x24
 8002792:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002794:	6912      	ldr	r2, [r2, #16]
 8002796:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002798:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800279a:	3b01      	subs	r3, #1
 800279c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800279e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80027a6:	e7a9      	b.n	80026fc <HAL_I2C_Mem_Read+0xf8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027a8:	f7ff fc99 	bl	80020de <I2C_WaitOnFlagUntilTimeout>
 80027ac:	4602      	mov	r2, r0
 80027ae:	2800      	cmp	r0, #0
 80027b0:	d1b5      	bne.n	800271e <HAL_I2C_Mem_Read+0x11a>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	6819      	ldr	r1, [r3, #0]
 80027b6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80027ba:	6019      	str	r1, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80027bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	1c48      	adds	r0, r1, #1
 80027c2:	6260      	str	r0, [r4, #36]	; 0x24
 80027c4:	700b      	strb	r3, [r1, #0]
          hi2c->XferSize--;
 80027c6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027c8:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 80027ca:	3b01      	subs	r3, #1
 80027cc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80027ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027d6:	4641      	mov	r1, r8
 80027d8:	463b      	mov	r3, r7
 80027da:	4620      	mov	r0, r4
 80027dc:	e7c1      	b.n	8002762 <HAL_I2C_Mem_Read+0x15e>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027de:	4632      	mov	r2, r6
 80027e0:	4639      	mov	r1, r7
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7ff fd9c 	bl	8002320 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027e8:	2800      	cmp	r0, #0
 80027ea:	d195      	bne.n	8002718 <HAL_I2C_Mem_Read+0x114>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80027ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	6262      	str	r2, [r4, #36]	; 0x24
 80027f2:	6822      	ldr	r2, [r4, #0]
 80027f4:	6912      	ldr	r2, [r2, #16]
 80027f6:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 80027f8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027fa:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 80027fc:	3b01      	subs	r3, #1
 80027fe:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002800:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002802:	3b01      	subs	r3, #1
 8002804:	b29b      	uxth	r3, r3
 8002806:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002808:	6953      	ldr	r3, [r2, #20]
 800280a:	075b      	lsls	r3, r3, #29
 800280c:	f57f af76 	bpl.w	80026fc <HAL_I2C_Mem_Read+0xf8>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002810:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002812:	1c59      	adds	r1, r3, #1
 8002814:	6261      	str	r1, [r4, #36]	; 0x24
 8002816:	e7bd      	b.n	8002794 <HAL_I2C_Mem_Read+0x190>
 8002818:	00100002 	.word	0x00100002
 800281c:	ffff0000 	.word	0xffff0000
 8002820:	00010004 	.word	0x00010004

08002824 <HAL_I2C_GetState>:
  return hi2c->State;
 8002824:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8002828:	4770      	bx	lr

0800282a <HAL_I2S_MspInit>:
 800282a:	4770      	bx	lr

0800282c <HAL_I2S_Transmit_DMA>:
  * @note The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *       between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800282c:	b538      	push	{r3, r4, r5, lr}
 800282e:	4604      	mov	r4, r0
  uint32_t *tmp = NULL;
  uint32_t tmp1 = 0U;

  if((pData == NULL) || (Size == 0U))
 8002830:	2900      	cmp	r1, #0
 8002832:	d045      	beq.n	80028c0 <HAL_I2S_Transmit_DMA+0x94>
 8002834:	2a00      	cmp	r2, #0
 8002836:	d043      	beq.n	80028c0 <HAL_I2S_Transmit_DMA+0x94>
  {
    return  HAL_ERROR;
  }

  if(hi2s->State == HAL_I2S_STATE_READY)
 8002838:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800283c:	2b01      	cmp	r3, #1
 800283e:	d001      	beq.n	8002844 <HAL_I2S_Transmit_DMA+0x18>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002840:	2002      	movs	r0, #2
 8002842:	bd38      	pop	{r3, r4, r5, pc}
    tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002844:	6805      	ldr	r5, [r0, #0]
    hi2s->pTxBuffPtr = pData;
 8002846:	6241      	str	r1, [r0, #36]	; 0x24
    tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002848:	69eb      	ldr	r3, [r5, #28]
 800284a:	f003 0307 	and.w	r3, r3, #7
    if((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 800284e:	2b03      	cmp	r3, #3
 8002850:	d001      	beq.n	8002856 <HAL_I2S_Transmit_DMA+0x2a>
 8002852:	2b05      	cmp	r3, #5
 8002854:	d131      	bne.n	80028ba <HAL_I2S_Transmit_DMA+0x8e>
      hi2s->TxXferSize  = (Size << 1U);
 8002856:	0053      	lsls	r3, r2, #1
 8002858:	b29b      	uxth	r3, r3
 800285a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2s->TxXferCount = (Size << 1U);
 800285c:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_LOCK(hi2s);
 800285e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8002862:	2b01      	cmp	r3, #1
 8002864:	d0ec      	beq.n	8002840 <HAL_I2S_Transmit_DMA+0x14>
 8002866:	2301      	movs	r3, #1
 8002868:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800286c:	2300      	movs	r3, #0
 800286e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002870:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2s->State     = HAL_I2S_STATE_BUSY_TX;
 8002872:	2303      	movs	r3, #3
 8002874:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_I2S_Transmit_DMA+0x98>)
 800287a:	6403      	str	r3, [r0, #64]	; 0x40
    hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800287c:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_I2S_Transmit_DMA+0x9c>)
 800287e:	63c3      	str	r3, [r0, #60]	; 0x3c
    hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002880:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_I2S_Transmit_DMA+0xa0>)
 8002882:	64c3      	str	r3, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t*)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002884:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002886:	f105 020c 	add.w	r2, r5, #12
 800288a:	b29b      	uxth	r3, r3
 800288c:	f7fe fd5c 	bl	8001348 <HAL_DMA_Start_IT>
    if((hi2s->Instance->I2SCFGR &SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	69da      	ldr	r2, [r3, #28]
 8002894:	0551      	lsls	r1, r2, #21
      __HAL_I2S_ENABLE(hi2s);
 8002896:	bf5e      	ittt	pl
 8002898:	69da      	ldrpl	r2, [r3, #28]
 800289a:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 800289e:	61da      	strpl	r2, [r3, #28]
    if((hi2s->Instance->CR2 & SPI_CR2_TXDMAEN) != SPI_CR2_TXDMAEN)
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	0792      	lsls	r2, r2, #30
      SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80028a4:	bf58      	it	pl
 80028a6:	685a      	ldrpl	r2, [r3, #4]
    __HAL_UNLOCK(hi2s);
 80028a8:	f04f 0000 	mov.w	r0, #0
      SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80028ac:	bf5c      	itt	pl
 80028ae:	f042 0202 	orrpl.w	r2, r2, #2
 80028b2:	605a      	strpl	r2, [r3, #4]
    __HAL_UNLOCK(hi2s);
 80028b4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    return HAL_OK;
 80028b8:	bd38      	pop	{r3, r4, r5, pc}
      hi2s->TxXferSize  = Size;
 80028ba:	8502      	strh	r2, [r0, #40]	; 0x28
      hi2s->TxXferCount = Size;
 80028bc:	8542      	strh	r2, [r0, #42]	; 0x2a
 80028be:	e7ce      	b.n	800285e <HAL_I2S_Transmit_DMA+0x32>
    return  HAL_ERROR;
 80028c0:	2001      	movs	r0, #1
  }
}
 80028c2:	bd38      	pop	{r3, r4, r5, pc}
 80028c4:	08002b31 	.word	0x08002b31
 80028c8:	08002b3b 	.word	0x08002b3b
 80028cc:	08002dbf 	.word	0x08002dbf

080028d0 <HAL_I2S_Receive_DMA>:
  * @note The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *       between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80028d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028d2:	4613      	mov	r3, r2
 80028d4:	4604      	mov	r4, r0
  uint32_t *tmp = NULL;
  uint32_t tmp1 = 0U;

  if((pData == NULL) || (Size == 0U))
 80028d6:	460a      	mov	r2, r1
 80028d8:	2900      	cmp	r1, #0
 80028da:	d04f      	beq.n	800297c <HAL_I2S_Receive_DMA+0xac>
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d04d      	beq.n	800297c <HAL_I2S_Receive_DMA+0xac>
  {
    return  HAL_ERROR;
  }

  if(hi2s->State == HAL_I2S_STATE_READY)
 80028e0:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80028e4:	2901      	cmp	r1, #1
 80028e6:	d002      	beq.n	80028ee <HAL_I2S_Receive_DMA+0x1e>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80028e8:	2002      	movs	r0, #2
  }
}
 80028ea:	b003      	add	sp, #12
 80028ec:	bd30      	pop	{r4, r5, pc}
    tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80028ee:	6805      	ldr	r5, [r0, #0]
    hi2s->pRxBuffPtr = pData;
 80028f0:	62c2      	str	r2, [r0, #44]	; 0x2c
    tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80028f2:	69e8      	ldr	r0, [r5, #28]
 80028f4:	f000 0007 	and.w	r0, r0, #7
    if((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 80028f8:	2803      	cmp	r0, #3
 80028fa:	d001      	beq.n	8002900 <HAL_I2S_Receive_DMA+0x30>
 80028fc:	2805      	cmp	r0, #5
 80028fe:	d101      	bne.n	8002904 <HAL_I2S_Receive_DMA+0x34>
      hi2s->RxXferSize  = (Size << 1U);
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	b29b      	uxth	r3, r3
      hi2s->RxXferSize  = Size;
 8002904:	8623      	strh	r3, [r4, #48]	; 0x30
      hi2s->RxXferCount = Size;
 8002906:	8663      	strh	r3, [r4, #50]	; 0x32
    __HAL_LOCK(hi2s);
 8002908:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800290c:	2b01      	cmp	r3, #1
 800290e:	d0eb      	beq.n	80028e8 <HAL_I2S_Receive_DMA+0x18>
 8002910:	2301      	movs	r3, #1
 8002912:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002916:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2s->State     = HAL_I2S_STATE_BUSY_RX;
 8002918:	2304      	movs	r3, #4
 800291a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800291e:	2100      	movs	r1, #0
    hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002920:	4b17      	ldr	r3, [pc, #92]	; (8002980 <HAL_I2S_Receive_DMA+0xb0>)
    hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002922:	6461      	str	r1, [r4, #68]	; 0x44
    hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002924:	6403      	str	r3, [r0, #64]	; 0x40
    hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002926:	4b17      	ldr	r3, [pc, #92]	; (8002984 <HAL_I2S_Receive_DMA+0xb4>)
 8002928:	63c3      	str	r3, [r0, #60]	; 0x3c
    hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800292a:	4b17      	ldr	r3, [pc, #92]	; (8002988 <HAL_I2S_Receive_DMA+0xb8>)
 800292c:	64c3      	str	r3, [r0, #76]	; 0x4c
    if((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800292e:	69eb      	ldr	r3, [r5, #28]
 8002930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002934:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002938:	d105      	bne.n	8002946 <HAL_I2S_Receive_DMA+0x76>
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800293a:	9101      	str	r1, [sp, #4]
 800293c:	68eb      	ldr	r3, [r5, #12]
 800293e:	9301      	str	r3, [sp, #4]
 8002940:	68ab      	ldr	r3, [r5, #8]
 8002942:	9301      	str	r3, [sp, #4]
 8002944:	9b01      	ldr	r3, [sp, #4]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t*)tmp, hi2s->RxXferSize);
 8002946:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8002948:	f105 010c 	add.w	r1, r5, #12
 800294c:	b29b      	uxth	r3, r3
 800294e:	f7fe fcfb 	bl	8001348 <HAL_DMA_Start_IT>
    if((hi2s->Instance->I2SCFGR &SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	69da      	ldr	r2, [r3, #28]
 8002956:	0551      	lsls	r1, r2, #21
      __HAL_I2S_ENABLE(hi2s);
 8002958:	bf5e      	ittt	pl
 800295a:	69da      	ldrpl	r2, [r3, #28]
 800295c:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8002960:	61da      	strpl	r2, [r3, #28]
    if((hi2s->Instance->CR2 &SPI_CR2_RXDMAEN) != SPI_CR2_RXDMAEN)
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	07d2      	lsls	r2, r2, #31
      SET_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8002966:	bf58      	it	pl
 8002968:	685a      	ldrpl	r2, [r3, #4]
    __HAL_UNLOCK(hi2s);
 800296a:	f04f 0000 	mov.w	r0, #0
      SET_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 800296e:	bf5c      	itt	pl
 8002970:	f042 0201 	orrpl.w	r2, r2, #1
 8002974:	605a      	strpl	r2, [r3, #4]
    __HAL_UNLOCK(hi2s);
 8002976:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    return HAL_OK;
 800297a:	e7b6      	b.n	80028ea <HAL_I2S_Receive_DMA+0x1a>
    return  HAL_ERROR;
 800297c:	2001      	movs	r0, #1
 800297e:	e7b4      	b.n	80028ea <HAL_I2S_Receive_DMA+0x1a>
 8002980:	08002b63 	.word	0x08002b63
 8002984:	08002b6d 	.word	0x08002b6d
 8002988:	08002dbf 	.word	0x08002dbf

0800298c <HAL_I2S_DMAPause>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
  /* Process Locked */
  __HAL_LOCK(hi2s);
 800298c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002990:	2b01      	cmp	r3, #1
 8002992:	d02d      	beq.n	80029f0 <HAL_I2S_DMAPause+0x64>
 8002994:	2301      	movs	r3, #1
 8002996:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800299a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d109      	bne.n	80029b6 <HAL_I2S_DMAPause+0x2a>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_TXDMAEN);
 80029a2:	6802      	ldr	r2, [r0, #0]
 80029a4:	6853      	ldr	r3, [r2, #4]
 80029a6:	f023 0302 	bic.w	r3, r3, #2
  }
  else if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 80029aa:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2,(SPI_CR2_TXDMAEN|SPI_CR2_RXDMAEN));
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80029ac:	2300      	movs	r3, #0
 80029ae:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
 80029b2:	4618      	mov	r0, r3
 80029b4:	4770      	bx	lr
  else if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80029b6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d104      	bne.n	80029c8 <HAL_I2S_DMAPause+0x3c>
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 80029be:	6802      	ldr	r2, [r0, #0]
 80029c0:	6853      	ldr	r3, [r2, #4]
 80029c2:	f023 0301 	bic.w	r3, r3, #1
 80029c6:	e7f0      	b.n	80029aa <HAL_I2S_DMAPause+0x1e>
  else if(hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80029c8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80029cc:	2b05      	cmp	r3, #5
 80029ce:	d1ed      	bne.n	80029ac <HAL_I2S_DMAPause+0x20>
    CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_TXDMAEN|SPI_CR2_RXDMAEN));
 80029d0:	6802      	ldr	r2, [r0, #0]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2,(SPI_CR2_TXDMAEN|SPI_CR2_RXDMAEN));
 80029d2:	4908      	ldr	r1, [pc, #32]	; (80029f4 <HAL_I2S_DMAPause+0x68>)
    CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_TXDMAEN|SPI_CR2_RXDMAEN));
 80029d4:	6853      	ldr	r3, [r2, #4]
 80029d6:	f023 0303 	bic.w	r3, r3, #3
 80029da:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2,(SPI_CR2_TXDMAEN|SPI_CR2_RXDMAEN));
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_I2S_DMAPause+0x6c>)
 80029de:	428a      	cmp	r2, r1
 80029e0:	bf18      	it	ne
 80029e2:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	f022 0203 	bic.w	r2, r2, #3
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	e7dd      	b.n	80029ac <HAL_I2S_DMAPause+0x20>
  __HAL_LOCK(hi2s);
 80029f0:	2002      	movs	r0, #2
}
 80029f2:	4770      	bx	lr
 80029f4:	40003800 	.word	0x40003800
 80029f8:	40003400 	.word	0x40003400

080029fc <HAL_I2S_DMAResume>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
  /* Process Locked */
  __HAL_LOCK(hi2s);
 80029fc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d039      	beq.n	8002a78 <HAL_I2S_DMAResume+0x7c>
 8002a04:	2301      	movs	r3, #1
 8002a06:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002a0a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	6803      	ldr	r3, [r0, #0]
 8002a12:	d10f      	bne.n	8002a34 <HAL_I2S_DMAResume+0x38>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2,SPI_CR2_TXDMAEN);
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	f042 0202 	orr.w	r2, r2, #2
  }
  else if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8002a1a:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  /* If the I2S peripheral is still not enabled, enable it */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	0552      	lsls	r2, r2, #21
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002a20:	bf5e      	ittt	pl
 8002a22:	69da      	ldrpl	r2, [r3, #28]
 8002a24:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8002a28:	61da      	strpl	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
 8002a30:	4618      	mov	r0, r3
 8002a32:	4770      	bx	lr
  else if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002a34:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002a38:	2a04      	cmp	r2, #4
 8002a3a:	d103      	bne.n	8002a44 <HAL_I2S_DMAResume+0x48>
    SET_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	e7ea      	b.n	8002a1a <HAL_I2S_DMAResume+0x1e>
  else if(hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002a44:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002a48:	2a05      	cmp	r2, #5
 8002a4a:	d1e7      	bne.n	8002a1c <HAL_I2S_DMAResume+0x20>
    SET_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002a4c:	685a      	ldr	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002a4e:	490b      	ldr	r1, [pc, #44]	; (8002a7c <HAL_I2S_DMAResume+0x80>)
    SET_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002a50:	f042 0203 	orr.w	r2, r2, #3
 8002a54:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002a56:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <HAL_I2S_DMAResume+0x84>)
 8002a58:	428b      	cmp	r3, r1
 8002a5a:	bf18      	it	ne
 8002a5c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8002a60:	6851      	ldr	r1, [r2, #4]
 8002a62:	f041 0103 	orr.w	r1, r1, #3
 8002a66:	6051      	str	r1, [r2, #4]
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8002a68:	69d1      	ldr	r1, [r2, #28]
 8002a6a:	0549      	lsls	r1, r1, #21
      __HAL_I2SEXT_ENABLE(hi2s);
 8002a6c:	bf5e      	ittt	pl
 8002a6e:	69d1      	ldrpl	r1, [r2, #28]
 8002a70:	f441 6180 	orrpl.w	r1, r1, #1024	; 0x400
 8002a74:	61d1      	strpl	r1, [r2, #28]
 8002a76:	e7d1      	b.n	8002a1c <HAL_I2S_DMAResume+0x20>
  __HAL_LOCK(hi2s);
 8002a78:	2002      	movs	r0, #2
}
 8002a7a:	4770      	bx	lr
 8002a7c:	40003800 	.word	0x40003800
 8002a80:	40003400 	.word	0x40003400

08002a84 <HAL_I2S_DMAStop>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002a84:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002a88:	2b01      	cmp	r3, #1
{
 8002a8a:	b570      	push	{r4, r5, r6, lr}
 8002a8c:	4604      	mov	r4, r0
  __HAL_LOCK(hi2s);
 8002a8e:	d049      	beq.n	8002b24 <HAL_I2S_DMAStop+0xa0>
 8002a90:	2301      	movs	r3, #1
 8002a92:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002a96:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	6803      	ldr	r3, [r0, #0]
 8002a9e:	d114      	bne.n	8002aca <HAL_I2S_DMAStop+0x46>
  {
    /* Disable the I2S DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_TXDMAEN);
 8002aa0:	685a      	ldr	r2, [r3, #4]

    /* Disable the I2S DMA Channel */
    HAL_DMA_Abort(hi2s->hdmatx);
 8002aa2:	6b80      	ldr	r0, [r0, #56]	; 0x38
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_TXDMAEN);
 8002aa4:	f022 0202 	bic.w	r2, r2, #2
 8002aa8:	605a      	str	r2, [r3, #4]
  {
    /* Disable the I2S DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);

    /* Disable the I2S DMA Channel */
    HAL_DMA_Abort(hi2s->hdmarx);
 8002aaa:	f7fe fc8b 	bl	80013c4 <HAL_DMA_Abort>
    __HAL_I2SEXT_DISABLE(hi2s);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  /* Disable I2S peripheral */
  __HAL_I2S_DISABLE(hi2s);
 8002aae:	6822      	ldr	r2, [r4, #0]
 8002ab0:	69d3      	ldr	r3, [r2, #28]
 8002ab2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ab6:	041b      	lsls	r3, r3, #16
 8002ab8:	0c1b      	lsrs	r3, r3, #16
 8002aba:	61d3      	str	r3, [r2, #28]

  hi2s->State = HAL_I2S_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8002abc:	2000      	movs	r0, #0
  hi2s->State = HAL_I2S_STATE_READY;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2s);
 8002ac4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40

  return HAL_OK;
 8002ac8:	bd70      	pop	{r4, r5, r6, pc}
  else if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002aca:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002ace:	2a04      	cmp	r2, #4
 8002ad0:	d105      	bne.n	8002ade <HAL_I2S_DMAStop+0x5a>
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8002ad2:	685a      	ldr	r2, [r3, #4]
    HAL_DMA_Abort(hi2s->hdmarx);
 8002ad4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8002ad6:	f022 0201 	bic.w	r2, r2, #1
 8002ada:	605a      	str	r2, [r3, #4]
 8002adc:	e7e5      	b.n	8002aaa <HAL_I2S_DMAStop+0x26>
  else if(hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8002ade:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002ae2:	2a05      	cmp	r2, #5
 8002ae4:	d1e3      	bne.n	8002aae <HAL_I2S_DMAStop+0x2a>
    CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002ae6:	685a      	ldr	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002ae8:	4e0f      	ldr	r6, [pc, #60]	; (8002b28 <HAL_I2S_DMAStop+0xa4>)
 8002aea:	4d10      	ldr	r5, [pc, #64]	; (8002b2c <HAL_I2S_DMAStop+0xa8>)
    HAL_DMA_Abort(hi2s->hdmatx);
 8002aec:	6b80      	ldr	r0, [r0, #56]	; 0x38
    CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002aee:	f022 0203 	bic.w	r2, r2, #3
 8002af2:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002af4:	42b3      	cmp	r3, r6
 8002af6:	bf0c      	ite	eq
 8002af8:	462b      	moveq	r3, r5
 8002afa:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	f022 0203 	bic.w	r2, r2, #3
 8002b04:	605a      	str	r2, [r3, #4]
    HAL_DMA_Abort(hi2s->hdmatx);
 8002b06:	f7fe fc5d 	bl	80013c4 <HAL_DMA_Abort>
    HAL_DMA_Abort(hi2s->hdmarx);
 8002b0a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002b0c:	f7fe fc5a 	bl	80013c4 <HAL_DMA_Abort>
    __HAL_I2SEXT_DISABLE(hi2s);
 8002b10:	6823      	ldr	r3, [r4, #0]
 8002b12:	42b3      	cmp	r3, r6
 8002b14:	bf18      	it	ne
 8002b16:	f04f 2540 	movne.w	r5, #1073758208	; 0x40004000
 8002b1a:	69eb      	ldr	r3, [r5, #28]
 8002b1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b20:	61eb      	str	r3, [r5, #28]
 8002b22:	e7c4      	b.n	8002aae <HAL_I2S_DMAStop+0x2a>
  __HAL_LOCK(hi2s);
 8002b24:	2002      	movs	r0, #2
}
 8002b26:	bd70      	pop	{r4, r5, r6, pc}
 8002b28:	40003800 	.word	0x40003800
 8002b2c:	40003400 	.word	0x40003400

08002b30 <I2S_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b30:	b508      	push	{r3, lr}
  I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002b32:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002b34:	f005 fbc0 	bl	80082b8 <HAL_I2S_TxHalfCpltCallback>
 8002b38:	bd08      	pop	{r3, pc}

08002b3a <I2S_DMATxCplt>:
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002b3a:	6802      	ldr	r2, [r0, #0]
 8002b3c:	6812      	ldr	r2, [r2, #0]
 8002b3e:	f412 7280 	ands.w	r2, r2, #256	; 0x100
{
 8002b42:	b508      	push	{r3, lr}
  I2S_HandleTypeDef* hi2s = ( I2S_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b44:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002b46:	d108      	bne.n	8002b5a <I2S_DMATxCplt+0x20>
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_TXDMAEN);
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	6841      	ldr	r1, [r0, #4]
 8002b4c:	f021 0102 	bic.w	r1, r1, #2
 8002b50:	6041      	str	r1, [r0, #4]
    hi2s->TxXferCount = 0U;
 8002b52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State       = HAL_I2S_STATE_READY;
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f005 fba2 	bl	80082a4 <HAL_I2S_TxCpltCallback>
 8002b60:	bd08      	pop	{r3, pc}

08002b62 <I2S_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b62:	b508      	push	{r3, lr}
  I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002b64:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002b66:	f005 fcdb 	bl	8008520 <HAL_I2S_RxHalfCpltCallback>
 8002b6a:	bd08      	pop	{r3, pc}

08002b6c <I2S_DMARxCplt>:
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002b6c:	6802      	ldr	r2, [r0, #0]
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	f412 7280 	ands.w	r2, r2, #256	; 0x100
{
 8002b74:	b508      	push	{r3, lr}
  I2S_HandleTypeDef* hi2s = ( I2S_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b76:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002b78:	d108      	bne.n	8002b8c <I2S_DMARxCplt+0x20>
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	6841      	ldr	r1, [r0, #4]
 8002b7e:	f021 0101 	bic.w	r1, r1, #1
 8002b82:	6041      	str	r1, [r0, #4]
    hi2s->RxXferCount = 0U;
 8002b84:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State       = HAL_I2S_STATE_READY;
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  HAL_I2S_RxCpltCallback(hi2s);
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f005 fcc3 	bl	8008518 <HAL_I2S_RxCpltCallback>
 8002b92:	bd08      	pop	{r3, pc}

08002b94 <HAL_I2S_Init>:
{
 8002b94:	b570      	push	{r4, r5, r6, lr}
  if(hi2s == NULL)
 8002b96:	4604      	mov	r4, r0
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	d03f      	beq.n	8002c1c <HAL_I2S_Init+0x88>
  hi2s->State = HAL_I2S_STATE_BUSY;
 8002b9c:	2502      	movs	r5, #2
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002b9e:	4b41      	ldr	r3, [pc, #260]	; (8002ca4 <HAL_I2S_Init+0x110>)
  hi2s->State = HAL_I2S_STATE_BUSY;
 8002ba0:	f880 5041 	strb.w	r5, [r0, #65]	; 0x41
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002ba4:	6343      	str	r3, [r0, #52]	; 0x34
  HAL_I2S_MspInit(hi2s);
 8002ba6:	f7ff fe40 	bl	800282a <HAL_I2S_MspInit>
  CLEAR_BIT(hi2s->Instance->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002baa:	6822      	ldr	r2, [r4, #0]
 8002bac:	69d3      	ldr	r3, [r2, #28]
 8002bae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002bb2:	f023 030f 	bic.w	r3, r3, #15
 8002bb6:	61d3      	str	r3, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002bb8:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8002bba:	6215      	str	r5, [r2, #32]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002bbc:	2b02      	cmp	r3, #2
  tmpreg = hi2s->Instance->I2SCFGR;
 8002bbe:	69d5      	ldr	r5, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002bc0:	d035      	beq.n	8002c2e <HAL_I2S_Init+0x9a>
    if(hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002bc2:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
 8002bc4:	2b00      	cmp	r3, #0
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002bc6:	68a3      	ldr	r3, [r4, #8]
      packetlength = 16U;
 8002bc8:	bf14      	ite	ne
 8002bca:	2620      	movne	r6, #32
 8002bcc:	2610      	moveq	r6, #16
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002bce:	2001      	movs	r0, #1
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002bd0:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8002bd2:	bf98      	it	ls
 8002bd4:	0076      	lslls	r6, r6, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002bd6:	f000 fdb3 	bl	8003740 <HAL_RCCEx_GetPeriphCLKFreq>
    if(hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002bda:	6923      	ldr	r3, [r4, #16]
 8002bdc:	6961      	ldr	r1, [r4, #20]
 8002bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be2:	d11f      	bne.n	8002c24 <HAL_I2S_Init+0x90>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002be4:	68e3      	ldr	r3, [r4, #12]
 8002be6:	220a      	movs	r2, #10
 8002be8:	b1d3      	cbz	r3, 8002c20 <HAL_I2S_Init+0x8c>
        tmp = (uint32_t)(((((i2sclk / (packetlength*4)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8002bea:	00b3      	lsls	r3, r6, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8002bec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf0:	4353      	muls	r3, r2
    tmp = tmp / 10U;
 8002bf2:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8002bf4:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bf8:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8002bfa:	fbb3 f3f2 	udiv	r3, r3, r2
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2U);
 8002bfe:	f003 0201 	and.w	r2, r3, #1
    i2sodd = (uint32_t) (i2sodd << 8U);
 8002c02:	0212      	lsls	r2, r2, #8
 8002c04:	f3c3 034f 	ubfx	r3, r3, #1, #16
  if((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002c08:	1e99      	subs	r1, r3, #2
 8002c0a:	29fd      	cmp	r1, #253	; 0xfd
 8002c0c:	d911      	bls.n	8002c32 <HAL_I2S_Init+0x9e>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002c0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c10:	f043 0310 	orr.w	r3, r3, #16
 8002c14:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_I2S_ErrorCallback(hi2s);
 8002c16:	4620      	mov	r0, r4
 8002c18:	f005 fc88 	bl	800852c <HAL_I2S_ErrorCallback>
    return HAL_ERROR;
 8002c1c:	2001      	movs	r0, #1
}
 8002c1e:	bd70      	pop	{r4, r5, r6, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8002c20:	00f3      	lsls	r3, r6, #3
 8002c22:	e7e3      	b.n	8002bec <HAL_I2S_Init+0x58>
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8002c24:	230a      	movs	r3, #10
 8002c26:	fbb0 f0f6 	udiv	r0, r0, r6
 8002c2a:	4343      	muls	r3, r0
 8002c2c:	e7e1      	b.n	8002bf2 <HAL_I2S_Init+0x5e>
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
 8002c2e:	2200      	movs	r2, #0
 8002c30:	e7ea      	b.n	8002c08 <HAL_I2S_Init+0x74>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002c32:	4313      	orrs	r3, r2
 8002c34:	6922      	ldr	r2, [r4, #16]
 8002c36:	6820      	ldr	r0, [r4, #0]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8002c38:	6866      	ldr	r6, [r4, #4]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	6203      	str	r3, [r0, #32]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002c3e:	68e2      	ldr	r2, [r4, #12]
 8002c40:	68a3      	ldr	r3, [r4, #8]
 8002c42:	4313      	orrs	r3, r2
                       (uint16_t)hi2s->Init.CPOL))));
 8002c44:	69a2      	ldr	r2, [r4, #24]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002c46:	4313      	orrs	r3, r2
 8002c48:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8002c4a:	f446 6100 	orr.w	r1, r6, #2048	; 0x800
 8002c4e:	4319      	orrs	r1, r3
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002c50:	6a22      	ldr	r2, [r4, #32]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8002c52:	b289      	uxth	r1, r1
 8002c54:	430d      	orrs	r5, r1
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002c56:	2a01      	cmp	r2, #1
  WRITE_REG(hi2s->Instance->I2SCFGR, tmpreg);
 8002c58:	61c5      	str	r5, [r0, #28]
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002c5a:	d11c      	bne.n	8002c96 <HAL_I2S_Init+0x102>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002c5c:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <HAL_I2S_Init+0x114>)
 8002c5e:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002c60:	4912      	ldr	r1, [pc, #72]	; (8002cac <HAL_I2S_Init+0x118>)
 8002c62:	4a13      	ldr	r2, [pc, #76]	; (8002cb0 <HAL_I2S_Init+0x11c>)
 8002c64:	4288      	cmp	r0, r1
 8002c66:	bf18      	it	ne
 8002c68:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      tmp = I2S_MODE_SLAVE_TX;
 8002c6c:	f436 7000 	bics.w	r0, r6, #512	; 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002c70:	69d1      	ldr	r1, [r2, #28]
 8002c72:	f421 617b 	bic.w	r1, r1, #4016	; 0xfb0
 8002c76:	f021 010f 	bic.w	r1, r1, #15
 8002c7a:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002c7c:	f04f 0102 	mov.w	r1, #2
 8002c80:	6211      	str	r1, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002c82:	69d1      	ldr	r1, [r2, #28]
      tmp = I2S_MODE_SLAVE_TX;
 8002c84:	bf0c      	ite	eq
 8002c86:	f44f 7080 	moveq.w	r0, #256	; 0x100
 8002c8a:	2000      	movne	r0, #0
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002c8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c90:	4303      	orrs	r3, r0
 8002c92:	430b      	orrs	r3, r1
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR,tmpreg);
 8002c94:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002c96:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8002c98:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002c9a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002c9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 8002ca0:	bd70      	pop	{r4, r5, r6, pc}
 8002ca2:	bf00      	nop
 8002ca4:	08002cb5 	.word	0x08002cb5
 8002ca8:	08002df1 	.word	0x08002df1
 8002cac:	40003800 	.word	0x40003800
 8002cb0:	40003400 	.word	0x40003400

08002cb4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002cb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002cb6:	6803      	ldr	r3, [r0, #0]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	9201      	str	r2, [sp, #4]

  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002cbc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002cc0:	2a04      	cmp	r2, #4
{
 8002cc2:	4604      	mov	r4, r0
  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002cc4:	d13a      	bne.n	8002d3c <I2S_IRQHandler+0x88>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002cc6:	9a01      	ldr	r2, [sp, #4]
 8002cc8:	07d1      	lsls	r1, r2, #31
 8002cca:	d519      	bpl.n	8002d00 <I2S_IRQHandler+0x4c>
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	0652      	lsls	r2, r2, #25
 8002cd0:	d516      	bpl.n	8002d00 <I2S_IRQHandler+0x4c>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002cd2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002cd4:	1c91      	adds	r1, r2, #2
 8002cd6:	62c1      	str	r1, [r0, #44]	; 0x2c
 8002cd8:	68d9      	ldr	r1, [r3, #12]
 8002cda:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8002cdc:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8002cde:	3a01      	subs	r2, #1
 8002ce0:	b292      	uxth	r2, r2
 8002ce2:	8642      	strh	r2, [r0, #50]	; 0x32
  if(hi2s->RxXferCount == 0U)
 8002ce4:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8002ce6:	b292      	uxth	r2, r2
 8002ce8:	b952      	cbnz	r2, 8002d00 <I2S_IRQHandler+0x4c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cf0:	0412      	lsls	r2, r2, #16
 8002cf2:	0c12      	lsrs	r2, r2, #16
 8002cf4:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8002cfc:	f005 fc0c 	bl	8008518 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occured -------------------------------------*/
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002d00:	9b01      	ldr	r3, [sp, #4]
 8002d02:	0659      	lsls	r1, r3, #25
 8002d04:	d51a      	bpl.n	8002d3c <I2S_IRQHandler+0x88>
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	0692      	lsls	r2, r2, #26
 8002d0c:	d516      	bpl.n	8002d3c <I2S_IRQHandler+0x88>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d14:	0412      	lsls	r2, r2, #16
 8002d16:	0c12      	lsrs	r2, r2, #16
 8002d18:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	9202      	str	r2, [sp, #8]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	9202      	str	r2, [sp, #8]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	9302      	str	r3, [sp, #8]
 8002d26:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8002d2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002d36:	4620      	mov	r0, r4
 8002d38:	f005 fbf8 	bl	800852c <HAL_I2S_ErrorCallback>
      }
    }

    if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002d3c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d13a      	bne.n	8002dba <I2S_IRQHandler+0x106>
    {
      /* I2S in mode Transmitter -----------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002d44:	9b01      	ldr	r3, [sp, #4]
 8002d46:	079b      	lsls	r3, r3, #30
 8002d48:	d51b      	bpl.n	8002d82 <I2S_IRQHandler+0xce>
 8002d4a:	6822      	ldr	r2, [r4, #0]
 8002d4c:	6853      	ldr	r3, [r2, #4]
 8002d4e:	0618      	lsls	r0, r3, #24
 8002d50:	d517      	bpl.n	8002d82 <I2S_IRQHandler+0xce>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002d52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d54:	1c99      	adds	r1, r3, #2
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	6261      	str	r1, [r4, #36]	; 0x24
 8002d5a:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8002d5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	8563      	strh	r3, [r4, #42]	; 0x2a
  if(hi2s->TxXferCount == 0U)
 8002d64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	b95b      	cbnz	r3, 8002d82 <I2S_IRQHandler+0xce>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d6a:	6853      	ldr	r3, [r2, #4]
 8002d6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d70:	041b      	lsls	r3, r3, #16
 8002d72:	0c1b      	lsrs	r3, r3, #16
 8002d74:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f005 fa91 	bl	80082a4 <HAL_I2S_TxCpltCallback>
      {
        I2S_Transmit_IT(hi2s);
      }

      /* I2S Underrun error interrupt occurred --------------------------------*/
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002d82:	9b01      	ldr	r3, [sp, #4]
 8002d84:	0719      	lsls	r1, r3, #28
 8002d86:	d518      	bpl.n	8002dba <I2S_IRQHandler+0x106>
 8002d88:	6823      	ldr	r3, [r4, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	0692      	lsls	r2, r2, #26
 8002d8e:	d514      	bpl.n	8002dba <I2S_IRQHandler+0x106>
      {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d96:	0412      	lsls	r2, r2, #16
 8002d98:	0c12      	lsrs	r2, r2, #16
 8002d9a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	9203      	str	r2, [sp, #12]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	9303      	str	r3, [sp, #12]
 8002da4:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002da6:	2301      	movs	r3, #1
 8002da8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002dac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002dae:	f043 0304 	orr.w	r3, r3, #4
 8002db2:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002db4:	4620      	mov	r0, r4
 8002db6:	f005 fbb9 	bl	800852c <HAL_I2S_ErrorCallback>
    }
  }
}
 8002dba:	b004      	add	sp, #16
 8002dbc:	bd10      	pop	{r4, pc}

08002dbe <I2S_DMAError>:
  I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8002dbe:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002dc0:	6802      	ldr	r2, [r0, #0]
{
 8002dc2:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002dc4:	6853      	ldr	r3, [r2, #4]
 8002dc6:	f023 0303 	bic.w	r3, r3, #3
 8002dca:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002dd0:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State= HAL_I2S_STATE_READY;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_DMA);
 8002dd8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002dda:	f043 0308 	orr.w	r3, r3, #8
 8002dde:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8002de0:	f005 fba4 	bl	800852c <HAL_I2S_ErrorCallback>
 8002de4:	bd08      	pop	{r3, pc}

08002de6 <HAL_I2S_GetState>:
  return hi2s->State;
 8002de6:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8002dea:	4770      	bx	lr

08002dec <HAL_I2SEx_TxRxCpltCallback>:
  * @brief Tx and Rx Transfer completed callback
  * @param hi2s: I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002dec:	4770      	bx	lr
	...

08002df0 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8002df0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 8002df2:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8002df4:	4992      	ldr	r1, [pc, #584]	; (8003040 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	9200      	str	r2, [sp, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8002dfa:	4a92      	ldr	r2, [pc, #584]	; (8003044 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8002dfc:	428b      	cmp	r3, r1
 8002dfe:	bf18      	it	ne
 8002e00:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
{
 8002e04:	4604      	mov	r4, r0
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8002e06:	6891      	ldr	r1, [r2, #8]
 8002e08:	9101      	str	r1, [sp, #4]
  if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX)
 8002e0a:	69d9      	ldr	r1, [r3, #28]
 8002e0c:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8002e10:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002e14:	d004      	beq.n	8002e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x30>
      || ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002e16:	69d9      	ldr	r1, [r3, #28]
 8002e18:	f411 7f40 	tst.w	r1, #768	; 0x300
 8002e1c:	f040 8097 	bne.w	8002f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x15e>
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002e20:	9a00      	ldr	r2, [sp, #0]
 8002e22:	0792      	lsls	r2, r2, #30
 8002e24:	d51d      	bpl.n	8002e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	0610      	lsls	r0, r2, #24
 8002e2a:	d51a      	bpl.n	8002e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
static void I2SEx_FullDuplexTx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
  if(i2sUsed == I2S_USE_I2S)
  {
    /* Write Data on DR register */
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e2e:	1c91      	adds	r1, r2, #2
 8002e30:	8812      	ldrh	r2, [r2, #0]
 8002e32:	6261      	str	r1, [r4, #36]	; 0x24
 8002e34:	60da      	str	r2, [r3, #12]
    hi2s->TxXferCount--;
 8002e36:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002e38:	3a01      	subs	r2, #1
 8002e3a:	b292      	uxth	r2, r2
 8002e3c:	8562      	strh	r2, [r4, #42]	; 0x2a

    if(hi2s->TxXferCount == 0U)
 8002e3e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002e40:	b292      	uxth	r2, r2
 8002e42:	b972      	cbnz	r2, 8002e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e4a:	0412      	lsls	r2, r2, #16
 8002e4c:	0c12      	lsrs	r2, r2, #16
 8002e4e:	605a      	str	r2, [r3, #4]

      if(hi2s->RxXferCount == 0U)
 8002e50:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	b92b      	cbnz	r3, 8002e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8002e56:	2301      	movs	r3, #1
 8002e58:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f7ff ffc5 	bl	8002dec <HAL_I2SEx_TxRxCpltCallback>
    if(((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002e62:	9b01      	ldr	r3, [sp, #4]
 8002e64:	07d9      	lsls	r1, r3, #31
 8002e66:	d522      	bpl.n	8002eae <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
 8002e68:	4a75      	ldr	r2, [pc, #468]	; (8003040 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8002e6a:	6821      	ldr	r1, [r4, #0]
 8002e6c:	4b75      	ldr	r3, [pc, #468]	; (8003044 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8002e6e:	4291      	cmp	r1, r2
 8002e70:	bf18      	it	ne
 8002e72:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	0652      	lsls	r2, r2, #25
 8002e7a:	d518      	bpl.n	8002eae <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
    }
  }
  else
  {
    /* Read Data from DR register */
    (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002e7c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e7e:	1c91      	adds	r1, r2, #2
 8002e80:	62e1      	str	r1, [r4, #44]	; 0x2c
 8002e82:	68d9      	ldr	r1, [r3, #12]
 8002e84:	8011      	strh	r1, [r2, #0]
    hi2s->RxXferCount--;
 8002e86:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8002e88:	3a01      	subs	r2, #1
 8002e8a:	b292      	uxth	r2, r2
 8002e8c:	8662      	strh	r2, [r4, #50]	; 0x32

    if(hi2s->RxXferCount == 0U)
 8002e8e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8002e90:	b292      	uxth	r2, r2
 8002e92:	b962      	cbnz	r2, 8002eae <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
    {
      /* Disable I2Sext RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e9a:	605a      	str	r2, [r3, #4]

      if(hi2s->TxXferCount == 0U)
 8002e9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	b92b      	cbnz	r3, 8002eae <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f7ff ff9f 	bl	8002dec <HAL_I2SEx_TxRxCpltCallback>
    if(((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002eae:	9b01      	ldr	r3, [sp, #4]
 8002eb0:	0658      	lsls	r0, r3, #25
 8002eb2:	d524      	bpl.n	8002efe <HAL_I2SEx_FullDuplex_IRQHandler+0x10e>
 8002eb4:	4962      	ldr	r1, [pc, #392]	; (8003040 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8002eb6:	6823      	ldr	r3, [r4, #0]
 8002eb8:	4a62      	ldr	r2, [pc, #392]	; (8003044 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8002eba:	428b      	cmp	r3, r1
 8002ebc:	bf18      	it	ne
 8002ebe:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8002ec2:	6851      	ldr	r1, [r2, #4]
 8002ec4:	0689      	lsls	r1, r1, #26
 8002ec6:	d51a      	bpl.n	8002efe <HAL_I2SEx_FullDuplex_IRQHandler+0x10e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ec8:	6851      	ldr	r1, [r2, #4]
 8002eca:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8002ece:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ed6:	0412      	lsls	r2, r2, #16
 8002ed8:	0c12      	lsrs	r2, r2, #16
 8002eda:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002edc:	2200      	movs	r2, #0
 8002ede:	9202      	str	r2, [sp, #8]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	9202      	str	r2, [sp, #8]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	9302      	str	r3, [sp, #8]
 8002ee8:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8002eea:	2301      	movs	r3, #1
 8002eec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8002ef0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ef2:	f043 0302 	orr.w	r3, r3, #2
 8002ef6:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002ef8:	4620      	mov	r0, r4
 8002efa:	f005 fb17 	bl	800852c <HAL_I2S_ErrorCallback>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002efe:	9b00      	ldr	r3, [sp, #0]
 8002f00:	071b      	lsls	r3, r3, #28
 8002f02:	d522      	bpl.n	8002f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	0690      	lsls	r0, r2, #26
 8002f0a:	d51e      	bpl.n	8002f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f0c:	685a      	ldr	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f0e:	494c      	ldr	r1, [pc, #304]	; (8003040 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f14:	0412      	lsls	r2, r2, #16
 8002f16:	0c12      	lsrs	r2, r2, #16
 8002f18:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f1a:	4a4a      	ldr	r2, [pc, #296]	; (8003044 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8002f1c:	428b      	cmp	r3, r1
 8002f1e:	bf18      	it	ne
 8002f20:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8002f24:	6851      	ldr	r1, [r2, #4]
 8002f26:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8002f2a:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	9203      	str	r2, [sp, #12]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	9303      	str	r3, [sp, #12]
 8002f34:	9b03      	ldr	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8002f36:	2301      	movs	r3, #1
 8002f38:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 8002f3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f3e:	f043 0304 	orr.w	r3, r3, #4
 8002f42:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002f44:	4620      	mov	r0, r4
 8002f46:	f005 faf1 	bl	800852c <HAL_I2S_ErrorCallback>
}
 8002f4a:	b004      	add	sp, #16
 8002f4c:	bd10      	pop	{r4, pc}
    if(((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002f4e:	9b01      	ldr	r3, [sp, #4]
 8002f50:	0799      	lsls	r1, r3, #30
 8002f52:	d51a      	bpl.n	8002f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
 8002f54:	6853      	ldr	r3, [r2, #4]
 8002f56:	061b      	lsls	r3, r3, #24
 8002f58:	d517      	bpl.n	8002f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
    I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002f5a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002f5c:	1c99      	adds	r1, r3, #2
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	6241      	str	r1, [r0, #36]	; 0x24
 8002f62:	60d3      	str	r3, [r2, #12]
    hi2s->TxXferCount--;
 8002f64:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(hi2s->TxXferCount == 0U)
 8002f6c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	b95b      	cbnz	r3, 8002f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f72:	6853      	ldr	r3, [r2, #4]
 8002f74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f78:	6053      	str	r3, [r2, #4]
      if(hi2s->RxXferCount == 0U)
 8002f7a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	b923      	cbnz	r3, 8002f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
        hi2s->State = HAL_I2S_STATE_READY;
 8002f80:	2301      	movs	r3, #1
 8002f82:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f86:	f7ff ff31 	bl	8002dec <HAL_I2SEx_TxRxCpltCallback>
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002f8a:	9b00      	ldr	r3, [sp, #0]
 8002f8c:	07d8      	lsls	r0, r3, #31
 8002f8e:	d51e      	bpl.n	8002fce <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
 8002f90:	6822      	ldr	r2, [r4, #0]
 8002f92:	6853      	ldr	r3, [r2, #4]
 8002f94:	0659      	lsls	r1, r3, #25
 8002f96:	d51a      	bpl.n	8002fce <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
    (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f9a:	1c99      	adds	r1, r3, #2
 8002f9c:	62e1      	str	r1, [r4, #44]	; 0x2c
 8002f9e:	68d1      	ldr	r1, [r2, #12]
 8002fa0:	8019      	strh	r1, [r3, #0]
    hi2s->RxXferCount--;
 8002fa2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	8663      	strh	r3, [r4, #50]	; 0x32
    if(hi2s->RxXferCount == 0U)
 8002faa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	b973      	cbnz	r3, 8002fce <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fb0:	6853      	ldr	r3, [r2, #4]
 8002fb2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002fb6:	041b      	lsls	r3, r3, #16
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	6053      	str	r3, [r2, #4]
      if(hi2s->TxXferCount == 0U)
 8002fbc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	b92b      	cbnz	r3, 8002fce <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
        hi2s->State = HAL_I2S_STATE_READY;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f7ff ff0f 	bl	8002dec <HAL_I2SEx_TxRxCpltCallback>
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002fce:	9b00      	ldr	r3, [sp, #0]
 8002fd0:	065a      	lsls	r2, r3, #25
 8002fd2:	d51d      	bpl.n	8003010 <HAL_I2SEx_FullDuplex_IRQHandler+0x220>
 8002fd4:	6822      	ldr	r2, [r4, #0]
 8002fd6:	6853      	ldr	r3, [r2, #4]
 8002fd8:	069b      	lsls	r3, r3, #26
 8002fda:	d519      	bpl.n	8003010 <HAL_I2SEx_FullDuplex_IRQHandler+0x220>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fdc:	6853      	ldr	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fde:	4918      	ldr	r1, [pc, #96]	; (8003040 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fe0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002fe4:	041b      	lsls	r3, r3, #16
 8002fe6:	0c1b      	lsrs	r3, r3, #16
 8002fe8:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fea:	4b16      	ldr	r3, [pc, #88]	; (8003044 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8002fec:	428a      	cmp	r2, r1
 8002fee:	bf18      	it	ne
 8002ff0:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8002ff4:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ffc:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002ffe:	2301      	movs	r3, #1
 8003000:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8003004:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003006:	f043 0302 	orr.w	r3, r3, #2
 800300a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800300c:	f005 fa8e 	bl	800852c <HAL_I2S_ErrorCallback>
    if(((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003010:	9b01      	ldr	r3, [sp, #4]
 8003012:	0718      	lsls	r0, r3, #28
 8003014:	d599      	bpl.n	8002f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003016:	490a      	ldr	r1, [pc, #40]	; (8003040 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8003018:	6822      	ldr	r2, [r4, #0]
 800301a:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 800301c:	428a      	cmp	r2, r1
 800301e:	bf18      	it	ne
 8003020:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8003024:	6859      	ldr	r1, [r3, #4]
 8003026:	0689      	lsls	r1, r1, #26
 8003028:	d58f      	bpl.n	8002f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8003030:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003032:	6853      	ldr	r3, [r2, #4]
 8003034:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003038:	041b      	lsls	r3, r3, #16
 800303a:	0c1b      	lsrs	r3, r3, #16
 800303c:	6053      	str	r3, [r2, #4]
 800303e:	e77a      	b.n	8002f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003040:	40003800 	.word	0x40003800
 8003044:	40003400 	.word	0x40003400

08003048 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003048:	6803      	ldr	r3, [r0, #0]
{
 800304a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800304c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800304e:	07d8      	lsls	r0, r3, #31
 8003050:	d43b      	bmi.n	80030ca <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	0799      	lsls	r1, r3, #30
 8003056:	f100 8086 	bmi.w	8003166 <HAL_RCC_OscConfig+0x11e>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	071e      	lsls	r6, r3, #28
 800305e:	f100 80d1 	bmi.w	8003204 <HAL_RCC_OscConfig+0x1bc>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003062:	6823      	ldr	r3, [r4, #0]
 8003064:	075d      	lsls	r5, r3, #29
 8003066:	d52a      	bpl.n	80030be <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003068:	2300      	movs	r3, #0
 800306a:	9301      	str	r3, [sp, #4]
 800306c:	4b8e      	ldr	r3, [pc, #568]	; (80032a8 <HAL_RCC_OscConfig+0x260>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800306e:	4d8f      	ldr	r5, [pc, #572]	; (80032ac <HAL_RCC_OscConfig+0x264>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003072:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003076:	641a      	str	r2, [r3, #64]	; 0x40
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307e:	9301      	str	r3, [sp, #4]
 8003080:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8003082:	682b      	ldr	r3, [r5, #0]
 8003084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003088:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 800308a:	f7fe f827 	bl	80010dc <HAL_GetTick>
 800308e:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003090:	682b      	ldr	r3, [r5, #0]
 8003092:	05da      	lsls	r2, r3, #23
 8003094:	f140 80d8 	bpl.w	8003248 <HAL_RCC_OscConfig+0x200>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003098:	68a3      	ldr	r3, [r4, #8]
 800309a:	4d83      	ldr	r5, [pc, #524]	; (80032a8 <HAL_RCC_OscConfig+0x260>)
 800309c:	2b01      	cmp	r3, #1
 800309e:	f040 80da 	bne.w	8003256 <HAL_RCC_OscConfig+0x20e>
 80030a2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030aa:	f7fe f817 	bl	80010dc <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ae:	4d7e      	ldr	r5, [pc, #504]	; (80032a8 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 80030b0:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b2:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80030b8:	079b      	lsls	r3, r3, #30
 80030ba:	f140 80ed 	bpl.w	8003298 <HAL_RCC_OscConfig+0x250>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030be:	69a2      	ldr	r2, [r4, #24]
 80030c0:	2a00      	cmp	r2, #0
 80030c2:	f040 80f9 	bne.w	80032b8 <HAL_RCC_OscConfig+0x270>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80030c6:	2000      	movs	r0, #0
 80030c8:	e015      	b.n	80030f6 <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ca:	4b77      	ldr	r3, [pc, #476]	; (80032a8 <HAL_RCC_OscConfig+0x260>)
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	f002 020c 	and.w	r2, r2, #12
 80030d2:	2a04      	cmp	r2, #4
 80030d4:	d007      	beq.n	80030e6 <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030dc:	2a08      	cmp	r2, #8
 80030de:	d10c      	bne.n	80030fa <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	025a      	lsls	r2, r3, #9
 80030e4:	d509      	bpl.n	80030fa <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e6:	4b70      	ldr	r3, [pc, #448]	; (80032a8 <HAL_RCC_OscConfig+0x260>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	039b      	lsls	r3, r3, #14
 80030ec:	d5b1      	bpl.n	8003052 <HAL_RCC_OscConfig+0xa>
 80030ee:	6863      	ldr	r3, [r4, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1ae      	bne.n	8003052 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 80030f4:	2001      	movs	r0, #1
}
 80030f6:	b003      	add	sp, #12
 80030f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030fa:	6863      	ldr	r3, [r4, #4]
 80030fc:	4d6a      	ldr	r5, [pc, #424]	; (80032a8 <HAL_RCC_OscConfig+0x260>)
 80030fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003102:	d111      	bne.n	8003128 <HAL_RCC_OscConfig+0xe0>
 8003104:	682b      	ldr	r3, [r5, #0]
 8003106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800310c:	f7fd ffe6 	bl	80010dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003110:	4d65      	ldr	r5, [pc, #404]	; (80032a8 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8003112:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003114:	682b      	ldr	r3, [r5, #0]
 8003116:	039f      	lsls	r7, r3, #14
 8003118:	d49b      	bmi.n	8003052 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800311a:	f7fd ffdf 	bl	80010dc <HAL_GetTick>
 800311e:	1b80      	subs	r0, r0, r6
 8003120:	2864      	cmp	r0, #100	; 0x64
 8003122:	d9f7      	bls.n	8003114 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8003124:	2003      	movs	r0, #3
 8003126:	e7e6      	b.n	80030f6 <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800312c:	d104      	bne.n	8003138 <HAL_RCC_OscConfig+0xf0>
 800312e:	682b      	ldr	r3, [r5, #0]
 8003130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003134:	602b      	str	r3, [r5, #0]
 8003136:	e7e5      	b.n	8003104 <HAL_RCC_OscConfig+0xbc>
 8003138:	682a      	ldr	r2, [r5, #0]
 800313a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800313e:	602a      	str	r2, [r5, #0]
 8003140:	682a      	ldr	r2, [r5, #0]
 8003142:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003146:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1df      	bne.n	800310c <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 800314c:	f7fd ffc6 	bl	80010dc <HAL_GetTick>
 8003150:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003152:	682b      	ldr	r3, [r5, #0]
 8003154:	0398      	lsls	r0, r3, #14
 8003156:	f57f af7c 	bpl.w	8003052 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800315a:	f7fd ffbf 	bl	80010dc <HAL_GetTick>
 800315e:	1b80      	subs	r0, r0, r6
 8003160:	2864      	cmp	r0, #100	; 0x64
 8003162:	d9f6      	bls.n	8003152 <HAL_RCC_OscConfig+0x10a>
 8003164:	e7de      	b.n	8003124 <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003166:	4b50      	ldr	r3, [pc, #320]	; (80032a8 <HAL_RCC_OscConfig+0x260>)
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	f012 0f0c 	tst.w	r2, #12
 800316e:	d007      	beq.n	8003180 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003176:	2a08      	cmp	r2, #8
 8003178:	d116      	bne.n	80031a8 <HAL_RCC_OscConfig+0x160>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	0259      	lsls	r1, r3, #9
 800317e:	d413      	bmi.n	80031a8 <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003180:	4b49      	ldr	r3, [pc, #292]	; (80032a8 <HAL_RCC_OscConfig+0x260>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	0792      	lsls	r2, r2, #30
 8003186:	d502      	bpl.n	800318e <HAL_RCC_OscConfig+0x146>
 8003188:	68e2      	ldr	r2, [r4, #12]
 800318a:	2a01      	cmp	r2, #1
 800318c:	d1b2      	bne.n	80030f4 <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318e:	6818      	ldr	r0, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	22f8      	movs	r2, #248	; 0xf8
 8003192:	fa92 f2a2 	rbit	r2, r2
 8003196:	fab2 f182 	clz	r1, r2
 800319a:	6922      	ldr	r2, [r4, #16]
 800319c:	408a      	lsls	r2, r1
 800319e:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 80031a2:	430a      	orrs	r2, r1
 80031a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a6:	e758      	b.n	800305a <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031a8:	68e2      	ldr	r2, [r4, #12]
 80031aa:	4b41      	ldr	r3, [pc, #260]	; (80032b0 <HAL_RCC_OscConfig+0x268>)
 80031ac:	b1da      	cbz	r2, 80031e6 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_ENABLE();
 80031ae:	2201      	movs	r2, #1
 80031b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80031b2:	f7fd ff93 	bl	80010dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b6:	4d3c      	ldr	r5, [pc, #240]	; (80032a8 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80031b8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ba:	682b      	ldr	r3, [r5, #0]
 80031bc:	079b      	lsls	r3, r3, #30
 80031be:	d50c      	bpl.n	80031da <HAL_RCC_OscConfig+0x192>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c0:	6829      	ldr	r1, [r5, #0]
 80031c2:	23f8      	movs	r3, #248	; 0xf8
 80031c4:	fa93 f3a3 	rbit	r3, r3
 80031c8:	fab3 f283 	clz	r2, r3
 80031cc:	6923      	ldr	r3, [r4, #16]
 80031ce:	4093      	lsls	r3, r2
 80031d0:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80031d4:	4313      	orrs	r3, r2
 80031d6:	602b      	str	r3, [r5, #0]
 80031d8:	e73f      	b.n	800305a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031da:	f7fd ff7f 	bl	80010dc <HAL_GetTick>
 80031de:	1b80      	subs	r0, r0, r6
 80031e0:	2802      	cmp	r0, #2
 80031e2:	d9ea      	bls.n	80031ba <HAL_RCC_OscConfig+0x172>
 80031e4:	e79e      	b.n	8003124 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 80031e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80031e8:	f7fd ff78 	bl	80010dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ec:	4d2e      	ldr	r5, [pc, #184]	; (80032a8 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 80031ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f0:	682b      	ldr	r3, [r5, #0]
 80031f2:	079f      	lsls	r7, r3, #30
 80031f4:	f57f af31 	bpl.w	800305a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031f8:	f7fd ff70 	bl	80010dc <HAL_GetTick>
 80031fc:	1b80      	subs	r0, r0, r6
 80031fe:	2802      	cmp	r0, #2
 8003200:	d9f6      	bls.n	80031f0 <HAL_RCC_OscConfig+0x1a8>
 8003202:	e78f      	b.n	8003124 <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003204:	6962      	ldr	r2, [r4, #20]
 8003206:	4b2b      	ldr	r3, [pc, #172]	; (80032b4 <HAL_RCC_OscConfig+0x26c>)
 8003208:	b17a      	cbz	r2, 800322a <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800320e:	f7fd ff65 	bl	80010dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003212:	4d25      	ldr	r5, [pc, #148]	; (80032a8 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8003214:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003216:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003218:	0798      	lsls	r0, r3, #30
 800321a:	f53f af22 	bmi.w	8003062 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800321e:	f7fd ff5d 	bl	80010dc <HAL_GetTick>
 8003222:	1b80      	subs	r0, r0, r6
 8003224:	2802      	cmp	r0, #2
 8003226:	d9f6      	bls.n	8003216 <HAL_RCC_OscConfig+0x1ce>
 8003228:	e77c      	b.n	8003124 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 800322a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800322c:	f7fd ff56 	bl	80010dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003230:	4d1d      	ldr	r5, [pc, #116]	; (80032a8 <HAL_RCC_OscConfig+0x260>)
      tickstart = HAL_GetTick();
 8003232:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003234:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003236:	0799      	lsls	r1, r3, #30
 8003238:	f57f af13 	bpl.w	8003062 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800323c:	f7fd ff4e 	bl	80010dc <HAL_GetTick>
 8003240:	1b80      	subs	r0, r0, r6
 8003242:	2802      	cmp	r0, #2
 8003244:	d9f6      	bls.n	8003234 <HAL_RCC_OscConfig+0x1ec>
 8003246:	e76d      	b.n	8003124 <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003248:	f7fd ff48 	bl	80010dc <HAL_GetTick>
 800324c:	1b80      	subs	r0, r0, r6
 800324e:	2802      	cmp	r0, #2
 8003250:	f67f af1e 	bls.w	8003090 <HAL_RCC_OscConfig+0x48>
 8003254:	e766      	b.n	8003124 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003256:	2b05      	cmp	r3, #5
 8003258:	d104      	bne.n	8003264 <HAL_RCC_OscConfig+0x21c>
 800325a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800325c:	f043 0304 	orr.w	r3, r3, #4
 8003260:	672b      	str	r3, [r5, #112]	; 0x70
 8003262:	e71e      	b.n	80030a2 <HAL_RCC_OscConfig+0x5a>
 8003264:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003266:	f022 0201 	bic.w	r2, r2, #1
 800326a:	672a      	str	r2, [r5, #112]	; 0x70
 800326c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800326e:	f022 0204 	bic.w	r2, r2, #4
 8003272:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003274:	2b00      	cmp	r3, #0
 8003276:	f47f af18 	bne.w	80030aa <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 800327a:	f7fd ff2f 	bl	80010dc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003282:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003284:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003286:	0798      	lsls	r0, r3, #30
 8003288:	f57f af19 	bpl.w	80030be <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800328c:	f7fd ff26 	bl	80010dc <HAL_GetTick>
 8003290:	1b80      	subs	r0, r0, r6
 8003292:	42b8      	cmp	r0, r7
 8003294:	d9f6      	bls.n	8003284 <HAL_RCC_OscConfig+0x23c>
 8003296:	e745      	b.n	8003124 <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003298:	f7fd ff20 	bl	80010dc <HAL_GetTick>
 800329c:	1b80      	subs	r0, r0, r6
 800329e:	42b8      	cmp	r0, r7
 80032a0:	f67f af09 	bls.w	80030b6 <HAL_RCC_OscConfig+0x6e>
 80032a4:	e73e      	b.n	8003124 <HAL_RCC_OscConfig+0xdc>
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800
 80032ac:	40007000 	.word	0x40007000
 80032b0:	42470000 	.word	0x42470000
 80032b4:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032b8:	4d2b      	ldr	r5, [pc, #172]	; (8003368 <HAL_RCC_OscConfig+0x320>)
 80032ba:	68ab      	ldr	r3, [r5, #8]
 80032bc:	f003 030c 	and.w	r3, r3, #12
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	f43f af17 	beq.w	80030f4 <HAL_RCC_OscConfig+0xac>
 80032c6:	4e29      	ldr	r6, [pc, #164]	; (800336c <HAL_RCC_OscConfig+0x324>)
 80032c8:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ca:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80032cc:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ce:	d13e      	bne.n	800334e <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 80032d0:	f7fd ff04 	bl	80010dc <HAL_GetTick>
 80032d4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d6:	682b      	ldr	r3, [r5, #0]
 80032d8:	0199      	lsls	r1, r3, #6
 80032da:	d432      	bmi.n	8003342 <HAL_RCC_OscConfig+0x2fa>
 80032dc:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 80032e0:	fa97 f7a7 	rbit	r7, r7
 80032e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032e8:	fab7 f787 	clz	r7, r7
 80032ec:	fa92 f2a2 	rbit	r2, r2
 80032f0:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80032f4:	fab2 f082 	clz	r0, r2
 80032f8:	fa91 f1a1 	rbit	r1, r1
 80032fc:	6a22      	ldr	r2, [r4, #32]
 80032fe:	69e3      	ldr	r3, [r4, #28]
 8003300:	4313      	orrs	r3, r2
 8003302:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003304:	fa02 f707 	lsl.w	r7, r2, r7
 8003308:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800330a:	0852      	lsrs	r2, r2, #1
 800330c:	3a01      	subs	r2, #1
 800330e:	4082      	lsls	r2, r0
 8003310:	433b      	orrs	r3, r7
 8003312:	4313      	orrs	r3, r2
 8003314:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003316:	4c14      	ldr	r4, [pc, #80]	; (8003368 <HAL_RCC_OscConfig+0x320>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003318:	fab1 f181 	clz	r1, r1
 800331c:	fa02 f101 	lsl.w	r1, r2, r1
 8003320:	430b      	orrs	r3, r1
 8003322:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003324:	2301      	movs	r3, #1
 8003326:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003328:	f7fd fed8 	bl	80010dc <HAL_GetTick>
 800332c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	019a      	lsls	r2, r3, #6
 8003332:	f53f aec8 	bmi.w	80030c6 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003336:	f7fd fed1 	bl	80010dc <HAL_GetTick>
 800333a:	1b40      	subs	r0, r0, r5
 800333c:	2802      	cmp	r0, #2
 800333e:	d9f6      	bls.n	800332e <HAL_RCC_OscConfig+0x2e6>
 8003340:	e6f0      	b.n	8003124 <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003342:	f7fd fecb 	bl	80010dc <HAL_GetTick>
 8003346:	1bc0      	subs	r0, r0, r7
 8003348:	2802      	cmp	r0, #2
 800334a:	d9c4      	bls.n	80032d6 <HAL_RCC_OscConfig+0x28e>
 800334c:	e6ea      	b.n	8003124 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 800334e:	f7fd fec5 	bl	80010dc <HAL_GetTick>
 8003352:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	019b      	lsls	r3, r3, #6
 8003358:	f57f aeb5 	bpl.w	80030c6 <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335c:	f7fd febe 	bl	80010dc <HAL_GetTick>
 8003360:	1b00      	subs	r0, r0, r4
 8003362:	2802      	cmp	r0, #2
 8003364:	d9f6      	bls.n	8003354 <HAL_RCC_OscConfig+0x30c>
 8003366:	e6dd      	b.n	8003124 <HAL_RCC_OscConfig+0xdc>
 8003368:	40023800 	.word	0x40023800
 800336c:	42470060 	.word	0x42470060

08003370 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003370:	4a19      	ldr	r2, [pc, #100]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x68>)
 8003372:	6893      	ldr	r3, [r2, #8]
 8003374:	f003 030c 	and.w	r3, r3, #12
 8003378:	2b04      	cmp	r3, #4
{
 800337a:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800337c:	d003      	beq.n	8003386 <HAL_RCC_GetSysClockFreq+0x16>
 800337e:	2b08      	cmp	r3, #8
 8003380:	d003      	beq.n	800338a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003382:	4816      	ldr	r0, [pc, #88]	; (80033dc <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003384:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8003386:	4816      	ldr	r0, [pc, #88]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x70>)
 8003388:	bd10      	pop	{r4, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800338a:	6851      	ldr	r1, [r2, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800338c:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800338e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003392:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003396:	f647 74c0 	movw	r4, #32704	; 0x7fc0
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800339a:	6853      	ldr	r3, [r2, #4]
 800339c:	fa94 f0a4 	rbit	r0, r4
 80033a0:	fab0 f080 	clz	r0, r0
 80033a4:	ea03 0304 	and.w	r3, r3, r4
 80033a8:	fa23 f300 	lsr.w	r3, r3, r0
 80033ac:	bf14      	ite	ne
 80033ae:	480c      	ldrne	r0, [pc, #48]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80033b0:	480a      	ldreq	r0, [pc, #40]	; (80033dc <HAL_RCC_GetSysClockFreq+0x6c>)
 80033b2:	fbb0 f0f1 	udiv	r0, r0, r1
 80033b6:	4358      	muls	r0, r3
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80033b8:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x68>)
 80033ba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	fa92 f2a2 	rbit	r2, r2
 80033c4:	fab2 f282 	clz	r2, r2
 80033c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033cc:	40d3      	lsrs	r3, r2
 80033ce:	3301      	adds	r3, #1
 80033d0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80033d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80033d6:	bd10      	pop	{r4, pc}
 80033d8:	40023800 	.word	0x40023800
 80033dc:	00f42400 	.word	0x00f42400
 80033e0:	007a1200 	.word	0x007a1200

080033e4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80033e4:	4b56      	ldr	r3, [pc, #344]	; (8003540 <HAL_RCC_ClockConfig+0x15c>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	f002 020f 	and.w	r2, r2, #15
 80033ec:	428a      	cmp	r2, r1
{
 80033ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033f2:	4605      	mov	r5, r0
 80033f4:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80033f6:	d330      	bcc.n	800345a <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f8:	682a      	ldr	r2, [r5, #0]
 80033fa:	0794      	lsls	r4, r2, #30
 80033fc:	d437      	bmi.n	800346e <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033fe:	07d0      	lsls	r0, r2, #31
 8003400:	d43d      	bmi.n	800347e <HAL_RCC_ClockConfig+0x9a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8003402:	4b4f      	ldr	r3, [pc, #316]	; (8003540 <HAL_RCC_ClockConfig+0x15c>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	f002 020f 	and.w	r2, r2, #15
 800340a:	4296      	cmp	r6, r2
 800340c:	f0c0 8088 	bcc.w	8003520 <HAL_RCC_ClockConfig+0x13c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003410:	682a      	ldr	r2, [r5, #0]
 8003412:	0751      	lsls	r1, r2, #29
 8003414:	f100 808c 	bmi.w	8003530 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003418:	0713      	lsls	r3, r2, #28
 800341a:	d507      	bpl.n	800342c <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800341c:	4a49      	ldr	r2, [pc, #292]	; (8003544 <HAL_RCC_ClockConfig+0x160>)
 800341e:	6929      	ldr	r1, [r5, #16]
 8003420:	6893      	ldr	r3, [r2, #8]
 8003422:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003426:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800342a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800342c:	f7ff ffa0 	bl	8003370 <HAL_RCC_GetSysClockFreq>
 8003430:	4b44      	ldr	r3, [pc, #272]	; (8003544 <HAL_RCC_ClockConfig+0x160>)
 8003432:	22f0      	movs	r2, #240	; 0xf0
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	fa92 f2a2 	rbit	r2, r2
 800343a:	fab2 f282 	clz	r2, r2
 800343e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003442:	40d3      	lsrs	r3, r2
 8003444:	4a40      	ldr	r2, [pc, #256]	; (8003548 <HAL_RCC_ClockConfig+0x164>)
 8003446:	5cd3      	ldrb	r3, [r2, r3]
 8003448:	40d8      	lsrs	r0, r3
 800344a:	4b40      	ldr	r3, [pc, #256]	; (800354c <HAL_RCC_ClockConfig+0x168>)
 800344c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800344e:	200f      	movs	r0, #15
 8003450:	f7fd fe0e 	bl	8001070 <HAL_InitTick>
  return HAL_OK;
 8003454:	2000      	movs	r0, #0
}
 8003456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345a:	b2ca      	uxtb	r2, r1
 800345c:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	4299      	cmp	r1, r3
 8003466:	d0c7      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8003468:	2001      	movs	r0, #1
 800346a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800346e:	4935      	ldr	r1, [pc, #212]	; (8003544 <HAL_RCC_ClockConfig+0x160>)
 8003470:	68a8      	ldr	r0, [r5, #8]
 8003472:	688b      	ldr	r3, [r1, #8]
 8003474:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003478:	4303      	orrs	r3, r0
 800347a:	608b      	str	r3, [r1, #8]
 800347c:	e7bf      	b.n	80033fe <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800347e:	686a      	ldr	r2, [r5, #4]
 8003480:	4b30      	ldr	r3, [pc, #192]	; (8003544 <HAL_RCC_ClockConfig+0x160>)
 8003482:	2a01      	cmp	r2, #1
 8003484:	d11e      	bne.n	80034c4 <HAL_RCC_ClockConfig+0xe0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348c:	d0ec      	beq.n	8003468 <HAL_RCC_ClockConfig+0x84>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800348e:	4c2d      	ldr	r4, [pc, #180]	; (8003544 <HAL_RCC_ClockConfig+0x160>)
 8003490:	68a3      	ldr	r3, [r4, #8]
 8003492:	f023 0303 	bic.w	r3, r3, #3
 8003496:	4313      	orrs	r3, r2
 8003498:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800349a:	f7fd fe1f 	bl	80010dc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349e:	686b      	ldr	r3, [r5, #4]
 80034a0:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 80034a2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a4:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a8:	d116      	bne.n	80034d8 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034aa:	68a3      	ldr	r3, [r4, #8]
 80034ac:	f003 030c 	and.w	r3, r3, #12
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d0a6      	beq.n	8003402 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b4:	f7fd fe12 	bl	80010dc <HAL_GetTick>
 80034b8:	1bc0      	subs	r0, r0, r7
 80034ba:	4540      	cmp	r0, r8
 80034bc:	d9f5      	bls.n	80034aa <HAL_RCC_ClockConfig+0xc6>
          return HAL_TIMEOUT;
 80034be:	2003      	movs	r0, #3
 80034c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80034c4:	1e91      	subs	r1, r2, #2
 80034c6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80034ca:	d802      	bhi.n	80034d2 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034cc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80034d0:	e7dc      	b.n	800348c <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d2:	f013 0f02 	tst.w	r3, #2
 80034d6:	e7d9      	b.n	800348c <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d10a      	bne.n	80034f2 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034dc:	68a3      	ldr	r3, [r4, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d08d      	beq.n	8003402 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e6:	f7fd fdf9 	bl	80010dc <HAL_GetTick>
 80034ea:	1bc0      	subs	r0, r0, r7
 80034ec:	4540      	cmp	r0, r8
 80034ee:	d9f5      	bls.n	80034dc <HAL_RCC_ClockConfig+0xf8>
 80034f0:	e7e5      	b.n	80034be <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d10f      	bne.n	8003516 <HAL_RCC_ClockConfig+0x132>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80034f6:	68a3      	ldr	r3, [r4, #8]
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b0c      	cmp	r3, #12
 80034fe:	d080      	beq.n	8003402 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003500:	f7fd fdec 	bl	80010dc <HAL_GetTick>
 8003504:	1bc0      	subs	r0, r0, r7
 8003506:	4540      	cmp	r0, r8
 8003508:	d9f5      	bls.n	80034f6 <HAL_RCC_ClockConfig+0x112>
 800350a:	e7d8      	b.n	80034be <HAL_RCC_ClockConfig+0xda>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350c:	f7fd fde6 	bl	80010dc <HAL_GetTick>
 8003510:	1bc0      	subs	r0, r0, r7
 8003512:	4540      	cmp	r0, r8
 8003514:	d8d3      	bhi.n	80034be <HAL_RCC_ClockConfig+0xda>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003516:	68a3      	ldr	r3, [r4, #8]
 8003518:	f013 0f0c 	tst.w	r3, #12
 800351c:	d1f6      	bne.n	800350c <HAL_RCC_ClockConfig+0x128>
 800351e:	e770      	b.n	8003402 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003520:	b2f2      	uxtb	r2, r6
 8003522:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	429e      	cmp	r6, r3
 800352c:	d19c      	bne.n	8003468 <HAL_RCC_ClockConfig+0x84>
 800352e:	e76f      	b.n	8003410 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003530:	4904      	ldr	r1, [pc, #16]	; (8003544 <HAL_RCC_ClockConfig+0x160>)
 8003532:	68e8      	ldr	r0, [r5, #12]
 8003534:	688b      	ldr	r3, [r1, #8]
 8003536:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800353a:	4303      	orrs	r3, r0
 800353c:	608b      	str	r3, [r1, #8]
 800353e:	e76b      	b.n	8003418 <HAL_RCC_ClockConfig+0x34>
 8003540:	40023c00 	.word	0x40023c00
 8003544:	40023800 	.word	0x40023800
 8003548:	0800b0e8 	.word	0x0800b0e8
 800354c:	200000b0 	.word	0x200000b0

08003550 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8003550:	4b08      	ldr	r3, [pc, #32]	; (8003574 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003552:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	fa92 f2a2 	rbit	r2, r2
 800355c:	fab2 f282 	clz	r2, r2
 8003560:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003564:	40d3      	lsrs	r3, r2
 8003566:	4a04      	ldr	r2, [pc, #16]	; (8003578 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003568:	5cd3      	ldrb	r3, [r2, r3]
 800356a:	4a04      	ldr	r2, [pc, #16]	; (800357c <HAL_RCC_GetPCLK1Freq+0x2c>)
 800356c:	6810      	ldr	r0, [r2, #0]
}
 800356e:	40d8      	lsrs	r0, r3
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800
 8003578:	0800b0f8 	.word	0x0800b0f8
 800357c:	200000b0 	.word	0x200000b0

08003580 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003580:	6803      	ldr	r3, [r0, #0]
 8003582:	f013 0f05 	tst.w	r3, #5
{
 8003586:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003588:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800358a:	d13c      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x86>
      }
    }
  }
  
  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	079a      	lsls	r2, r3, #30
 8003590:	d530      	bpl.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	9301      	str	r3, [sp, #4]
 8003596:	4b4c      	ldr	r3, [pc, #304]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003598:	4d4c      	ldr	r5, [pc, #304]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800359a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800359c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035a0:	641a      	str	r2, [r3, #64]	; 0x40
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80035ac:	682b      	ldr	r3, [r5, #0]
 80035ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b2:	602b      	str	r3, [r5, #0]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80035b4:	f7fd fd92 	bl	80010dc <HAL_GetTick>
 80035b8:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035ba:	682b      	ldr	r3, [r5, #0]
 80035bc:	05d9      	lsls	r1, r3, #23
 80035be:	d559      	bpl.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035c0:	4d41      	ldr	r5, [pc, #260]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80035c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035c4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80035c8:	d15a      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x100>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035ca:	6923      	ldr	r3, [r4, #16]
 80035cc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80035d0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80035d4:	4a3c      	ldr	r2, [pc, #240]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80035d6:	d172      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x13e>
 80035d8:	6891      	ldr	r1, [r2, #8]
 80035da:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80035de:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80035e2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80035e6:	4301      	orrs	r1, r0
 80035e8:	6091      	str	r1, [r2, #8]
 80035ea:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80035ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f0:	430b      	orrs	r3, r1
 80035f2:	6713      	str	r3, [r2, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035f4:	6820      	ldr	r0, [r4, #0]
 80035f6:	f010 0008 	ands.w	r0, r0, #8
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035fa:	bf1f      	itttt	ne
 80035fc:	4b34      	ldrne	r3, [pc, #208]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80035fe:	7d22      	ldrbne	r2, [r4, #20]
 8003600:	601a      	strne	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003602:	2000      	movne	r0, #0
 8003604:	e034      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    __HAL_RCC_PLLI2S_DISABLE();
 8003606:	4d33      	ldr	r5, [pc, #204]	; (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003608:	4e2f      	ldr	r6, [pc, #188]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
    __HAL_RCC_PLLI2S_DISABLE();
 800360a:	2300      	movs	r3, #0
 800360c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800360e:	f7fd fd65 	bl	80010dc <HAL_GetTick>
 8003612:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003614:	6833      	ldr	r3, [r6, #0]
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	d424      	bmi.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 800361a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800361e:	fa93 f3a3 	rbit	r3, r3
 8003622:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003626:	fab3 f183 	clz	r1, r3
 800362a:	fa92 f2a2 	rbit	r2, r2
 800362e:	68a3      	ldr	r3, [r4, #8]
 8003630:	408b      	lsls	r3, r1
 8003632:	68e1      	ldr	r1, [r4, #12]
 8003634:	fab2 f282 	clz	r2, r2
 8003638:	fa01 f202 	lsl.w	r2, r1, r2
 800363c:	4313      	orrs	r3, r2
 800363e:	6862      	ldr	r2, [r4, #4]
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003646:	2301      	movs	r3, #1
 8003648:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800364a:	f7fd fd47 	bl	80010dc <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800364e:	4d1e      	ldr	r5, [pc, #120]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
    tickstart = HAL_GetTick();
 8003650:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003652:	682b      	ldr	r3, [r5, #0]
 8003654:	0118      	lsls	r0, r3, #4
 8003656:	d499      	bmi.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003658:	f7fd fd40 	bl	80010dc <HAL_GetTick>
 800365c:	1b80      	subs	r0, r0, r6
 800365e:	2802      	cmp	r0, #2
 8003660:	d9f7      	bls.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8003662:	e004      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xee>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003664:	f7fd fd3a 	bl	80010dc <HAL_GetTick>
 8003668:	1bc0      	subs	r0, r0, r7
 800366a:	2802      	cmp	r0, #2
 800366c:	d9d2      	bls.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x94>
        return HAL_TIMEOUT;
 800366e:	2003      	movs	r0, #3
}
 8003670:	b003      	add	sp, #12
 8003672:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003674:	f7fd fd32 	bl	80010dc <HAL_GetTick>
 8003678:	1b80      	subs	r0, r0, r6
 800367a:	2802      	cmp	r0, #2
 800367c:	d99d      	bls.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800367e:	e7f6      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xee>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003680:	6922      	ldr	r2, [r4, #16]
 8003682:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003686:	4293      	cmp	r3, r2
 8003688:	d09f      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800368a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800368c:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800368e:	2101      	movs	r1, #1
 8003690:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003696:	2100      	movs	r1, #0
 8003698:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 800369a:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800369c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800369e:	07da      	lsls	r2, r3, #31
 80036a0:	d593      	bpl.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 80036a2:	f7fd fd1b 	bl	80010dc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a6:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80036aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80036ae:	079b      	lsls	r3, r3, #30
 80036b0:	d48b      	bmi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fd fd13 	bl	80010dc <HAL_GetTick>
 80036b6:	1b80      	subs	r0, r0, r6
 80036b8:	42b8      	cmp	r0, r7
 80036ba:	d9f7      	bls.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80036bc:	e7d7      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xee>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036be:	6891      	ldr	r1, [r2, #8]
 80036c0:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80036c4:	e790      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40007000 	.word	0x40007000
 80036d0:	424711e0 	.word	0x424711e0
 80036d4:	42470068 	.word	0x42470068
 80036d8:	42470e40 	.word	0x42470e40

080036dc <HAL_RCCEx_GetPeriphCLKConfig>:
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tempreg;
  
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80036dc:	2303      	movs	r3, #3
 80036de:	6003      	str	r3, [r0, #0]
  
  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 80036e0:	4b16      	ldr	r3, [pc, #88]	; (800373c <HAL_RCCEx_GetPeriphCLKConfig+0x60>)
{
 80036e2:	b510      	push	{r4, lr}
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 80036e4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80036e8:	f647 74c0 	movw	r4, #32704	; 0x7fc0
 80036ec:	fa94 f1a4 	rbit	r1, r4
 80036f0:	fab1 f181 	clz	r1, r1
 80036f4:	4022      	ands	r2, r4
 80036f6:	40ca      	lsrs	r2, r1
 80036f8:	6082      	str	r2, [r0, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80036fa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80036fe:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8003702:	fa91 f1a1 	rbit	r1, r1
 8003706:	fab1 f181 	clz	r1, r1
 800370a:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800370e:	40ca      	lsrs	r2, r1
 8003710:	60c2      	str	r2, [r0, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 8003712:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003716:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800371a:	6042      	str	r2, [r0, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800371c:	689a      	ldr	r2, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800371e:	6f19      	ldr	r1, [r3, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8003720:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8003724:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8003728:	430a      	orrs	r2, r1
 800372a:	6102      	str	r2, [r0, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 800372c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003730:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8003734:	bf18      	it	ne
 8003736:	2301      	movne	r3, #1
 8003738:	7503      	strb	r3, [r0, #20]
 800373a:	bd10      	pop	{r4, pc}
 800373c:	40023800 	.word	0x40023800

08003740 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8003740:	2801      	cmp	r0, #1
 8003742:	d121      	bne.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x48>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003744:	4b11      	ldr	r3, [pc, #68]	; (800378c <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 8003746:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8003748:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 800374c:	d004      	beq.n	8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 800374e:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003750:	480f      	ldr	r0, [pc, #60]	; (8003790 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8003752:	bf18      	it	ne
 8003754:	2000      	movne	r0, #0
 8003756:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003758:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800375a:	490c      	ldr	r1, [pc, #48]	; (800378c <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800375c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003760:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003762:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003766:	bf4c      	ite	mi
 8003768:	4b0a      	ldrmi	r3, [pc, #40]	; (8003794 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800376a:	4b0b      	ldrpl	r3, [pc, #44]	; (8003798 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800376c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003770:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003774:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003778:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800377c:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800377e:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8003782:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8003786:	4770      	bx	lr
  uint32_t frequency = 0U;
 8003788:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency; 
}
 800378a:	4770      	bx	lr
 800378c:	40023800 	.word	0x40023800
 8003790:	00bb8000 	.word	0x00bb8000
 8003794:	007a1200 	.word	0x007a1200
 8003798:	00f42400 	.word	0x00f42400

0800379c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800379c:	6a03      	ldr	r3, [r0, #32]
 800379e:	f023 0301 	bic.w	r3, r3, #1
 80037a2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a4:	6a03      	ldr	r3, [r0, #32]
{
 80037a6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80037a8:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037aa:	6982      	ldr	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037ac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037ae:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80037b2:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037b4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80037b6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80037ba:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80037bc:	4d0a      	ldr	r5, [pc, #40]	; (80037e8 <TIM_OC1_SetConfig+0x4c>)
 80037be:	42a8      	cmp	r0, r5
 80037c0:	d10b      	bne.n	80037da <TIM_OC1_SetConfig+0x3e>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037c2:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037c4:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 80037c6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80037ca:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80037cc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037ce:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80037d2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80037d4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80037d8:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037da:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037dc:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037de:	684a      	ldr	r2, [r1, #4]
 80037e0:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80037e2:	6203      	str	r3, [r0, #32]
 80037e4:	bd70      	pop	{r4, r5, r6, pc}
 80037e6:	bf00      	nop
 80037e8:	40010000 	.word	0x40010000

080037ec <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037ec:	6a03      	ldr	r3, [r0, #32]
 80037ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037f2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f4:	6a03      	ldr	r3, [r0, #32]
{
 80037f6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80037f8:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037fa:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037fc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80037fe:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003802:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003804:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003806:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800380a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800380e:	4d0b      	ldr	r5, [pc, #44]	; (800383c <TIM_OC3_SetConfig+0x50>)
 8003810:	42a8      	cmp	r0, r5
 8003812:	d10d      	bne.n	8003830 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003814:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003816:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003818:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800381c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003820:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003822:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003826:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003828:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800382c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003830:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003832:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003834:	684a      	ldr	r2, [r1, #4]
 8003836:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003838:	6203      	str	r3, [r0, #32]
 800383a:	bd70      	pop	{r4, r5, r6, pc}
 800383c:	40010000 	.word	0x40010000

08003840 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003840:	6a03      	ldr	r3, [r0, #32]
 8003842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003846:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003848:	6a03      	ldr	r3, [r0, #32]
{
 800384a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800384c:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800384e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003850:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003852:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003856:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800385a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800385c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003860:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003864:	4d06      	ldr	r5, [pc, #24]	; (8003880 <TIM_OC4_SetConfig+0x40>)
 8003866:	42a8      	cmp	r0, r5
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003868:	bf02      	ittt	eq
 800386a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800386c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003870:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003874:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8003876:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003878:	684a      	ldr	r2, [r1, #4]
 800387a:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387c:	6203      	str	r3, [r0, #32]
 800387e:	bd30      	pop	{r4, r5, pc}
 8003880:	40010000 	.word	0x40010000

08003884 <HAL_TIM_OC_MspInit>:
 8003884:	4770      	bx	lr

08003886 <HAL_TIM_ReadCapturedValue>:
  __HAL_LOCK(htim);
 8003886:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800388a:	2b01      	cmp	r3, #1
 800388c:	d01c      	beq.n	80038c8 <HAL_TIM_ReadCapturedValue+0x42>
  switch (Channel)
 800388e:	290c      	cmp	r1, #12
 8003890:	d818      	bhi.n	80038c4 <HAL_TIM_ReadCapturedValue+0x3e>
 8003892:	e8df f001 	tbb	[pc, r1]
 8003896:	1707      	.short	0x1707
 8003898:	170e1717 	.word	0x170e1717
 800389c:	17111717 	.word	0x17111717
 80038a0:	1717      	.short	0x1717
 80038a2:	14          	.byte	0x14
 80038a3:	00          	.byte	0x00
      tmpreg = htim->Instance->CCR1;
 80038a4:	6803      	ldr	r3, [r0, #0]
 80038a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  __HAL_UNLOCK(htim);  
 80038a8:	2200      	movs	r2, #0
 80038aa:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	4770      	bx	lr
      tmpreg = htim->Instance->CCR2;
 80038b2:	6803      	ldr	r3, [r0, #0]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      break;
 80038b6:	e7f7      	b.n	80038a8 <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg = htim->Instance->CCR3;
 80038b8:	6803      	ldr	r3, [r0, #0]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      break;
 80038bc:	e7f4      	b.n	80038a8 <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg = htim->Instance->CCR4;
 80038be:	6803      	ldr	r3, [r0, #0]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      break;
 80038c2:	e7f1      	b.n	80038a8 <HAL_TIM_ReadCapturedValue+0x22>
  uint32_t tmpreg = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	e7ef      	b.n	80038a8 <HAL_TIM_ReadCapturedValue+0x22>
  __HAL_LOCK(htim);
 80038c8:	2302      	movs	r3, #2
 80038ca:	e7f0      	b.n	80038ae <HAL_TIM_ReadCapturedValue+0x28>

080038cc <HAL_TIM_PeriodElapsedCallback>:
 80038cc:	4770      	bx	lr

080038ce <HAL_TIM_IC_CaptureCallback>:
 80038ce:	4770      	bx	lr

080038d0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80038d0:	4770      	bx	lr

080038d2 <HAL_TIM_TriggerCallback>:
 80038d2:	4770      	bx	lr

080038d4 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038d4:	6803      	ldr	r3, [r0, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	0791      	lsls	r1, r2, #30
{
 80038da:	b510      	push	{r4, lr}
 80038dc:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038de:	d50e      	bpl.n	80038fe <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	0792      	lsls	r2, r2, #30
 80038e4:	d50b      	bpl.n	80038fe <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038e6:	f06f 0202 	mvn.w	r2, #2
 80038ea:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038ec:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ee:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038f0:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038f2:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038f4:	d077      	beq.n	80039e6 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80038f6:	f7ff ffea 	bl	80038ce <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fa:	2300      	movs	r3, #0
 80038fc:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	0750      	lsls	r0, r2, #29
 8003904:	d510      	bpl.n	8003928 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	0751      	lsls	r1, r2, #29
 800390a:	d50d      	bpl.n	8003928 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800390c:	f06f 0204 	mvn.w	r2, #4
 8003910:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003912:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003914:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003916:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800391a:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800391c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800391e:	d068      	beq.n	80039f2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003920:	f7ff ffd5 	bl	80038ce <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003924:	2300      	movs	r3, #0
 8003926:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	0712      	lsls	r2, r2, #28
 800392e:	d50f      	bpl.n	8003950 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	0710      	lsls	r0, r2, #28
 8003934:	d50c      	bpl.n	8003950 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003936:	f06f 0208 	mvn.w	r2, #8
 800393a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800393c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800393e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003940:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003942:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8003944:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003946:	d05a      	beq.n	80039fe <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003948:	f7ff ffc1 	bl	80038ce <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800394c:	2300      	movs	r3, #0
 800394e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	06d2      	lsls	r2, r2, #27
 8003956:	d510      	bpl.n	800397a <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	06d0      	lsls	r0, r2, #27
 800395c:	d50d      	bpl.n	800397a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800395e:	f06f 0210 	mvn.w	r2, #16
 8003962:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003964:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003966:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003968:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800396c:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800396e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003970:	d04b      	beq.n	8003a0a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8003972:	f7ff ffac 	bl	80038ce <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003976:	2300      	movs	r3, #0
 8003978:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	07d1      	lsls	r1, r2, #31
 8003980:	d508      	bpl.n	8003994 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	07d2      	lsls	r2, r2, #31
 8003986:	d505      	bpl.n	8003994 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003988:	f06f 0201 	mvn.w	r2, #1
 800398c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800398e:	4620      	mov	r0, r4
 8003990:	f7ff ff9c 	bl	80038cc <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	691a      	ldr	r2, [r3, #16]
 8003998:	0610      	lsls	r0, r2, #24
 800399a:	d508      	bpl.n	80039ae <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	0611      	lsls	r1, r2, #24
 80039a0:	d505      	bpl.n	80039ae <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80039a8:	4620      	mov	r0, r4
 80039aa:	f000 f93a 	bl	8003c22 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	0652      	lsls	r2, r2, #25
 80039b4:	d508      	bpl.n	80039c8 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	0650      	lsls	r0, r2, #25
 80039ba:	d505      	bpl.n	80039c8 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039c0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80039c2:	4620      	mov	r0, r4
 80039c4:	f7ff ff85 	bl	80038d2 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	0691      	lsls	r1, r2, #26
 80039ce:	d522      	bpl.n	8003a16 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	0692      	lsls	r2, r2, #26
 80039d4:	d51f      	bpl.n	8003a16 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039d6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80039da:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039dc:	611a      	str	r2, [r3, #16]
}
 80039de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80039e2:	f000 b91d 	b.w	8003c20 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e6:	f004 f857 	bl	8007a98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ea:	4620      	mov	r0, r4
 80039ec:	f7ff ff70 	bl	80038d0 <HAL_TIM_PWM_PulseFinishedCallback>
 80039f0:	e783      	b.n	80038fa <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f2:	f004 f851 	bl	8007a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f6:	4620      	mov	r0, r4
 80039f8:	f7ff ff6a 	bl	80038d0 <HAL_TIM_PWM_PulseFinishedCallback>
 80039fc:	e792      	b.n	8003924 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fe:	f004 f84b 	bl	8007a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8003a02:	4620      	mov	r0, r4
 8003a04:	f7ff ff64 	bl	80038d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003a08:	e7a0      	b.n	800394c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0a:	f004 f845 	bl	8007a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f7ff ff5e 	bl	80038d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003a14:	e7af      	b.n	8003976 <HAL_TIM_IRQHandler+0xa2>
 8003a16:	bd10      	pop	{r4, pc}

08003a18 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003a18:	4a22      	ldr	r2, [pc, #136]	; (8003aa4 <TIM_Base_SetConfig+0x8c>)
  tmpcr1 = TIMx->CR1;
 8003a1a:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003a1c:	4290      	cmp	r0, r2
 8003a1e:	d00e      	beq.n	8003a3e <TIM_Base_SetConfig+0x26>
 8003a20:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003a24:	d00b      	beq.n	8003a3e <TIM_Base_SetConfig+0x26>
 8003a26:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003a2a:	4290      	cmp	r0, r2
 8003a2c:	d007      	beq.n	8003a3e <TIM_Base_SetConfig+0x26>
 8003a2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a32:	4290      	cmp	r0, r2
 8003a34:	d003      	beq.n	8003a3e <TIM_Base_SetConfig+0x26>
 8003a36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a3a:	4290      	cmp	r0, r2
 8003a3c:	d119      	bne.n	8003a72 <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= Structure->CounterMode;
 8003a3e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003a44:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003a46:	4a17      	ldr	r2, [pc, #92]	; (8003aa4 <TIM_Base_SetConfig+0x8c>)
 8003a48:	4290      	cmp	r0, r2
 8003a4a:	d104      	bne.n	8003a56 <TIM_Base_SetConfig+0x3e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a4c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a52:	4313      	orrs	r3, r2
 8003a54:	e018      	b.n	8003a88 <TIM_Base_SetConfig+0x70>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003a56:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003a5a:	d0f7      	beq.n	8003a4c <TIM_Base_SetConfig+0x34>
 8003a5c:	4a12      	ldr	r2, [pc, #72]	; (8003aa8 <TIM_Base_SetConfig+0x90>)
 8003a5e:	4290      	cmp	r0, r2
 8003a60:	d0f4      	beq.n	8003a4c <TIM_Base_SetConfig+0x34>
 8003a62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a66:	4290      	cmp	r0, r2
 8003a68:	d0f0      	beq.n	8003a4c <TIM_Base_SetConfig+0x34>
 8003a6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a6e:	4290      	cmp	r0, r2
 8003a70:	d0ec      	beq.n	8003a4c <TIM_Base_SetConfig+0x34>
 8003a72:	4a0e      	ldr	r2, [pc, #56]	; (8003aac <TIM_Base_SetConfig+0x94>)
 8003a74:	4290      	cmp	r0, r2
 8003a76:	d0e9      	beq.n	8003a4c <TIM_Base_SetConfig+0x34>
 8003a78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a7c:	4290      	cmp	r0, r2
 8003a7e:	d0e5      	beq.n	8003a4c <TIM_Base_SetConfig+0x34>
 8003a80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a84:	4290      	cmp	r0, r2
 8003a86:	d0e1      	beq.n	8003a4c <TIM_Base_SetConfig+0x34>
  TIMx->CR1 = tmpcr1;
 8003a88:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a8a:	688b      	ldr	r3, [r1, #8]
 8003a8c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003a8e:	680b      	ldr	r3, [r1, #0]
 8003a90:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003a92:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <TIM_Base_SetConfig+0x8c>)
 8003a94:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8003a96:	bf04      	itt	eq
 8003a98:	690b      	ldreq	r3, [r1, #16]
 8003a9a:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	6143      	str	r3, [r0, #20]
}
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40010000 	.word	0x40010000
 8003aa8:	40000400 	.word	0x40000400
 8003aac:	40014000 	.word	0x40014000

08003ab0 <HAL_TIM_OC_Init>:
{
 8003ab0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	b1a0      	cbz	r0, 8003ae0 <HAL_TIM_OC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003ab6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003aba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003abe:	b91b      	cbnz	r3, 8003ac8 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003ac0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_OC_MspInit(htim);
 8003ac4:	f7ff fede 	bl	8003884 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 8003ace:	6820      	ldr	r0, [r4, #0]
 8003ad0:	1d21      	adds	r1, r4, #4
 8003ad2:	f7ff ffa1 	bl	8003a18 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8003adc:	2000      	movs	r0, #0
 8003ade:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003ae0:	2001      	movs	r0, #1
}
 8003ae2:	bd10      	pop	{r4, pc}

08003ae4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ae4:	6a03      	ldr	r3, [r0, #32]
 8003ae6:	f023 0310 	bic.w	r3, r3, #16
 8003aea:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003aec:	6a03      	ldr	r3, [r0, #32]
{
 8003aee:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 = TIMx->CR2;
 8003af0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003af2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003af4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003af6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003afa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003afe:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003b00:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b04:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003b08:	4d0b      	ldr	r5, [pc, #44]	; (8003b38 <TIM_OC2_SetConfig+0x54>)
 8003b0a:	42a8      	cmp	r0, r5
 8003b0c:	d10d      	bne.n	8003b2a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b0e:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b10:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b16:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b1a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b1c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b20:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b26:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003b2a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003b2c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003b2e:	684a      	ldr	r2, [r1, #4]
 8003b30:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003b32:	6203      	str	r3, [r0, #32]
 8003b34:	bd70      	pop	{r4, r5, r6, pc}
 8003b36:	bf00      	nop
 8003b38:	40010000 	.word	0x40010000

08003b3c <HAL_TIM_OC_ConfigChannel>:
{
 8003b3c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim); 
 8003b3e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003b42:	2b01      	cmp	r3, #1
{
 8003b44:	4604      	mov	r4, r0
 8003b46:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim); 
 8003b4a:	d018      	beq.n	8003b7e <HAL_TIM_OC_ConfigChannel+0x42>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8003b52:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 8003b56:	461d      	mov	r5, r3
  switch (Channel)
 8003b58:	2a0c      	cmp	r2, #12
 8003b5a:	d80b      	bhi.n	8003b74 <HAL_TIM_OC_ConfigChannel+0x38>
 8003b5c:	e8df f002 	tbb	[pc, r2]
 8003b60:	0a0a0a07 	.word	0x0a0a0a07
 8003b64:	0a0a0a10 	.word	0x0a0a0a10
 8003b68:	0a0a0a14 	.word	0x0a0a0a14
 8003b6c:	18          	.byte	0x18
 8003b6d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b6e:	6820      	ldr	r0, [r4, #0]
 8003b70:	f7ff fe14 	bl	800379c <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim); 
 8003b74:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003b76:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim); 
 8003b7a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8003b7e:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b80:	6820      	ldr	r0, [r4, #0]
 8003b82:	f7ff ffaf 	bl	8003ae4 <TIM_OC2_SetConfig>
    break;
 8003b86:	e7f5      	b.n	8003b74 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b88:	6820      	ldr	r0, [r4, #0]
 8003b8a:	f7ff fe2f 	bl	80037ec <TIM_OC3_SetConfig>
    break;
 8003b8e:	e7f1      	b.n	8003b74 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b90:	6820      	ldr	r0, [r4, #0]
 8003b92:	f7ff fe55 	bl	8003840 <TIM_OC4_SetConfig>
    break;
 8003b96:	e7ed      	b.n	8003b74 <HAL_TIM_OC_ConfigChannel+0x38>

08003b98 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8003b98:	6a03      	ldr	r3, [r0, #32]
{
 8003b9a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8003b9c:	2401      	movs	r4, #1
 8003b9e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003ba0:	ea23 0304 	bic.w	r3, r3, r4
 8003ba4:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8003ba6:	6a03      	ldr	r3, [r0, #32]
 8003ba8:	408a      	lsls	r2, r1
 8003baa:	431a      	orrs	r2, r3
 8003bac:	6202      	str	r2, [r0, #32]
 8003bae:	bd10      	pop	{r4, pc}

08003bb0 <HAL_TIM_PWM_Start_IT>:
{
 8003bb0:	b510      	push	{r4, lr}
 8003bb2:	4604      	mov	r4, r0
  switch (Channel)
 8003bb4:	290c      	cmp	r1, #12
 8003bb6:	d80d      	bhi.n	8003bd4 <HAL_TIM_PWM_Start_IT+0x24>
 8003bb8:	e8df f001 	tbb	[pc, r1]
 8003bbc:	0c0c0c07 	.word	0x0c0c0c07
 8003bc0:	0c0c0c1e 	.word	0x0c0c0c1e
 8003bc4:	0c0c0c23 	.word	0x0c0c0c23
 8003bc8:	28          	.byte	0x28
 8003bc9:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003bca:	6802      	ldr	r2, [r0, #0]
 8003bcc:	68d3      	ldr	r3, [r2, #12]
 8003bce:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003bd2:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bd4:	6820      	ldr	r0, [r4, #0]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f7ff ffde 	bl	8003b98 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	4a0e      	ldr	r2, [pc, #56]	; (8003c18 <HAL_TIM_PWM_Start_IT+0x68>)
 8003be0:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8003be2:	bf02      	ittt	eq
 8003be4:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8003be6:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8003bea:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	f042 0201 	orr.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
} 
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003bf8:	6802      	ldr	r2, [r0, #0]
 8003bfa:	68d3      	ldr	r3, [r2, #12]
 8003bfc:	f043 0304 	orr.w	r3, r3, #4
 8003c00:	e7e7      	b.n	8003bd2 <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003c02:	6802      	ldr	r2, [r0, #0]
 8003c04:	68d3      	ldr	r3, [r2, #12]
 8003c06:	f043 0308 	orr.w	r3, r3, #8
 8003c0a:	e7e2      	b.n	8003bd2 <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003c0c:	6802      	ldr	r2, [r0, #0]
 8003c0e:	68d3      	ldr	r3, [r2, #12]
 8003c10:	f043 0310 	orr.w	r3, r3, #16
 8003c14:	e7dd      	b.n	8003bd2 <HAL_TIM_PWM_Start_IT+0x22>
 8003c16:	bf00      	nop
 8003c18:	40010000 	.word	0x40010000

08003c1c <HAL_TIM_OC_Start_IT>:
 8003c1c:	f7ff bfc8 	b.w	8003bb0 <HAL_TIM_PWM_Start_IT>

08003c20 <HAL_TIMEx_CommutationCallback>:
 8003c20:	4770      	bx	lr

08003c22 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c22:	4770      	bx	lr

08003c24 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c24:	b084      	sub	sp, #16
 8003c26:	b538      	push	{r3, r4, r5, lr}
 8003c28:	ad05      	add	r5, sp, #20
 8003c2a:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c30:	2b01      	cmp	r3, #1
{
 8003c32:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c34:	d126      	bne.n	8003c84 <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c36:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3c:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c3e:	68c3      	ldr	r3, [r0, #12]
 8003c40:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c48:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c4a:	68c3      	ldr	r3, [r0, #12]
 8003c4c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003c50:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8003c52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003c54:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c56:	bf02      	ittt	eq
 8003c58:	68c3      	ldreq	r3, [r0, #12]
 8003c5a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8003c5e:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8003c60:	f000 f88a 	bl	8003d78 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 8003c64:	9b08      	ldr	r3, [sp, #32]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d107      	bne.n	8003c7a <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c6a:	68a3      	ldr	r3, [r4, #8]
 8003c6c:	f043 0306 	orr.w	r3, r3, #6
 8003c70:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c72:	68a3      	ldr	r3, [r4, #8]
 8003c74:	f043 0320 	orr.w	r3, r3, #32
 8003c78:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 8003c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c7e:	2000      	movs	r0, #0
 8003c80:	b004      	add	sp, #16
 8003c82:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c84:	68c3      	ldr	r3, [r0, #12]
 8003c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c8a:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8003c8c:	f000 f874 	bl	8003d78 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8003c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c94:	63a3      	str	r3, [r4, #56]	; 0x38
 8003c96:	e7e5      	b.n	8003c64 <USB_CoreInit+0x40>

08003c98 <USB_EnableGlobalInt>:
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003c98:	6883      	ldr	r3, [r0, #8]
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	4770      	bx	lr

08003ca4 <USB_DisableGlobalInt>:
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ca4:	6883      	ldr	r3, [r0, #8]
 8003ca6:	f023 0301 	bic.w	r3, r3, #1
 8003caa:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8003cac:	2000      	movs	r0, #0
 8003cae:	4770      	bx	lr

08003cb0 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8003cb0:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8003cb2:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8003cb4:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8003cb6:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003cba:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8003cbc:	d108      	bne.n	8003cd0 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8003cbe:	68c3      	ldr	r3, [r0, #12]
 8003cc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cc4:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 8003cc6:	2032      	movs	r0, #50	; 0x32
 8003cc8:	f7fd fa0e 	bl	80010e8 <HAL_Delay>
  
  return HAL_OK;
}
 8003ccc:	2000      	movs	r0, #0
 8003cce:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 8003cd0:	2900      	cmp	r1, #0
 8003cd2:	d1f8      	bne.n	8003cc6 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8003cd4:	68c3      	ldr	r3, [r0, #12]
 8003cd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cda:	60c3      	str	r3, [r0, #12]
 8003cdc:	e7f3      	b.n	8003cc6 <USB_SetCurrentMode+0x16>
	...

08003ce0 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8003ce0:	0189      	lsls	r1, r1, #6
 8003ce2:	f041 0120 	orr.w	r1, r1, #32
 8003ce6:	4a06      	ldr	r2, [pc, #24]	; (8003d00 <USB_FlushTxFifo+0x20>)
 8003ce8:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8003cea:	3a01      	subs	r2, #1
 8003cec:	d005      	beq.n	8003cfa <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003cee:	6903      	ldr	r3, [r0, #16]
 8003cf0:	f013 0320 	ands.w	r3, r3, #32
 8003cf4:	d1f9      	bne.n	8003cea <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003cfa:	2003      	movs	r0, #3
}
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	00030d41 	.word	0x00030d41

08003d04 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d04:	2310      	movs	r3, #16
 8003d06:	4a06      	ldr	r2, [pc, #24]	; (8003d20 <USB_FlushRxFifo+0x1c>)
 8003d08:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8003d0a:	3a01      	subs	r2, #1
 8003d0c:	d005      	beq.n	8003d1a <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d0e:	6903      	ldr	r3, [r0, #16]
 8003d10:	f013 0310 	ands.w	r3, r3, #16
 8003d14:	d1f9      	bne.n	8003d0a <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8003d16:	4618      	mov	r0, r3
 8003d18:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003d1a:	2003      	movs	r0, #3
}
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	00030d41 	.word	0x00030d41

08003d24 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003d24:	b510      	push	{r4, lr}
 8003d26:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 8003d2a:	b94c      	cbnz	r4, 8003d40 <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 8003d2c:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003d2e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8003d32:	f023 0303 	bic.w	r3, r3, #3
 8003d36:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8003d3a:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 8003d3c:	4299      	cmp	r1, r3
 8003d3e:	d101      	bne.n	8003d44 <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 8003d40:	2000      	movs	r0, #0
 8003d42:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003d44:	f851 0b04 	ldr.w	r0, [r1], #4
 8003d48:	6010      	str	r0, [r2, #0]
 8003d4a:	e7f7      	b.n	8003d3c <USB_WritePacket+0x18>

08003d4c <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 8003d4c:	3203      	adds	r2, #3
 8003d4e:	f022 0203 	bic.w	r2, r2, #3
 8003d52:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8003d54:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8003d58:	4291      	cmp	r1, r2
 8003d5a:	d101      	bne.n	8003d60 <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 8003d5c:	4608      	mov	r0, r1
 8003d5e:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8003d60:	6803      	ldr	r3, [r0, #0]
 8003d62:	f841 3b04 	str.w	r3, [r1], #4
 8003d66:	e7f7      	b.n	8003d58 <USB_ReadPacket+0xc>

08003d68 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 8003d68:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8003d6a:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8003d6c:	4010      	ands	r0, r2
 8003d6e:	4770      	bx	lr

08003d70 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8003d70:	6940      	ldr	r0, [r0, #20]
}
 8003d72:	f000 0001 	and.w	r0, r0, #1
 8003d76:	4770      	bx	lr

08003d78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d78:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8003d7e:	2003      	movs	r0, #3
 8003d80:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d82:	6902      	ldr	r2, [r0, #16]
 8003d84:	2a00      	cmp	r2, #0
 8003d86:	daf8      	bge.n	8003d7a <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003d88:	6903      	ldr	r3, [r0, #16]
 8003d8a:	4a06      	ldr	r2, [pc, #24]	; (8003da4 <USB_CoreReset+0x2c>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8003d92:	3a01      	subs	r2, #1
 8003d94:	d0f3      	beq.n	8003d7e <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d96:	6903      	ldr	r3, [r0, #16]
 8003d98:	f013 0301 	ands.w	r3, r3, #1
 8003d9c:	d1f9      	bne.n	8003d92 <USB_CoreReset+0x1a>
  
  return HAL_OK;
 8003d9e:	4618      	mov	r0, r3
}
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	00030d41 	.word	0x00030d41

08003da8 <USB_HostInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003da8:	b084      	sub	sp, #16
 8003daa:	b538      	push	{r3, r4, r5, lr}
 8003dac:	4604      	mov	r4, r0
 8003dae:	a805      	add	r0, sp, #20
 8003db0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  /* Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
#else
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSASEN);
 8003dba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003dbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dc0:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
 8003dc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003dc4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003dc8:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003dca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003dcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dd0:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8003dd2:	9b07      	ldr	r3, [sp, #28]
 8003dd4:	2b03      	cmp	r3, #3
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 8003dd6:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8003dda:	d13c      	bne.n	8003e56 <USB_HostInit+0xae>
 8003ddc:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8003de0:	d039      	beq.n	8003e56 <USB_HostInit+0xae>
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 8003de2:	f043 0304 	orr.w	r3, r3, #4
 8003de6:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003dea:	2110      	movs	r1, #16
 8003dec:	4620      	mov	r0, r4
 8003dee:	f7ff ff77 	bl	8003ce0 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8003df2:	4620      	mov	r0, r4
 8003df4:	f7ff ff86 	bl	8003d04 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003df8:	2300      	movs	r3, #0
 8003dfa:	9906      	ldr	r1, [sp, #24]
 8003dfc:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003e00:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 8003e04:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8003e06:	428b      	cmp	r3, r1
 8003e08:	d12a      	bne.n	8003e60 <USB_HostInit+0xb8>
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1U);
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f000 f873 	bl	8003ef8 <USB_DriveVbus>
  
  HAL_Delay(200U);
 8003e12:	20c8      	movs	r0, #200	; 0xc8
 8003e14:	f7fd f968 	bl	80010e8 <HAL_Delay>
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
  
  if(USBx == USB_OTG_FS)
 8003e1c:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295
 8003e24:	6163      	str	r3, [r4, #20]
  if(USBx == USB_OTG_FS)
 8003e26:	d120      	bne.n	8003e6a <USB_HostInit+0xc2>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U; 
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 8003e2c:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8003e30:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003e32:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <USB_HostInit+0xd8>)
 8003e34:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
  }
  
  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8003e38:	9b08      	ldr	r3, [sp, #32]
 8003e3a:	b91b      	cbnz	r3, 8003e44 <USB_HostInit+0x9c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8003e3c:	69a3      	ldr	r3, [r4, #24]
 8003e3e:	f043 0310 	orr.w	r3, r3, #16
 8003e42:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 8003e44:	69a2      	ldr	r2, [r4, #24]
 8003e46:	4b0f      	ldr	r3, [pc, #60]	; (8003e84 <USB_HostInit+0xdc>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
}
 8003e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e50:	2000      	movs	r0, #0
 8003e52:	b004      	add	sp, #16
 8003e54:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 8003e56:	f023 0304 	bic.w	r3, r3, #4
 8003e5a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8003e5e:	e7c4      	b.n	8003dea <USB_HostInit+0x42>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003e60:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003e62:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8003e64:	60d5      	str	r5, [r2, #12]
 8003e66:	3220      	adds	r2, #32
 8003e68:	e7cd      	b.n	8003e06 <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x200U; 
 8003e6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e6e:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 8003e70:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8003e74:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003e76:	4b04      	ldr	r3, [pc, #16]	; (8003e88 <USB_HostInit+0xe0>)
 8003e78:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003e7c:	e7dc      	b.n	8003e38 <USB_HostInit+0x90>
 8003e7e:	bf00      	nop
 8003e80:	004000e0 	.word	0x004000e0
 8003e84:	a3200008 	.word	0xa3200008
 8003e88:	00e00300 	.word	0x00e00300

08003e8c <USB_InitFSLSPClkSel>:
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003e8c:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8003e90:	f023 0303 	bic.w	r3, r3, #3
{
 8003e94:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003e96:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8003e9a:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8003e9e:	f001 0303 	and.w	r3, r1, #3
 8003ea2:	4323      	orrs	r3, r4
  
  if (freq ==  HCFG_48_MHZ)
 8003ea4:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003ea6:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8003eaa:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq ==  HCFG_48_MHZ)
 8003eae:	d104      	bne.n	8003eba <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 8003eb0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003eb4:	6053      	str	r3, [r2, #4]
  else if (freq ==  HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
  } 
  return HAL_OK;  
}
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	bd10      	pop	{r4, pc}
  else if (freq ==  HCFG_6_MHZ)
 8003eba:	2902      	cmp	r1, #2
    USBx_HOST->HFIR = 6000U;
 8003ebc:	bf04      	itt	eq
 8003ebe:	f241 7370 	movweq	r3, #6000	; 0x1770
 8003ec2:	6053      	streq	r3, [r2, #4]
 8003ec4:	e7f7      	b.n	8003eb6 <USB_InitFSLSPClkSel+0x2a>

08003ec6 <USB_ResetPort>:
  * @retval HAL status
  * @note   (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003ec6:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8003ec8:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003ecc:	9301      	str	r3, [sp, #4]
  
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8003ece:	9b01      	ldr	r3, [sp, #4]
 8003ed0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ed4:	9301      	str	r3, [sp, #4]
    USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 8003ed6:	9b01      	ldr	r3, [sp, #4]
 8003ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8003edc:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 8003ede:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay (10U);                                /* See Note #1 */
 8003ee2:	200a      	movs	r0, #10
 8003ee4:	f7fd f900 	bl	80010e8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 8003ee8:	9b01      	ldr	r3, [sp, #4]
  return HAL_OK;
}
 8003eea:	2000      	movs	r0, #0
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 8003eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ef0:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
}
 8003ef4:	b002      	add	sp, #8
 8003ef6:	bd10      	pop	{r4, pc}

08003ef8 <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003ef8:	b082      	sub	sp, #8
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 8003efa:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003efe:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 8003f00:	9b01      	ldr	r3, [sp, #4]
 8003f02:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003f06:	9301      	str	r3, [sp, #4]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003f08:	9b01      	ldr	r3, [sp, #4]
 8003f0a:	04da      	lsls	r2, r3, #19
 8003f0c:	d406      	bmi.n	8003f1c <USB_DriveVbus+0x24>
 8003f0e:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 8003f10:	bf02      	ittt	eq
 8003f12:	9b01      	ldreq	r3, [sp, #4]
 8003f14:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8003f18:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003f1c:	9b01      	ldr	r3, [sp, #4]
 8003f1e:	04db      	lsls	r3, r3, #19
 8003f20:	d505      	bpl.n	8003f2e <USB_DriveVbus+0x36>
 8003f22:	b921      	cbnz	r1, 8003f2e <USB_DriveVbus+0x36>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 8003f24:	9b01      	ldr	r3, [sp, #4]
 8003f26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f2a:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK; 
}
 8003f2e:	2000      	movs	r0, #0
 8003f30:	b002      	add	sp, #8
 8003f32:	4770      	bx	lr

08003f34 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 8003f34:	b082      	sub	sp, #8
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 8003f36:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003f3a:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17U);
 8003f3c:	9801      	ldr	r0, [sp, #4]
}
 8003f3e:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8003f42:	b002      	add	sp, #8
 8003f44:	4770      	bx	lr

08003f46 <USB_GetCurrentFrame>:
  * @param  USBx : Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003f46:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003f4a:	6880      	ldr	r0, [r0, #8]
}
 8003f4c:	b280      	uxth	r0, r0
 8003f4e:	4770      	bx	lr

08003f50 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8003f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 8003f52:	f500 64a0 	add.w	r4, r0, #1280	; 0x500
 8003f56:	eb04 1441 	add.w	r4, r4, r1, lsl #5
{
 8003f5a:	f89d 5018 	ldrb.w	r5, [sp, #24]
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 8003f5e:	f04f 36ff 	mov.w	r6, #4294967295
 8003f62:	60a6      	str	r6, [r4, #8]
 8003f64:	b257      	sxtb	r7, r2
  
  /* Enable channel interrupts required for this transfer. */
  switch (ep_type) 
 8003f66:	2d03      	cmp	r5, #3
 8003f68:	d814      	bhi.n	8003f94 <USB_HC_Init+0x44>
 8003f6a:	e8df f005 	tbb	[pc, r5]
 8003f6e:	5302      	.short	0x5302
 8003f70:	4d02      	.short	0x4d02
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8003f72:	f240 469d 	movw	r6, #1181	; 0x49d
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
 
    if (epnum & 0x80U) 
 8003f76:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8003f78:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 8003f7a:	da04      	bge.n	8003f86 <USB_HC_Init+0x36>
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003f7c:	68e6      	ldr	r6, [r4, #12]
 8003f7e:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 8003f82:	60e6      	str	r6, [r4, #12]
 8003f84:	e006      	b.n	8003f94 <USB_HC_Init+0x44>
      if(USBx != USB_OTG_FS)
 8003f86:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8003f8a:	d003      	beq.n	8003f94 <USB_HC_Init+0x44>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8003f8c:	68e6      	ldr	r6, [r4, #12]
 8003f8e:	f046 0660 	orr.w	r6, r6, #96	; 0x60
 8003f92:	60e6      	str	r6, [r4, #12]
    }
    break;
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8003f94:	f8d0 c418 	ldr.w	ip, [r0, #1048]	; 0x418
 8003f98:	2601      	movs	r6, #1
 8003f9a:	fa06 f101 	lsl.w	r1, r6, r1
 8003f9e:	ea41 010c 	orr.w	r1, r1, ip
 8003fa2:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003fa6:	6981      	ldr	r1, [r0, #24]
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8003fa8:	059b      	lsls	r3, r3, #22
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 8003faa:	02d2      	lsls	r2, r2, #11
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003fac:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8003fb0:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 8003fb4:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003fb8:	6181      	str	r1, [r0, #24]
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8003fba:	431a      	orrs	r2, r3
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 8003fbc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8003fc0:	f89d 3014 	ldrb.w	r3, [sp, #20]
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 8003fc4:	2f00      	cmp	r7, #0
 8003fc6:	bfb4      	ite	lt
 8003fc8:	f44f 4600 	movlt.w	r6, #32768	; 0x8000
 8003fcc:	2600      	movge	r6, #0
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 8003fce:	f3c1 010a 	ubfx	r1, r1, #0, #11
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8003fd2:	2b02      	cmp	r3, #2
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8003fd4:	ea4f 4385 	mov.w	r3, r5, lsl #18
 8003fd8:	ea42 0201 	orr.w	r2, r2, r1
 8003fdc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003fe0:	ea43 0302 	orr.w	r3, r3, r2
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8003fe4:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8003fe8:	ea43 0306 	orr.w	r3, r3, r6
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 8003fec:	bf0c      	ite	eq
 8003fee:	f44f 3000 	moveq.w	r0, #131072	; 0x20000
 8003ff2:	2000      	movne	r0, #0
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 8003ff4:	4303      	orrs	r3, r0
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 8003ff6:	6023      	str	r3, [r4, #0]
    
  if (ep_type == EP_TYPE_INTR)
 8003ff8:	2d03      	cmp	r5, #3
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8003ffa:	bf02      	ittt	eq
 8003ffc:	6823      	ldreq	r3, [r4, #0]
 8003ffe:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 8004002:	6023      	streq	r3, [r4, #0]
  }

  return HAL_OK; 
}
 8004004:	2000      	movs	r0, #0
 8004006:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8004008:	f240 669d 	movw	r6, #1693	; 0x69d
    if (epnum & 0x80U) 
 800400c:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 800400e:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 8004010:	dac0      	bge.n	8003f94 <USB_HC_Init+0x44>
 8004012:	e7b3      	b.n	8003f7c <USB_HC_Init+0x2c>
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8004014:	f240 2625 	movw	r6, #549	; 0x225
 8004018:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 800401a:	2f00      	cmp	r7, #0
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);      
 800401c:	bfbe      	ittt	lt
 800401e:	68e6      	ldrlt	r6, [r4, #12]
 8004020:	f446 76c0 	orrlt.w	r6, r6, #384	; 0x180
 8004024:	60e6      	strlt	r6, [r4, #12]
 8004026:	e7b5      	b.n	8003f94 <USB_HC_Init+0x44>

08004028 <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	; 0x28
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	4613      	mov	r3, r2
 8004034:	71fb      	strb	r3, [r7, #7]
  uint8_t  is_oddframe = 0; 
 8004036:	2300      	movs	r3, #0
 8004038:	777b      	strb	r3, [r7, #29]
  uint16_t len_words = 0;   
 800403a:	2300      	movs	r3, #0
 800403c:	837b      	strh	r3, [r7, #26]
  uint16_t num_packets = 0;
 800403e:	2300      	movs	r3, #0
 8004040:	83fb      	strh	r3, [r7, #30]
  uint16_t max_hc_pkt_count = 256;
 8004042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004046:	833b      	strh	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]
    
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004052:	d02b      	beq.n	80040ac <USB_HC_StartXfer+0x84>
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	791b      	ldrb	r3, [r3, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d127      	bne.n	80040ac <USB_HC_StartXfer+0x84>
  {
    if((dma == 0) && (hc->do_ping == 1U))
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10b      	bne.n	800407a <USB_HC_StartXfer+0x52>
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	795b      	ldrb	r3, [r3, #5]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d107      	bne.n	800407a <USB_HC_StartXfer+0x52>
    {
      USB_DoPing(USBx, hc->ch_num);
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	785b      	ldrb	r3, [r3, #1]
 800406e:	4619      	mov	r1, r3
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 fa0f 	bl	8004494 <USB_DoPing>
      return HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	e10d      	b.n	8004296 <USB_HC_StartXfer+0x26e>
    }
    else if(dma == 1)
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d115      	bne.n	80040ac <USB_HC_StartXfer+0x84>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	785b      	ldrb	r3, [r3, #1]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4413      	add	r3, r2
 800408a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408e:	4619      	mov	r1, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	785b      	ldrb	r3, [r3, #1]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4413      	add	r3, r2
 800409a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80040a4:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2200      	movs	r2, #0
 80040aa:	715a      	strb	r2, [r3, #5]
    }
  }
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d019      	beq.n	80040e8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1U) / hc->max_packet;
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	8912      	ldrh	r2, [r2, #8]
 80040bc:	4413      	add	r3, r2
 80040be:	3b01      	subs	r3, #1
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	8912      	ldrh	r2, [r2, #8]
 80040c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80040c8:	83fb      	strh	r3, [r7, #30]
    
    if (num_packets > max_hc_pkt_count)
 80040ca:	8bfa      	ldrh	r2, [r7, #30]
 80040cc:	8b3b      	ldrh	r3, [r7, #24]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d90c      	bls.n	80040ec <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80040d2:	8b3b      	ldrh	r3, [r7, #24]
 80040d4:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = num_packets * hc->max_packet;
 80040d6:	8bfb      	ldrh	r3, [r7, #30]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	8912      	ldrh	r2, [r2, #8]
 80040dc:	fb02 f303 	mul.w	r3, r2, r3
 80040e0:	461a      	mov	r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	611a      	str	r2, [r3, #16]
 80040e6:	e001      	b.n	80040ec <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1;
 80040e8:	2301      	movs	r3, #1
 80040ea:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	78db      	ldrb	r3, [r3, #3]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d007      	beq.n	8004104 <USB_HC_StartXfer+0xdc>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 80040f4:	8bfb      	ldrh	r3, [r7, #30]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	8912      	ldrh	r2, [r2, #8]
 80040fa:	fb02 f303 	mul.w	r3, r2, r3
 80040fe:	461a      	mov	r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	785b      	ldrb	r3, [r3, #1]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4413      	add	r3, r2
 800410e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004112:	4619      	mov	r1, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 800411c:	8bfb      	ldrh	r3, [r7, #30]
 800411e:	04db      	lsls	r3, r3, #19
 8004120:	4618      	mov	r0, r3
 8004122:	4b5f      	ldr	r3, [pc, #380]	; (80042a0 <USB_HC_StartXfer+0x278>)
 8004124:	4003      	ands	r3, r0
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004126:	431a      	orrs	r2, r3
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	7a9b      	ldrb	r3, [r3, #10]
 800412c:	075b      	lsls	r3, r3, #29
 800412e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8004132:	4313      	orrs	r3, r2
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8004134:	610b      	str	r3, [r1, #16]
  
  if (dma)
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	785b      	ldrb	r3, [r3, #1]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4413      	add	r3, r2
 8004146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414a:	461a      	mov	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	6153      	str	r3, [r2, #20]
  }
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	bf0c      	ite	eq
 8004162:	2301      	moveq	r3, #1
 8004164:	2300      	movne	r3, #0
 8004166:	b2db      	uxtb	r3, r3
 8004168:	777b      	strb	r3, [r7, #29]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	785b      	ldrb	r3, [r3, #1]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004178:	4619      	mov	r1, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	785b      	ldrb	r3, [r3, #1]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800418e:	600b      	str	r3, [r1, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	785b      	ldrb	r3, [r3, #1]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4413      	add	r3, r2
 800419a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419e:	4619      	mov	r1, r3
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	785b      	ldrb	r3, [r3, #1]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	7f7a      	ldrb	r2, [r7, #29]
 80041b2:	0752      	lsls	r2, r2, #29
 80041b4:	4313      	orrs	r3, r2
 80041b6:	600b      	str	r3, [r1, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	785b      	ldrb	r3, [r3, #1]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041d0:	617b      	str	r3, [r7, #20]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041d8:	617b      	str	r3, [r7, #20]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	785b      	ldrb	r3, [r3, #1]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e8:	461a      	mov	r2, r3
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	6013      	str	r3, [r2, #0]
  
  if (dma == 0) /* Slave mode */
 80041ee:	79fb      	ldrb	r3, [r7, #7]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d14f      	bne.n	8004294 <USB_HC_StartXfer+0x26c>
  {  
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	78db      	ldrb	r3, [r3, #3]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d14b      	bne.n	8004294 <USB_HC_StartXfer+0x26c>
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d047      	beq.n	8004294 <USB_HC_StartXfer+0x26c>
    {
      switch(hc->ep_type) 
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	79db      	ldrb	r3, [r3, #7]
 8004208:	2b03      	cmp	r3, #3
 800420a:	d831      	bhi.n	8004270 <USB_HC_StartXfer+0x248>
 800420c:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <USB_HC_StartXfer+0x1ec>)
 800420e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004212:	bf00      	nop
 8004214:	08004225 	.word	0x08004225
 8004218:	08004249 	.word	0x08004249
 800421c:	08004225 	.word	0x08004225
 8004220:	08004249 	.word	0x08004249
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        len_words = (hc->xfer_len + 3) / 4;
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	3303      	adds	r3, #3
 800422a:	089b      	lsrs	r3, r3, #2
 800422c:	837b      	strh	r3, [r7, #26]
        
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 800422e:	8b7a      	ldrh	r2, [r7, #26]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004234:	b29b      	uxth	r3, r3
 8004236:	429a      	cmp	r2, r3
 8004238:	d91c      	bls.n	8004274 <USB_HC_StartXfer+0x24c>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	f043 0220 	orr.w	r2, r3, #32
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	619a      	str	r2, [r3, #24]
        }
        break;
 8004246:	e015      	b.n	8004274 <USB_HC_StartXfer+0x24c>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3) / 4;
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	3303      	adds	r3, #3
 800424e:	089b      	lsrs	r3, r3, #2
 8004250:	837b      	strh	r3, [r7, #26]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 8004252:	8b7a      	ldrh	r2, [r7, #26]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	b29b      	uxth	r3, r3
 800425e:	429a      	cmp	r2, r3
 8004260:	d90a      	bls.n	8004278 <USB_HC_StartXfer+0x250>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	619a      	str	r2, [r3, #24]
        }
        break;
 800426e:	e003      	b.n	8004278 <USB_HC_StartXfer+0x250>
        
      default:
        break;
 8004270:	bf00      	nop
 8004272:	e002      	b.n	800427a <USB_HC_StartXfer+0x252>
        break;
 8004274:	bf00      	nop
 8004276:	e000      	b.n	800427a <USB_HC_StartXfer+0x252>
        break;
 8004278:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	68d9      	ldr	r1, [r3, #12]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	785a      	ldrb	r2, [r3, #1]
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	b298      	uxth	r0, r3
 8004288:	2300      	movs	r3, #0
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	4603      	mov	r3, r0
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f7ff fd48 	bl	8003d24 <USB_WritePacket>
    }
  }
  
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	1ff80000 	.word	0x1ff80000

080042a4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx : Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	b29b      	uxth	r3, r3
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <USB_HC_Halt>:
  * @param  hc_num : Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b085      	sub	sp, #20
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	460b      	mov	r3, r1
 80042cc:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	0c9b      	lsrs	r3, r3, #18
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00b      	beq.n	8004302 <USB_HC_Halt+0x40>
 80042ea:	78fb      	ldrb	r3, [r7, #3]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f6:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 80042f8:	0c9b      	lsrs	r3, r3, #18
 80042fa:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d160      	bne.n	80043c4 <USB_HC_Halt+0x102>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4413      	add	r3, r2
 800430a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800430e:	4619      	mov	r1, r3
 8004310:	78fb      	ldrb	r3, [r7, #3]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4413      	add	r3, r2
 8004318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004322:	600b      	str	r3, [r1, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d135      	bne.n	800439c <USB_HC_Halt+0xda>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4413      	add	r3, r2
 8004338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433c:	4619      	mov	r1, r3
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4413      	add	r3, r2
 8004346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004350:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4413      	add	r3, r2
 800435a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435e:	4619      	mov	r1, r3
 8004360:	78fb      	ldrb	r3, [r7, #3]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4413      	add	r3, r2
 8004368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004372:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3301      	adds	r3, #1
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004380:	d81e      	bhi.n	80043c0 <USB_HC_Halt+0xfe>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8004382:	78fb      	ldrb	r3, [r7, #3]
 8004384:	015a      	lsls	r2, r3, #5
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4413      	add	r3, r2
 800438a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004394:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004398:	d0ec      	beq.n	8004374 <USB_HC_Halt+0xb2>
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 800439a:	e074      	b.n	8004486 <USB_HC_Halt+0x1c4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 800439c:	78fb      	ldrb	r3, [r7, #3]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a8:	4619      	mov	r1, r3
 80043aa:	78fb      	ldrb	r3, [r7, #3]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043bc:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80043be:	e062      	b.n	8004486 <USB_HC_Halt+0x1c4>
          break;
 80043c0:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80043c2:	e060      	b.n	8004486 <USB_HC_Halt+0x1c4>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d0:	4619      	mov	r1, r3
 80043d2:	78fb      	ldrb	r3, [r7, #3]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043e4:	600b      	str	r3, [r1, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d135      	bne.n	8004460 <USB_HC_Halt+0x19e>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80043f4:	78fb      	ldrb	r3, [r7, #3]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004400:	4619      	mov	r1, r3
 8004402:	78fb      	ldrb	r3, [r7, #3]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4413      	add	r3, r2
 800440a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004414:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8004416:	78fb      	ldrb	r3, [r7, #3]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4413      	add	r3, r2
 800441e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004422:	4619      	mov	r1, r3
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4413      	add	r3, r2
 800442c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004436:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3301      	adds	r3, #1
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004444:	d81e      	bhi.n	8004484 <USB_HC_Halt+0x1c2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8004446:	78fb      	ldrb	r3, [r7, #3]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4413      	add	r3, r2
 800444e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004458:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800445c:	d0ec      	beq.n	8004438 <USB_HC_Halt+0x176>
 800445e:	e012      	b.n	8004486 <USB_HC_Halt+0x1c4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8004460:	78fb      	ldrb	r3, [r7, #3]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4413      	add	r3, r2
 8004468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446c:	4619      	mov	r1, r3
 800446e:	78fb      	ldrb	r3, [r7, #3]
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4413      	add	r3, r2
 8004476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004480:	600b      	str	r3, [r1, #0]
 8004482:	e000      	b.n	8004486 <USB_HC_Halt+0x1c4>
          break;
 8004484:	bf00      	nop
    }
  }
  
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <USB_DoPing>:
  * @param  hc_num : Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1U;
 80044a0:	2301      	movs	r3, #1
 80044a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 80044a8:	78fb      	ldrb	r3, [r7, #3]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b4:	461a      	mov	r2, r3
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	04db      	lsls	r3, r3, #19
 80044ba:	4619      	mov	r1, r3
 80044bc:	4b12      	ldr	r3, [pc, #72]	; (8004508 <USB_DoPing+0x74>)
 80044be:	400b      	ands	r3, r1
 80044c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044c4:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80044c6:	78fb      	ldrb	r3, [r7, #3]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044dc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044e4:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80044e6:	78fb      	ldrb	r3, [r7, #3]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f2:	461a      	mov	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;  
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	1ff80000 	.word	0x1ff80000

0800450c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx : Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff fbc3 	bl	8003ca4 <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 800451e:	2110      	movs	r1, #16
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff fbdd 	bl	8003ce0 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7ff fbec 	bl	8003d04 <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 800452c:	2300      	movs	r3, #0
 800452e:	75fb      	strb	r3, [r7, #23]
 8004530:	e01f      	b.n	8004572 <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 8004532:	7dfb      	ldrb	r3, [r7, #23]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4413      	add	r3, r2
 800453a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004548:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004550:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004558:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 800455a:	7dfb      	ldrb	r3, [r7, #23]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4413      	add	r3, r2
 8004562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004566:	461a      	mov	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 800456c:	7dfb      	ldrb	r3, [r7, #23]
 800456e:	3301      	adds	r3, #1
 8004570:	75fb      	strb	r3, [r7, #23]
 8004572:	7dfb      	ldrb	r3, [r7, #23]
 8004574:	2b0f      	cmp	r3, #15
 8004576:	d9dc      	bls.n	8004532 <USB_StopHost+0x26>
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0; i <= 15; i++)
 8004578:	2300      	movs	r3, #0
 800457a:	75fb      	strb	r3, [r7, #23]
 800457c:	e034      	b.n	80045e8 <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 800457e:	7dfb      	ldrb	r3, [r7, #23]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4413      	add	r3, r2
 8004586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004594:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800459c:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045a4:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 80045a6:	7dfb      	ldrb	r3, [r7, #23]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b2:	461a      	mov	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000U) 
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	3301      	adds	r3, #1
 80045bc:	613b      	str	r3, [r7, #16]
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045c4:	d80c      	bhi.n	80045e0 <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80045c6:	7dfb      	ldrb	r3, [r7, #23]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045dc:	d0ec      	beq.n	80045b8 <USB_StopHost+0xac>
 80045de:	e000      	b.n	80045e2 <USB_StopHost+0xd6>
        break;
 80045e0:	bf00      	nop
  for (i = 0; i <= 15; i++)
 80045e2:	7dfb      	ldrb	r3, [r7, #23]
 80045e4:	3301      	adds	r3, #1
 80045e6:	75fb      	strb	r3, [r7, #23]
 80045e8:	7dfb      	ldrb	r3, [r7, #23]
 80045ea:	2b0f      	cmp	r3, #15
 80045ec:	d9c7      	bls.n	800457e <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045f4:	461a      	mov	r2, r3
 80045f6:	f04f 33ff 	mov.w	r3, #4294967295
 80045fa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004602:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff fb47 	bl	8003c98 <USB_EnableGlobalInt>
  return HAL_OK;  
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004614:	4b03      	ldr	r3, [pc, #12]	; (8004624 <disk_status+0x10>)
 8004616:	181a      	adds	r2, r3, r0
 8004618:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800461c:	7a10      	ldrb	r0, [r2, #8]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	4718      	bx	r3
 8004624:	2000068c 	.word	0x2000068c

08004628 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <disk_initialize+0x1c>)
 800462a:	5c1a      	ldrb	r2, [r3, r0]
 800462c:	b942      	cbnz	r2, 8004640 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 800462e:	2201      	movs	r2, #1
 8004630:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004632:	181a      	adds	r2, r3, r0
 8004634:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004638:	7a10      	ldrb	r0, [r2, #8]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4718      	bx	r3
  }
  return stat;
}
 8004640:	2000      	movs	r0, #0
 8004642:	4770      	bx	lr
 8004644:	2000068c 	.word	0x2000068c

08004648 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004648:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800464a:	4c05      	ldr	r4, [pc, #20]	; (8004660 <disk_read+0x18>)
 800464c:	1825      	adds	r5, r4, r0
 800464e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8004652:	6860      	ldr	r0, [r4, #4]
 8004654:	6884      	ldr	r4, [r0, #8]
 8004656:	7a28      	ldrb	r0, [r5, #8]
 8004658:	46a4      	mov	ip, r4
  return res;
}
 800465a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800465c:	4760      	bx	ip
 800465e:	bf00      	nop
 8004660:	2000068c 	.word	0x2000068c

08004664 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004664:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004666:	4c05      	ldr	r4, [pc, #20]	; (800467c <disk_write+0x18>)
 8004668:	1825      	adds	r5, r4, r0
 800466a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800466e:	6860      	ldr	r0, [r4, #4]
 8004670:	68c4      	ldr	r4, [r0, #12]
 8004672:	7a28      	ldrb	r0, [r5, #8]
 8004674:	46a4      	mov	ip, r4
  return res;
}
 8004676:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004678:	4760      	bx	ip
 800467a:	bf00      	nop
 800467c:	2000068c 	.word	0x2000068c

08004680 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004680:	4b05      	ldr	r3, [pc, #20]	; (8004698 <disk_ioctl+0x18>)
{
 8004682:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004684:	181c      	adds	r4, r3, r0
 8004686:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800468a:	7a20      	ldrb	r0, [r4, #8]
 800468c:	685b      	ldr	r3, [r3, #4]
  return res;
}
 800468e:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	4718      	bx	r3
 8004696:	bf00      	nop
 8004698:	2000068c 	.word	0x2000068c

0800469c <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 800469c:	2000      	movs	r0, #0
 800469e:	4770      	bx	lr

080046a0 <USBH_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
  return RES_OK;
}
 80046a0:	2000      	movs	r0, #0
 80046a2:	4770      	bx	lr

080046a4 <USBH_status>:
  */
DSTATUS USBH_status(BYTE lun)
{
  DRESULT res = RES_ERROR;
  
  if(USBH_MSC_UnitIsReady(&HOST_HANDLE, lun))
 80046a4:	4601      	mov	r1, r0
{
 80046a6:	b508      	push	{r3, lr}
  if(USBH_MSC_UnitIsReady(&HOST_HANDLE, lun))
 80046a8:	4803      	ldr	r0, [pc, #12]	; (80046b8 <USBH_status+0x14>)
 80046aa:	f002 f8ec 	bl	8006886 <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }
  
  return res;
}
 80046ae:	fab0 f080 	clz	r0, r0
 80046b2:	0940      	lsrs	r0, r0, #5
 80046b4:	bd08      	pop	{r3, pc}
 80046b6:	bf00      	nop
 80046b8:	20000944 	.word	0x20000944

080046bc <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80046bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c0:	4606      	mov	r6, r0
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;

  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 80046c2:	0788      	lsls	r0, r1, #30
{
 80046c4:	b090      	sub	sp, #64	; 0x40
 80046c6:	4690      	mov	r8, r2
  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 80046c8:	d032      	beq.n	8004730 <USBH_read+0x74>
 80046ca:	4c1f      	ldr	r4, [pc, #124]	; (8004748 <USBH_read+0x8c>)
  {
#if _USE_BUFF_WO_ALIGNMENT == 0
    while ((count--)&&(status == USBH_OK))
    {
      status = USBH_MSC_Read(&HOST_HANDLE, lun, sector + count, (uint8_t *)scratch, 1);
 80046cc:	4f1f      	ldr	r7, [pc, #124]	; (800474c <USBH_read+0x90>)
 80046ce:	f8df a080 	ldr.w	sl, [pc, #128]	; 8004750 <USBH_read+0x94>
 80046d2:	441c      	add	r4, r3
 80046d4:	1e5d      	subs	r5, r3, #1
 80046d6:	eb01 2444 	add.w	r4, r1, r4, lsl #9
 80046da:	f04f 0901 	mov.w	r9, #1
    while ((count--)&&(status == USBH_OK))
 80046de:	1c6b      	adds	r3, r5, #1
 80046e0:	d101      	bne.n	80046e6 <USBH_read+0x2a>
    status = USBH_MSC_Read(&HOST_HANDLE, lun, sector, buff, count);
  }
  
  if(status == USBH_OK)
  {
    res = RES_OK;
 80046e2:	2000      	movs	r0, #0
 80046e4:	e018      	b.n	8004718 <USBH_read+0x5c>
      status = USBH_MSC_Read(&HOST_HANDLE, lun, sector + count, (uint8_t *)scratch, 1);
 80046e6:	eb08 0205 	add.w	r2, r8, r5
 80046ea:	f8cd 9000 	str.w	r9, [sp]
 80046ee:	463b      	mov	r3, r7
 80046f0:	4631      	mov	r1, r6
 80046f2:	4650      	mov	r0, sl
 80046f4:	f002 f8f0 	bl	80068d8 <USBH_MSC_Read>
 80046f8:	3d01      	subs	r5, #1
      if(status == USBH_OK)
 80046fa:	b180      	cbz	r0, 800471e <USBH_read+0x62>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 80046fc:	aa03      	add	r2, sp, #12
 80046fe:	4631      	mov	r1, r6
 8004700:	4813      	ldr	r0, [pc, #76]	; (8004750 <USBH_read+0x94>)
 8004702:	f002 f8d1 	bl	80068a8 <USBH_MSC_GetLUNInfo>
    
    switch (info.sense.asc)
 8004706:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800470a:	2b28      	cmp	r3, #40	; 0x28
 800470c:	d019      	beq.n	8004742 <USBH_read+0x86>
 800470e:	2b3a      	cmp	r3, #58	; 0x3a
 8004710:	d017      	beq.n	8004742 <USBH_read+0x86>
 8004712:	2b04      	cmp	r3, #4
 8004714:	d015      	beq.n	8004742 <USBH_read+0x86>
      USBH_ErrLog ("USB Disk is not ready!");  
      res = RES_NOTRDY;
      break; 
      
    default:
      res = RES_ERROR;
 8004716:	2001      	movs	r0, #1
      break;
    }
  }
  
  return res;
}
 8004718:	b010      	add	sp, #64	; 0x40
 800471a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memcpy (&buff[count * _MAX_SS] ,scratch, _MAX_SS);
 800471e:	4620      	mov	r0, r4
 8004720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004724:	4639      	mov	r1, r7
 8004726:	f004 ffa7 	bl	8009678 <memcpy>
 800472a:	f5a4 7400 	sub.w	r4, r4, #512	; 0x200
 800472e:	e7d6      	b.n	80046de <USBH_read+0x22>
    status = USBH_MSC_Read(&HOST_HANDLE, lun, sector, buff, count);
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	4807      	ldr	r0, [pc, #28]	; (8004750 <USBH_read+0x94>)
 8004734:	460b      	mov	r3, r1
 8004736:	4631      	mov	r1, r6
 8004738:	f002 f8ce 	bl	80068d8 <USBH_MSC_Read>
  if(status == USBH_OK)
 800473c:	2800      	cmp	r0, #0
 800473e:	d0d0      	beq.n	80046e2 <USBH_read+0x26>
 8004740:	e7dc      	b.n	80046fc <USBH_read+0x40>
      res = RES_NOTRDY;
 8004742:	2003      	movs	r0, #3
 8004744:	e7e8      	b.n	8004718 <USBH_read+0x5c>
 8004746:	bf00      	nop
 8004748:	007fffff 	.word	0x007fffff
 800474c:	2000043c 	.word	0x2000043c
 8004750:	20000944 	.word	0x20000944

08004754 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004754:	b510      	push	{r4, lr}
 8004756:	4614      	mov	r4, r2
 8004758:	b08e      	sub	sp, #56	; 0x38
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;
  
  switch (cmd)
 800475a:	2903      	cmp	r1, #3
 800475c:	d803      	bhi.n	8004766 <USBH_ioctl+0x12>
 800475e:	e8df f001 	tbb	[pc, r1]
 8004762:	051a      	.short	0x051a
 8004764:	1010      	.short	0x1010
      res = RES_ERROR;
    }
    break;
    
  default:
    res = RES_PARERR;
 8004766:	2004      	movs	r0, #4
  }
  
  return res;
}
 8004768:	b00e      	add	sp, #56	; 0x38
 800476a:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 800476c:	4601      	mov	r1, r0
 800476e:	aa01      	add	r2, sp, #4
 8004770:	480a      	ldr	r0, [pc, #40]	; (800479c <USBH_ioctl+0x48>)
 8004772:	f002 f899 	bl	80068a8 <USBH_MSC_GetLUNInfo>
 8004776:	b910      	cbnz	r0, 800477e <USBH_ioctl+0x2a>
      *(DWORD*)buff = info.capacity.block_nbr;
 8004778:	9b02      	ldr	r3, [sp, #8]
      *(DWORD*)buff = info.capacity.block_size;
 800477a:	6023      	str	r3, [r4, #0]
 800477c:	e7f4      	b.n	8004768 <USBH_ioctl+0x14>
      res = RES_ERROR;
 800477e:	2001      	movs	r0, #1
 8004780:	e7f2      	b.n	8004768 <USBH_ioctl+0x14>
    if(USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info) == USBH_OK)
 8004782:	4601      	mov	r1, r0
 8004784:	aa01      	add	r2, sp, #4
 8004786:	4805      	ldr	r0, [pc, #20]	; (800479c <USBH_ioctl+0x48>)
 8004788:	f002 f88e 	bl	80068a8 <USBH_MSC_GetLUNInfo>
 800478c:	2800      	cmp	r0, #0
 800478e:	d1f6      	bne.n	800477e <USBH_ioctl+0x2a>
      *(DWORD*)buff = info.capacity.block_size;
 8004790:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8004794:	e7f1      	b.n	800477a <USBH_ioctl+0x26>
    res = RES_OK;
 8004796:	2000      	movs	r0, #0
 8004798:	e7e6      	b.n	8004768 <USBH_ioctl+0x14>
 800479a:	bf00      	nop
 800479c:	20000944 	.word	0x20000944

080047a0 <USBH_write>:
{
 80047a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047a4:	4606      	mov	r6, r0
  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 80047a6:	0788      	lsls	r0, r1, #30
{
 80047a8:	b091      	sub	sp, #68	; 0x44
 80047aa:	4617      	mov	r7, r2
  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 80047ac:	d035      	beq.n	800481a <USBH_write+0x7a>
 80047ae:	4c20      	ldr	r4, [pc, #128]	; (8004830 <USBH_write+0x90>)
      memcpy (scratch, &buff[count * _MAX_SS], _MAX_SS);
 80047b0:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8004838 <USBH_write+0x98>
      status = USBH_MSC_Write(&HOST_HANDLE, lun, sector + count, (BYTE *)scratch, 1) ;
 80047b4:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8004834 <USBH_write+0x94>
 80047b8:	441c      	add	r4, r3
 80047ba:	1e5d      	subs	r5, r3, #1
 80047bc:	eb01 2444 	add.w	r4, r1, r4, lsl #9
  if ((DWORD)buff & 3) /* DMA Alignment issue, do single up to aligned buffer */
 80047c0:	2000      	movs	r0, #0
    while (count--)
 80047c2:	1c6b      	adds	r3, r5, #1
 80047c4:	d101      	bne.n	80047ca <USBH_write+0x2a>
  if(status == USBH_OK)
 80047c6:	b308      	cbz	r0, 800480c <USBH_write+0x6c>
 80047c8:	e013      	b.n	80047f2 <USBH_write+0x52>
      memcpy (scratch, &buff[count * _MAX_SS], _MAX_SS);
 80047ca:	4621      	mov	r1, r4
 80047cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047d0:	4640      	mov	r0, r8
 80047d2:	f004 ff51 	bl	8009678 <memcpy>
      status = USBH_MSC_Write(&HOST_HANDLE, lun, sector + count, (BYTE *)scratch, 1) ;
 80047d6:	2301      	movs	r3, #1
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	197a      	adds	r2, r7, r5
 80047dc:	4643      	mov	r3, r8
 80047de:	4631      	mov	r1, r6
 80047e0:	4648      	mov	r0, r9
 80047e2:	f002 f8bc 	bl	800695e <USBH_MSC_Write>
      if(status == USBH_FAIL)
 80047e6:	2802      	cmp	r0, #2
 80047e8:	f105 35ff 	add.w	r5, r5, #4294967295
 80047ec:	f5a4 7400 	sub.w	r4, r4, #512	; 0x200
 80047f0:	d1e7      	bne.n	80047c2 <USBH_write+0x22>
    USBH_MSC_GetLUNInfo(&HOST_HANDLE, lun, &info); 
 80047f2:	aa03      	add	r2, sp, #12
 80047f4:	4631      	mov	r1, r6
 80047f6:	480f      	ldr	r0, [pc, #60]	; (8004834 <USBH_write+0x94>)
 80047f8:	f002 f856 	bl	80068a8 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 80047fc:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8004800:	2b27      	cmp	r3, #39	; 0x27
 8004802:	d013      	beq.n	800482c <USBH_write+0x8c>
 8004804:	d805      	bhi.n	8004812 <USBH_write+0x72>
 8004806:	2b04      	cmp	r3, #4
 8004808:	d10e      	bne.n	8004828 <USBH_write+0x88>
      res = RES_NOTRDY;
 800480a:	2003      	movs	r0, #3
}
 800480c:	b011      	add	sp, #68	; 0x44
 800480e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch (info.sense.asc)
 8004812:	2b28      	cmp	r3, #40	; 0x28
 8004814:	d0f9      	beq.n	800480a <USBH_write+0x6a>
 8004816:	2b3a      	cmp	r3, #58	; 0x3a
 8004818:	e7f6      	b.n	8004808 <USBH_write+0x68>
    status = USBH_MSC_Write(&HOST_HANDLE, lun, sector, (BYTE *)buff, count);
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	4805      	ldr	r0, [pc, #20]	; (8004834 <USBH_write+0x94>)
 800481e:	460b      	mov	r3, r1
 8004820:	4631      	mov	r1, r6
 8004822:	f002 f89c 	bl	800695e <USBH_MSC_Write>
 8004826:	e7ce      	b.n	80047c6 <USBH_write+0x26>
      res = RES_ERROR;
 8004828:	2001      	movs	r0, #1
 800482a:	e7ef      	b.n	800480c <USBH_write+0x6c>
      res = RES_WRPRT;
 800482c:	2002      	movs	r0, #2
 800482e:	e7ed      	b.n	800480c <USBH_write+0x6c>
 8004830:	007fffff 	.word	0x007fffff
 8004834:	20000944 	.word	0x20000944
 8004838:	2000043c 	.word	0x2000043c

0800483c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800483c:	3801      	subs	r0, #1
 800483e:	440a      	add	r2, r1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004840:	4291      	cmp	r1, r2
 8004842:	d100      	bne.n	8004846 <mem_cpy+0xa>
		*d++ = *s++;
}
 8004844:	4770      	bx	lr
		*d++ = *s++;
 8004846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800484a:	f800 3f01 	strb.w	r3, [r0, #1]!
 800484e:	e7f7      	b.n	8004840 <mem_cpy+0x4>

08004850 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004850:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8004852:	4290      	cmp	r0, r2
 8004854:	d100      	bne.n	8004858 <mem_set+0x8>
		*d++ = (BYTE)val;
}
 8004856:	4770      	bx	lr
		*d++ = (BYTE)val;
 8004858:	f800 1b01 	strb.w	r1, [r0], #1
 800485c:	e7f9      	b.n	8004852 <mem_set+0x2>
	...

08004860 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004860:	4a17      	ldr	r2, [pc, #92]	; (80048c0 <chk_lock+0x60>)
 8004862:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004864:	2400      	movs	r4, #0
 8004866:	4623      	mov	r3, r4
 8004868:	4616      	mov	r6, r2
		if (Files[i].fs) {	/* Existing entry */
 800486a:	6815      	ldr	r5, [r2, #0]
 800486c:	b1c5      	cbz	r5, 80048a0 <chk_lock+0x40>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800486e:	f8d0 7200 	ldr.w	r7, [r0, #512]	; 0x200
 8004872:	42bd      	cmp	r5, r7
 8004874:	d115      	bne.n	80048a2 <chk_lock+0x42>
 8004876:	6857      	ldr	r7, [r2, #4]
 8004878:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 800487c:	42af      	cmp	r7, r5
 800487e:	d110      	bne.n	80048a2 <chk_lock+0x42>
				Files[i].clu == dp->sclust &&
 8004880:	8917      	ldrh	r7, [r2, #8]
 8004882:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 8004886:	42af      	cmp	r7, r5
 8004888:	d10b      	bne.n	80048a2 <chk_lock+0x42>
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800488a:	b9b9      	cbnz	r1, 80048bc <chk_lock+0x5c>
 800488c:	220c      	movs	r2, #12
 800488e:	fb02 6303 	mla	r3, r2, r3, r6
 8004892:	895b      	ldrh	r3, [r3, #10]
 8004894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004898:	bf14      	ite	ne
 800489a:	2000      	movne	r0, #0
 800489c:	2010      	moveq	r0, #16
 800489e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 80048a0:	2401      	movs	r4, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 80048a2:	3301      	adds	r3, #1
 80048a4:	2b06      	cmp	r3, #6
 80048a6:	f102 020c 	add.w	r2, r2, #12
 80048aa:	d1de      	bne.n	800486a <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80048ac:	b10c      	cbz	r4, 80048b2 <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80048ae:	2000      	movs	r0, #0
 80048b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80048b2:	2902      	cmp	r1, #2
 80048b4:	bf0c      	ite	eq
 80048b6:	2000      	moveq	r0, #0
 80048b8:	2012      	movne	r0, #18
 80048ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80048bc:	2010      	movs	r0, #16
 80048be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048c0:	20000640 	.word	0x20000640

080048c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80048c4:	4a21      	ldr	r2, [pc, #132]	; (800494c <inc_lock+0x88>)
 80048c6:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 80048c8:	f8d0 7200 	ldr.w	r7, [r0, #512]	; 0x200
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80048cc:	2300      	movs	r3, #0
 80048ce:	4614      	mov	r4, r2
		if (Files[i].fs == dp->fs &&
 80048d0:	6815      	ldr	r5, [r2, #0]
 80048d2:	42bd      	cmp	r5, r7
 80048d4:	d109      	bne.n	80048ea <inc_lock+0x26>
 80048d6:	6856      	ldr	r6, [r2, #4]
 80048d8:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
 80048dc:	42ae      	cmp	r6, r5
 80048de:	d104      	bne.n	80048ea <inc_lock+0x26>
			Files[i].clu == dp->sclust &&
 80048e0:	8916      	ldrh	r6, [r2, #8]
 80048e2:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
 80048e6:	42ae      	cmp	r6, r5
 80048e8:	d025      	beq.n	8004936 <inc_lock+0x72>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80048ea:	3301      	adds	r3, #1
 80048ec:	2b06      	cmp	r3, #6
 80048ee:	f102 020c 	add.w	r2, r2, #12
 80048f2:	d1ed      	bne.n	80048d0 <inc_lock+0xc>
 80048f4:	2300      	movs	r3, #0
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80048f6:	220c      	movs	r2, #12
 80048f8:	fb02 f503 	mul.w	r5, r2, r3
 80048fc:	5966      	ldr	r6, [r4, r5]
 80048fe:	b9ae      	cbnz	r6, 800492c <inc_lock+0x68>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 8004900:	1962      	adds	r2, r4, r5
 8004902:	5167      	str	r7, [r4, r5]
		Files[i].clu = dp->sclust;
 8004904:	f8d0 5208 	ldr.w	r5, [r0, #520]	; 0x208
		Files[i].idx = dp->index;
 8004908:	f8b0 0206 	ldrh.w	r0, [r0, #518]	; 0x206
		Files[i].clu = dp->sclust;
 800490c:	6055      	str	r5, [r2, #4]
		Files[i].idx = dp->index;
 800490e:	8110      	strh	r0, [r2, #8]
		Files[i].ctr = 0;
 8004910:	8156      	strh	r6, [r2, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004912:	b9c1      	cbnz	r1, 8004946 <inc_lock+0x82>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004914:	220c      	movs	r2, #12
 8004916:	fb02 4203 	mla	r2, r2, r3, r4
 800491a:	8952      	ldrh	r2, [r2, #10]
 800491c:	3201      	adds	r2, #1
 800491e:	b292      	uxth	r2, r2
 8004920:	210c      	movs	r1, #12
 8004922:	fb01 4403 	mla	r4, r1, r3, r4

	return i + 1;
 8004926:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004928:	8162      	strh	r2, [r4, #10]
	return i + 1;
 800492a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800492c:	3301      	adds	r3, #1
 800492e:	2b06      	cmp	r3, #6
 8004930:	d1e2      	bne.n	80048f8 <inc_lock+0x34>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004932:	2000      	movs	r0, #0
 8004934:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004936:	2900      	cmp	r1, #0
 8004938:	d0ec      	beq.n	8004914 <inc_lock+0x50>
 800493a:	220c      	movs	r2, #12
 800493c:	fb02 4203 	mla	r2, r2, r3, r4
 8004940:	8952      	ldrh	r2, [r2, #10]
 8004942:	2a00      	cmp	r2, #0
 8004944:	d1f5      	bne.n	8004932 <inc_lock+0x6e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004946:	f44f 7280 	mov.w	r2, #256	; 0x100
 800494a:	e7e9      	b.n	8004920 <inc_lock+0x5c>
 800494c:	20000640 	.word	0x20000640

08004950 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004950:	b530      	push	{r4, r5, lr}
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004952:	1e45      	subs	r5, r0, #1
 8004954:	2d05      	cmp	r5, #5
 8004956:	d811      	bhi.n	800497c <dec_lock+0x2c>
		n = Files[i].ctr;
 8004958:	490a      	ldr	r1, [pc, #40]	; (8004984 <dec_lock+0x34>)
 800495a:	220c      	movs	r2, #12
 800495c:	fb02 1305 	mla	r3, r2, r5, r1
 8004960:	895c      	ldrh	r4, [r3, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n) n--;					/* Decrement read mode open count */
 8004962:	f424 7380 	bic.w	r3, r4, #256	; 0x100
 8004966:	b298      	uxth	r0, r3
 8004968:	b108      	cbz	r0, 800496e <dec_lock+0x1e>
 800496a:	3c01      	subs	r4, #1
 800496c:	b2a0      	uxth	r0, r4
		Files[i].ctr = n;
 800496e:	fb02 f305 	mul.w	r3, r2, r5
 8004972:	18ca      	adds	r2, r1, r3
 8004974:	8150      	strh	r0, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004976:	b918      	cbnz	r0, 8004980 <dec_lock+0x30>
 8004978:	50c8      	str	r0, [r1, r3]
 800497a:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800497c:	2002      	movs	r0, #2
 800497e:	bd30      	pop	{r4, r5, pc}
		res = FR_OK;
 8004980:	2000      	movs	r0, #0
	}
	return res;
}
 8004982:	bd30      	pop	{r4, r5, pc}
 8004984:	20000640 	.word	0x20000640

08004988 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004988:	4602      	mov	r2, r0
 800498a:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 800498e:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8004990:	01c3      	lsls	r3, r0, #7
 8004992:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8004996:	f812 0b01 	ldrb.w	r0, [r2], #1
 800499a:	fa50 f383 	uxtab	r3, r0, r3
 800499e:	428a      	cmp	r2, r1
 80049a0:	b2d8      	uxtb	r0, r3
 80049a2:	d1f5      	bne.n	8004990 <sum_sfn+0x8>
	return sum;
}
 80049a4:	4770      	bx	lr

080049a6 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80049a6:	6802      	ldr	r2, [r0, #0]
{
 80049a8:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 80049aa:	b152      	cbz	r2, 80049c2 <get_ldnumber+0x1c>
 80049ac:	4611      	mov	r1, r2
 80049ae:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80049b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049b4:	2c1f      	cmp	r4, #31
 80049b6:	d90c      	bls.n	80049d2 <get_ldnumber+0x2c>
 80049b8:	2c3a      	cmp	r4, #58	; 0x3a
 80049ba:	d1f8      	bne.n	80049ae <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 80049bc:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80049be:	428b      	cmp	r3, r1
 80049c0:	d002      	beq.n	80049c8 <get_ldnumber+0x22>
	int vol = -1;
 80049c2:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 80049c6:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80049c8:	7812      	ldrb	r2, [r2, #0]
 80049ca:	2a30      	cmp	r2, #48	; 0x30
 80049cc:	d1f9      	bne.n	80049c2 <get_ldnumber+0x1c>
					*path = ++tt;
 80049ce:	3301      	adds	r3, #1
 80049d0:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 80049d2:	2000      	movs	r0, #0
 80049d4:	bd10      	pop	{r4, pc}

080049d6 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80049d6:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80049d8:	b190      	cbz	r0, 8004a00 <validate+0x2a>
 80049da:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 80049de:	b17b      	cbz	r3, 8004a00 <validate+0x2a>
 80049e0:	f893 2200 	ldrb.w	r2, [r3, #512]	; 0x200
 80049e4:	b162      	cbz	r2, 8004a00 <validate+0x2a>
 80049e6:	f8b3 1206 	ldrh.w	r1, [r3, #518]	; 0x206
 80049ea:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
 80049ee:	4291      	cmp	r1, r2
 80049f0:	d106      	bne.n	8004a00 <validate+0x2a>
 80049f2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80049f6:	f7ff fe0d 	bl	8004614 <disk_status>
 80049fa:	f010 0001 	ands.w	r0, r0, #1
 80049fe:	d000      	beq.n	8004a02 <validate+0x2c>
		return FR_INVALID_OBJECT;
 8004a00:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 8004a02:	bd08      	pop	{r3, pc}

08004a04 <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 8004a04:	7eca      	ldrb	r2, [r1, #27]
 8004a06:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32)
 8004a08:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8004a0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004a0e:	bf01      	itttt	eq
 8004a10:	7d48      	ldrbeq	r0, [r1, #21]
 8004a12:	7d0a      	ldrbeq	r2, [r1, #20]
 8004a14:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8004a18:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	4770      	bx	lr

08004a20 <sync_window.part.1>:
FRESULT sync_window (
 8004a20:	b570      	push	{r4, r5, r6, lr}
		wsect = fs->winsect;	/* Current sector number */
 8004a22:	f8d0 522c 	ldr.w	r5, [r0, #556]	; 0x22c
FRESULT sync_window (
 8004a26:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8004a28:	4601      	mov	r1, r0
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	462a      	mov	r2, r5
 8004a2e:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8004a32:	f7ff fe17 	bl	8004664 <disk_write>
 8004a36:	b9d0      	cbnz	r0, 8004a6e <sync_window.part.1+0x4e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004a38:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 8004a3c:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
			fs->wflag = 0;
 8004a40:	f884 0204 	strb.w	r0, [r4, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004a44:	1aeb      	subs	r3, r5, r3
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d301      	bcc.n	8004a4e <sync_window.part.1+0x2e>
	FRESULT res = FR_OK;
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	bd70      	pop	{r4, r5, r6, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a4e:	f894 6203 	ldrb.w	r6, [r4, #515]	; 0x203
 8004a52:	2e01      	cmp	r6, #1
 8004a54:	d9f9      	bls.n	8004a4a <sync_window.part.1+0x2a>
					wsect += fs->fsize;
 8004a56:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004a5a:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
					wsect += fs->fsize;
 8004a5e:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8004a60:	462a      	mov	r2, r5
 8004a62:	2301      	movs	r3, #1
 8004a64:	4621      	mov	r1, r4
 8004a66:	f7ff fdfd 	bl	8004664 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a6a:	3e01      	subs	r6, #1
 8004a6c:	e7f1      	b.n	8004a52 <sync_window.part.1+0x32>
			res = FR_DISK_ERR;
 8004a6e:	2001      	movs	r0, #1
}
 8004a70:	bd70      	pop	{r4, r5, r6, pc}

08004a72 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004a72:	f890 3204 	ldrb.w	r3, [r0, #516]	; 0x204
 8004a76:	b10b      	cbz	r3, 8004a7c <sync_window+0xa>
 8004a78:	f7ff bfd2 	b.w	8004a20 <sync_window.part.1>
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	4770      	bx	lr

08004a80 <sync_fs>:
{
 8004a80:	b538      	push	{r3, r4, r5, lr}
 8004a82:	4604      	mov	r4, r0
	res = sync_window(fs);
 8004a84:	f7ff fff5 	bl	8004a72 <sync_window>
 8004a88:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	d154      	bne.n	8004b38 <sync_fs+0xb8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004a8e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d147      	bne.n	8004b26 <sync_fs+0xa6>
 8004a96:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d143      	bne.n	8004b26 <sync_fs+0xa6>
			mem_set(fs->win.d8, 0, SS(fs));
 8004a9e:	4601      	mov	r1, r0
 8004aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	f7ff fed3 	bl	8004850 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8004aaa:	2255      	movs	r2, #85	; 0x55
 8004aac:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
 8004ab0:	22aa      	movs	r2, #170	; 0xaa
 8004ab2:	f884 21ff 	strb.w	r2, [r4, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8004ab6:	2252      	movs	r2, #82	; 0x52
 8004ab8:	7022      	strb	r2, [r4, #0]
 8004aba:	7062      	strb	r2, [r4, #1]
 8004abc:	2261      	movs	r2, #97	; 0x61
 8004abe:	70a2      	strb	r2, [r4, #2]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004ac0:	f884 21e7 	strb.w	r2, [r4, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8004ac4:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8004ac8:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8004acc:	2141      	movs	r1, #65	; 0x41
 8004ace:	70e1      	strb	r1, [r4, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004ad0:	f884 11e6 	strb.w	r1, [r4, #486]	; 0x1e6
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8004ad4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004ad8:	f884 11e9 	strb.w	r1, [r4, #489]	; 0x1e9
 8004adc:	0c11      	lsrs	r1, r2, #16
 8004ade:	0e12      	lsrs	r2, r2, #24
 8004ae0:	f884 21eb 	strb.w	r2, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004ae4:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8004ae8:	f884 11ea 	strb.w	r1, [r4, #490]	; 0x1ea
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004aec:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004af0:	f884 21ec 	strb.w	r2, [r4, #492]	; 0x1ec
 8004af4:	f884 11ed 	strb.w	r1, [r4, #493]	; 0x1ed
 8004af8:	0c11      	lsrs	r1, r2, #16
 8004afa:	0e12      	lsrs	r2, r2, #24
 8004afc:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 8004b00:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8004b04:	f884 11ee 	strb.w	r1, [r4, #494]	; 0x1ee
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004b08:	2072      	movs	r0, #114	; 0x72
			fs->winsect = fs->volbase + 1;
 8004b0a:	3201      	adds	r2, #1
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8004b0c:	f884 01e4 	strb.w	r0, [r4, #484]	; 0x1e4
 8004b10:	f884 01e5 	strb.w	r0, [r4, #485]	; 0x1e5
			fs->winsect = fs->volbase + 1;
 8004b14:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8004b18:	4621      	mov	r1, r4
 8004b1a:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8004b1e:	f7ff fda1 	bl	8004664 <disk_write>
			fs->fsi_flag = 0;
 8004b22:	f884 5205 	strb.w	r5, [r4, #517]	; 0x205
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8004b26:	2200      	movs	r2, #0
 8004b28:	4611      	mov	r1, r2
 8004b2a:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8004b2e:	f7ff fda7 	bl	8004680 <disk_ioctl>
 8004b32:	3000      	adds	r0, #0
 8004b34:	bf18      	it	ne
 8004b36:	2001      	movne	r0, #1
}
 8004b38:	bd38      	pop	{r3, r4, r5, pc}

08004b3a <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004b3a:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8004b3e:	428b      	cmp	r3, r1
{
 8004b40:	b570      	push	{r4, r5, r6, lr}
 8004b42:	4606      	mov	r6, r0
 8004b44:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004b46:	d013      	beq.n	8004b70 <move_window+0x36>
		res = sync_window(fs);		/* Write-back changes */
 8004b48:	f7ff ff93 	bl	8004a72 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004b4c:	4604      	mov	r4, r0
 8004b4e:	b968      	cbnz	r0, 8004b6c <move_window+0x32>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8004b50:	462a      	mov	r2, r5
 8004b52:	2301      	movs	r3, #1
 8004b54:	4631      	mov	r1, r6
 8004b56:	f896 0201 	ldrb.w	r0, [r6, #513]	; 0x201
 8004b5a:	f7ff fd75 	bl	8004648 <disk_read>
 8004b5e:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8004b60:	bf1c      	itt	ne
 8004b62:	f04f 35ff 	movne.w	r5, #4294967295
 8004b66:	2401      	movne	r4, #1
			fs->winsect = sector;
 8004b68:	f8c6 522c 	str.w	r5, [r6, #556]	; 0x22c
}
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8004b70:	2400      	movs	r4, #0
 8004b72:	e7fb      	b.n	8004b6c <move_window+0x32>

08004b74 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004b74:	2300      	movs	r3, #0
{
 8004b76:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004b78:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 8004b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b80:	f8c0 322c 	str.w	r3, [r0, #556]	; 0x22c
{
 8004b84:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8004b86:	f7ff ffd8 	bl	8004b3a <move_window>
 8004b8a:	b9c0      	cbnz	r0, 8004bbe <check_fs+0x4a>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8004b8c:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8004b90:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8004b94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b98:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d110      	bne.n	8004bc2 <check_fs+0x4e>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8004ba0:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 8004ba4:	4a08      	ldr	r2, [pc, #32]	; (8004bc8 <check_fs+0x54>)
 8004ba6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00a      	beq.n	8004bc4 <check_fs+0x50>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8004bae:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 8004bb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 8004bb6:	1a80      	subs	r0, r0, r2
 8004bb8:	bf18      	it	ne
 8004bba:	2001      	movne	r0, #1
 8004bbc:	bd10      	pop	{r4, pc}
 8004bbe:	2003      	movs	r0, #3
 8004bc0:	bd10      	pop	{r4, pc}
		return 2;
 8004bc2:	2002      	movs	r0, #2
}
 8004bc4:	bd10      	pop	{r4, pc}
 8004bc6:	bf00      	nop
 8004bc8:	00544146 	.word	0x00544146

08004bcc <find_volume>:
{
 8004bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	6003      	str	r3, [r0, #0]
{
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	4607      	mov	r7, r0
	vol = get_ldnumber(path);
 8004bd6:	4608      	mov	r0, r1
{
 8004bd8:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8004bda:	f7ff fee4 	bl	80049a6 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004bde:	1e06      	subs	r6, r0, #0
 8004be0:	f2c0 8121 	blt.w	8004e26 <find_volume+0x25a>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004be4:	4b93      	ldr	r3, [pc, #588]	; (8004e34 <find_volume+0x268>)
 8004be6:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004bea:	2c00      	cmp	r4, #0
 8004bec:	f000 811d 	beq.w	8004e2a <find_volume+0x25e>
	*rfs = fs;							/* Return pointer to the file system object */
 8004bf0:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004bf2:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8004bf6:	b173      	cbz	r3, 8004c16 <find_volume+0x4a>
		stat = disk_status(fs->drv);
 8004bf8:	f894 0201 	ldrb.w	r0, [r4, #513]	; 0x201
 8004bfc:	f7ff fd0a 	bl	8004614 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004c00:	07c7      	lsls	r7, r0, #31
 8004c02:	d408      	bmi.n	8004c16 <find_volume+0x4a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8004c04:	2d00      	cmp	r5, #0
 8004c06:	f000 80ea 	beq.w	8004dde <find_volume+0x212>
 8004c0a:	f010 0004 	ands.w	r0, r0, #4
 8004c0e:	d000      	beq.n	8004c12 <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 8004c10:	200a      	movs	r0, #10
}
 8004c12:	b005      	add	sp, #20
 8004c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8004c16:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004c18:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8004c1a:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004c1e:	f884 0201 	strb.w	r0, [r4, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004c22:	f7ff fd01 	bl	8004628 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8004c26:	07c1      	lsls	r1, r0, #31
 8004c28:	f100 8101 	bmi.w	8004e2e <find_volume+0x262>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8004c2c:	b10d      	cbz	r5, 8004c32 <find_volume+0x66>
 8004c2e:	0742      	lsls	r2, r0, #29
 8004c30:	d4ee      	bmi.n	8004c10 <find_volume+0x44>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8004c32:	2100      	movs	r1, #0
 8004c34:	4620      	mov	r0, r4
 8004c36:	f7ff ff9d 	bl	8004b74 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8004c3a:	2801      	cmp	r0, #1
 8004c3c:	f040 80da 	bne.w	8004df4 <find_volume+0x228>
 8004c40:	f504 71e3 	add.w	r1, r4, #454	; 0x1c6
 8004c44:	2200      	movs	r2, #0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8004c46:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 8004c4a:	b103      	cbz	r3, 8004c4e <find_volume+0x82>
 8004c4c:	680b      	ldr	r3, [r1, #0]
 8004c4e:	f84d 3022 	str.w	r3, [sp, r2, lsl #2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8004c52:	3201      	adds	r2, #1
 8004c54:	2a04      	cmp	r2, #4
 8004c56:	f101 0110 	add.w	r1, r1, #16
 8004c5a:	d1f4      	bne.n	8004c46 <find_volume+0x7a>
 8004c5c:	2600      	movs	r6, #0
			bsect = br[i];
 8004c5e:	f85d 5026 	ldr.w	r5, [sp, r6, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004c62:	2d00      	cmp	r5, #0
 8004c64:	f000 80bd 	beq.w	8004de2 <find_volume+0x216>
 8004c68:	4629      	mov	r1, r5
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	f7ff ff82 	bl	8004b74 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8004c70:	2800      	cmp	r0, #0
 8004c72:	f040 80b7 	bne.w	8004de4 <find_volume+0x218>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004c76:	7b22      	ldrb	r2, [r4, #12]
 8004c78:	7ae3      	ldrb	r3, [r4, #11]
 8004c7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c82:	f040 80ba 	bne.w	8004dfa <find_volume+0x22e>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8004c86:	7de3      	ldrb	r3, [r4, #23]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8004c88:	7c20      	ldrb	r0, [r4, #16]
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8004c8a:	7da1      	ldrb	r1, [r4, #22]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8004c8c:	f884 0203 	strb.w	r0, [r4, #515]	; 0x203
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8004c90:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004c94:	f100 33ff 	add.w	r3, r0, #4294967295
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8004c98:	bf08      	it	eq
 8004c9a:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	fs->fsize = fasize;
 8004c9c:	f8c4 1218 	str.w	r1, [r4, #536]	; 0x218
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	f200 80aa 	bhi.w	8004dfa <find_volume+0x22e>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8004ca6:	7b66      	ldrb	r6, [r4, #13]
 8004ca8:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8004cac:	2e00      	cmp	r6, #0
 8004cae:	f000 80a4 	beq.w	8004dfa <find_volume+0x22e>
 8004cb2:	1e73      	subs	r3, r6, #1
 8004cb4:	4233      	tst	r3, r6
 8004cb6:	f040 80a0 	bne.w	8004dfa <find_volume+0x22e>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8004cba:	7ca3      	ldrb	r3, [r4, #18]
 8004cbc:	7c67      	ldrb	r7, [r4, #17]
 8004cbe:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8004cc2:	073b      	lsls	r3, r7, #28
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8004cc4:	f8a4 7208 	strh.w	r7, [r4, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8004cc8:	f040 8097 	bne.w	8004dfa <find_volume+0x22e>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8004ccc:	7d22      	ldrb	r2, [r4, #20]
 8004cce:	7ce3      	ldrb	r3, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004cd0:	f894 e00f 	ldrb.w	lr, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8004cd4:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8004cd8:	7ba2      	ldrb	r2, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8004cda:	bf08      	it	eq
 8004cdc:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8004cde:	ea52 220e 	orrs.w	r2, r2, lr, lsl #8
 8004ce2:	f000 808a 	beq.w	8004dfa <find_volume+0x22e>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8004ce6:	fb01 fe00 	mul.w	lr, r1, r0
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8004cea:	eb02 1017 	add.w	r0, r2, r7, lsr #4
 8004cee:	4470      	add	r0, lr
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004cf0:	4283      	cmp	r3, r0
 8004cf2:	f0c0 8082 	bcc.w	8004dfa <find_volume+0x22e>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8004cf6:	1a1b      	subs	r3, r3, r0
 8004cf8:	fbb3 f3f6 	udiv	r3, r3, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d07c      	beq.n	8004dfa <find_volume+0x22e>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8004d00:	f640 76f5 	movw	r6, #4085	; 0xff5
 8004d04:	42b3      	cmp	r3, r6
 8004d06:	d97c      	bls.n	8004e02 <find_volume+0x236>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8004d08:	f64f 76f5 	movw	r6, #65525	; 0xfff5
 8004d0c:	42b3      	cmp	r3, r6
 8004d0e:	bf94      	ite	ls
 8004d10:	2602      	movls	r6, #2
 8004d12:	2603      	movhi	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004d14:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004d16:	442a      	add	r2, r5
	fs->database = bsect + sysect;						/* Data start sector */
 8004d18:	4428      	add	r0, r5
	if (fmt == FS_FAT32) {
 8004d1a:	2e03      	cmp	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8004d1c:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8004d20:	f8c4 521c 	str.w	r5, [r4, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8004d24:	f8c4 2220 	str.w	r2, [r4, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8004d28:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8004d2c:	d16b      	bne.n	8004e06 <find_volume+0x23a>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8004d2e:	2f00      	cmp	r7, #0
 8004d30:	d163      	bne.n	8004dfa <find_volume+0x22e>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8004d32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004d34:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8004d38:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8004d3a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004d3e:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 8004d42:	d35a      	bcc.n	8004dfa <find_volume+0x22e>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8004d44:	f04f 33ff 	mov.w	r3, #4294967295
 8004d48:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
 8004d4c:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8004d50:	2e03      	cmp	r6, #3
	fs->fsi_flag = 0x80;
 8004d52:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004d56:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8004d5a:	d12d      	bne.n	8004db8 <find_volume+0x1ec>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8004d5c:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8004d60:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8004d64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d125      	bne.n	8004db8 <find_volume+0x1ec>
		&& move_window(fs, bsect + 1) == FR_OK)
 8004d6c:	1c69      	adds	r1, r5, #1
 8004d6e:	4620      	mov	r0, r4
 8004d70:	f7ff fee3 	bl	8004b3a <move_window>
 8004d74:	bb00      	cbnz	r0, 8004db8 <find_volume+0x1ec>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004d76:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8004d7a:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 8004d7e:	f884 0205 	strb.w	r0, [r4, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004d82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004d86:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d114      	bne.n	8004db8 <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8004d8e:	6822      	ldr	r2, [r4, #0]
 8004d90:	4b29      	ldr	r3, [pc, #164]	; (8004e38 <find_volume+0x26c>)
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d110      	bne.n	8004db8 <find_volume+0x1ec>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8004d96:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8004d9a:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 8004d9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004da2:	3320      	adds	r3, #32
 8004da4:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8004da6:	bf01      	itttt	eq
 8004da8:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 8004dac:	f8c4 3210 	streq.w	r3, [r4, #528]	; 0x210
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8004db0:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 8004db4:	f8c4 320c 	streq.w	r3, [r4, #524]	; 0x20c
	fs->id = ++Fsid;	/* File system mount ID */
 8004db8:	4a20      	ldr	r2, [pc, #128]	; (8004e3c <find_volume+0x270>)
	fs->fs_type = fmt;	/* FAT sub-type */
 8004dba:	f884 6200 	strb.w	r6, [r4, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8004dbe:	8813      	ldrh	r3, [r2, #0]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	8013      	strh	r3, [r2, #0]
 8004dc6:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004dca:	4a1d      	ldr	r2, [pc, #116]	; (8004e40 <find_volume+0x274>)
	fs->id = ++Fsid;	/* File system mount ID */
 8004dcc:	2300      	movs	r3, #0
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004dce:	4619      	mov	r1, r3
 8004dd0:	5898      	ldr	r0, [r3, r2]
 8004dd2:	4284      	cmp	r4, r0
 8004dd4:	bf08      	it	eq
 8004dd6:	5099      	streq	r1, [r3, r2]
 8004dd8:	330c      	adds	r3, #12
	for (i = 0; i < _FS_LOCK; i++) {
 8004dda:	2b48      	cmp	r3, #72	; 0x48
 8004ddc:	d1f8      	bne.n	8004dd0 <find_volume+0x204>
	return FR_OK;
 8004dde:	2000      	movs	r0, #0
 8004de0:	e717      	b.n	8004c12 <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8004de2:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8004de4:	3601      	adds	r6, #1
 8004de6:	2e04      	cmp	r6, #4
 8004de8:	f47f af39 	bne.w	8004c5e <find_volume+0x92>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004dec:	2803      	cmp	r0, #3
 8004dee:	d104      	bne.n	8004dfa <find_volume+0x22e>
 8004df0:	2001      	movs	r0, #1
 8004df2:	e70e      	b.n	8004c12 <find_volume+0x46>
 8004df4:	2803      	cmp	r0, #3
 8004df6:	d0fb      	beq.n	8004df0 <find_volume+0x224>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8004df8:	b108      	cbz	r0, 8004dfe <find_volume+0x232>
 8004dfa:	200d      	movs	r0, #13
 8004dfc:	e709      	b.n	8004c12 <find_volume+0x46>
	bsect = 0;
 8004dfe:	4605      	mov	r5, r0
 8004e00:	e739      	b.n	8004c76 <find_volume+0xaa>
	fmt = FS_FAT12;
 8004e02:	2601      	movs	r6, #1
 8004e04:	e786      	b.n	8004d14 <find_volume+0x148>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8004e06:	2f00      	cmp	r7, #0
 8004e08:	d0f7      	beq.n	8004dfa <find_volume+0x22e>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8004e0a:	4472      	add	r2, lr
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004e0c:	2e02      	cmp	r6, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8004e0e:	f8c4 2224 	str.w	r2, [r4, #548]	; 0x224
 8004e12:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004e16:	bf1b      	ittet	ne
 8004e18:	18d2      	addne	r2, r2, r3
 8004e1a:	f003 0301 	andne.w	r3, r3, #1
 8004e1e:	4613      	moveq	r3, r2
 8004e20:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 8004e24:	e789      	b.n	8004d3a <find_volume+0x16e>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004e26:	200b      	movs	r0, #11
 8004e28:	e6f3      	b.n	8004c12 <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004e2a:	200c      	movs	r0, #12
 8004e2c:	e6f1      	b.n	8004c12 <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004e2e:	2003      	movs	r0, #3
 8004e30:	e6ef      	b.n	8004c12 <find_volume+0x46>
 8004e32:	bf00      	nop
 8004e34:	2000063c 	.word	0x2000063c
 8004e38:	41615252 	.word	0x41615252
 8004e3c:	20000688 	.word	0x20000688
 8004e40:	20000640 	.word	0x20000640

08004e44 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004e44:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
	clst -= 2;
 8004e48:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004e4a:	3b02      	subs	r3, #2
 8004e4c:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 8004e4e:	bf3d      	ittte	cc
 8004e50:	f890 3202 	ldrbcc.w	r3, [r0, #514]	; 0x202
 8004e54:	f8d0 0228 	ldrcc.w	r0, [r0, #552]	; 0x228
 8004e58:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004e5c:	2000      	movcs	r0, #0
}
 8004e5e:	4770      	bx	lr

08004e60 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004e60:	2901      	cmp	r1, #1
{
 8004e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e64:	4606      	mov	r6, r0
 8004e66:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004e68:	d959      	bls.n	8004f1e <get_fat+0xbe>
 8004e6a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004e6e:	4299      	cmp	r1, r3
 8004e70:	d255      	bcs.n	8004f1e <get_fat+0xbe>
		switch (fs->fs_type) {
 8004e72:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d027      	beq.n	8004eca <get_fat+0x6a>
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d036      	beq.n	8004eec <get_fat+0x8c>
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d14d      	bne.n	8004f1e <get_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;
 8004e82:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e86:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8004e8a:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 8004e8e:	f7ff fe54 	bl	8004b3a <move_window>
 8004e92:	b110      	cbz	r0, 8004e9a <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295
 8004e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e9a:	f8d6 1220 	ldr.w	r1, [r6, #544]	; 0x220
			wc = fs->win.d8[bc++ % SS(fs)];
 8004e9e:	1c67      	adds	r7, r4, #1
 8004ea0:	f3c4 0408 	ubfx	r4, r4, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ea4:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8004ea8:	4630      	mov	r0, r6
			wc = fs->win.d8[bc++ % SS(fs)];
 8004eaa:	5d34      	ldrb	r4, [r6, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004eac:	f7ff fe45 	bl	8004b3a <move_window>
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	d1ef      	bne.n	8004e94 <get_fat+0x34>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004eb4:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004eb8:	07eb      	lsls	r3, r5, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8004eba:	5df0      	ldrb	r0, [r6, r7]
 8004ebc:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004ec0:	bf4c      	ite	mi
 8004ec2:	0900      	lsrmi	r0, r0, #4
 8004ec4:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8004ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004eca:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8004ece:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8004ed2:	f7ff fe32 	bl	8004b3a <move_window>
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	d1dc      	bne.n	8004e94 <get_fat+0x34>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8004eda:	006d      	lsls	r5, r5, #1
 8004edc:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
			val = LD_WORD(p);
 8004ee0:	1973      	adds	r3, r6, r5
 8004ee2:	5d70      	ldrb	r0, [r6, r5]
 8004ee4:	785b      	ldrb	r3, [r3, #1]
 8004ee6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004eec:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8004ef0:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8004ef4:	f7ff fe21 	bl	8004b3a <move_window>
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	d1cb      	bne.n	8004e94 <get_fat+0x34>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8004efc:	00ad      	lsls	r5, r5, #2
 8004efe:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
 8004f02:	1973      	adds	r3, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8004f04:	7898      	ldrb	r0, [r3, #2]
 8004f06:	78da      	ldrb	r2, [r3, #3]
 8004f08:	785b      	ldrb	r3, [r3, #1]
 8004f0a:	0400      	lsls	r0, r0, #16
 8004f0c:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8004f10:	5d72      	ldrb	r2, [r6, r5]
 8004f12:	4310      	orrs	r0, r2
 8004f14:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004f18:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8004f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 8004f1e:	2001      	movs	r0, #1
}
 8004f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004f22 <dir_sdi>:
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8004f22:	f8d0 2208 	ldr.w	r2, [r0, #520]	; 0x208
{
 8004f26:	b570      	push	{r4, r5, r6, lr}
 8004f28:	4604      	mov	r4, r0
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004f2a:	2a01      	cmp	r2, #1
{
 8004f2c:	460d      	mov	r5, r1
	dp->index = (WORD)idx;	/* Current index */
 8004f2e:	f8a4 1206 	strh.w	r1, [r4, #518]	; 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004f32:	d101      	bne.n	8004f38 <dir_sdi+0x16>
		return FR_INT_ERR;
 8004f34:	2002      	movs	r0, #2
 8004f36:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004f38:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8004f3c:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8004f40:	428a      	cmp	r2, r1
 8004f42:	d2f7      	bcs.n	8004f34 <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004f44:	b9f2      	cbnz	r2, 8004f84 <dir_sdi+0x62>
 8004f46:	f893 1200 	ldrb.w	r1, [r3, #512]	; 0x200
 8004f4a:	2903      	cmp	r1, #3
 8004f4c:	d102      	bne.n	8004f54 <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 8004f4e:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004f52:	b9c1      	cbnz	r1, 8004f86 <dir_sdi+0x64>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004f54:	f8b3 1208 	ldrh.w	r1, [r3, #520]	; 0x208
 8004f58:	428d      	cmp	r5, r1
 8004f5a:	d2eb      	bcs.n	8004f34 <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 8004f5c:	f8d3 0224 	ldr.w	r0, [r3, #548]	; 0x224
	dp->clust = clst;	/* Current cluster# */
 8004f60:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8004f64:	2800      	cmp	r0, #0
 8004f66:	d0e5      	beq.n	8004f34 <dir_sdi+0x12>
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004f68:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004f6c:	eb00 1015 	add.w	r0, r0, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004f70:	f005 050f 	and.w	r5, r5, #15
 8004f74:	eb03 1545 	add.w	r5, r3, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8004f78:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8004f7c:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
	return FR_OK;
 8004f80:	2000      	movs	r0, #0
 8004f82:	bd70      	pop	{r4, r5, r6, pc}
 8004f84:	4611      	mov	r1, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004f86:	f893 6202 	ldrb.w	r6, [r3, #514]	; 0x202
		while (idx >= ic) {	/* Follow cluster chain */
 8004f8a:	460a      	mov	r2, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004f8c:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8004f8e:	42b5      	cmp	r5, r6
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004f90:	4611      	mov	r1, r2
 8004f92:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
		while (idx >= ic) {	/* Follow cluster chain */
 8004f96:	d202      	bcs.n	8004f9e <dir_sdi+0x7c>
		sect = clust2sect(dp->fs, clst);
 8004f98:	f7ff ff54 	bl	8004e44 <clust2sect>
 8004f9c:	e7e0      	b.n	8004f60 <dir_sdi+0x3e>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004f9e:	f7ff ff5f 	bl	8004e60 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004fa2:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8004fa4:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004fa6:	d009      	beq.n	8004fbc <dir_sdi+0x9a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8004fa8:	2801      	cmp	r0, #1
 8004faa:	d9c3      	bls.n	8004f34 <dir_sdi+0x12>
 8004fac:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8004fb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004fb4:	4298      	cmp	r0, r3
 8004fb6:	d2bd      	bcs.n	8004f34 <dir_sdi+0x12>
			idx -= ic;
 8004fb8:	1bad      	subs	r5, r5, r6
 8004fba:	e7e8      	b.n	8004f8e <dir_sdi+0x6c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004fbc:	2001      	movs	r0, #1
}
 8004fbe:	bd70      	pop	{r4, r5, r6, pc}

08004fc0 <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004fc0:	2901      	cmp	r1, #1
{
 8004fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc6:	4605      	mov	r5, r0
 8004fc8:	460c      	mov	r4, r1
 8004fca:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004fcc:	d96f      	bls.n	80050ae <put_fat+0xee>
 8004fce:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004fd2:	4299      	cmp	r1, r3
 8004fd4:	d26b      	bcs.n	80050ae <put_fat+0xee>
		switch (fs->fs_type) {
 8004fd6:	f890 3200 	ldrb.w	r3, [r0, #512]	; 0x200
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d03d      	beq.n	800505a <put_fat+0x9a>
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d04b      	beq.n	800507a <put_fat+0xba>
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d163      	bne.n	80050ae <put_fat+0xee>
			bc = (UINT)clst; bc += bc / 2;
 8004fe6:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004fea:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 8004fee:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8004ff2:	f7ff fda2 	bl	8004b3a <move_window>
			if (res != FR_OK) break;
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	d15a      	bne.n	80050b0 <put_fat+0xf0>
			p = &fs->win.d8[bc++ % SS(fs)];
 8004ffa:	f107 0801 	add.w	r8, r7, #1
 8004ffe:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005002:	f014 0401 	ands.w	r4, r4, #1
 8005006:	bf1f      	itttt	ne
 8005008:	5deb      	ldrbne	r3, [r5, r7]
 800500a:	f003 020f 	andne.w	r2, r3, #15
 800500e:	0133      	lslne	r3, r6, #4
 8005010:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8005014:	bf14      	ite	ne
 8005016:	4313      	orrne	r3, r2
 8005018:	b2f3      	uxtbeq	r3, r6
 800501a:	55eb      	strb	r3, [r5, r7]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800501c:	f8d5 1220 	ldr.w	r1, [r5, #544]	; 0x220
			fs->wflag = 1;
 8005020:	2301      	movs	r3, #1
 8005022:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005026:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800502a:	4628      	mov	r0, r5
 800502c:	f7ff fd85 	bl	8004b3a <move_window>
			if (res != FR_OK) break;
 8005030:	bbf0      	cbnz	r0, 80050b0 <put_fat+0xf0>
			p = &fs->win.d8[bc % SS(fs)];
 8005032:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005036:	b144      	cbz	r4, 800504a <put_fat+0x8a>
 8005038:	f3c6 1207 	ubfx	r2, r6, #4, #8
 800503c:	f805 2008 	strb.w	r2, [r5, r8]
			fs->wflag = 1;
 8005040:	2301      	movs	r3, #1
 8005042:	f885 3204 	strb.w	r3, [r5, #516]	; 0x204
 8005046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800504a:	f815 2008 	ldrb.w	r2, [r5, r8]
 800504e:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8005052:	f022 020f 	bic.w	r2, r2, #15
 8005056:	4332      	orrs	r2, r6
 8005058:	e7f0      	b.n	800503c <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800505a:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800505e:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8005062:	f7ff fd6a 	bl	8004b3a <move_window>
			if (res != FR_OK) break;
 8005066:	bb18      	cbnz	r0, 80050b0 <put_fat+0xf0>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005068:	0064      	lsls	r4, r4, #1
 800506a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
			ST_WORD(p, (WORD)val);
 800506e:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8005072:	552e      	strb	r6, [r5, r4]
 8005074:	442c      	add	r4, r5
 8005076:	7062      	strb	r2, [r4, #1]
 8005078:	e7e2      	b.n	8005040 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800507a:	f8d0 1220 	ldr.w	r1, [r0, #544]	; 0x220
 800507e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8005082:	f7ff fd5a 	bl	8004b3a <move_window>
			if (res != FR_OK) break;
 8005086:	b998      	cbnz	r0, 80050b0 <put_fat+0xf0>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005088:	00a4      	lsls	r4, r4, #2
 800508a:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800508e:	1929      	adds	r1, r5, r4
			val |= LD_DWORD(p) & 0xF0000000;
 8005090:	78cb      	ldrb	r3, [r1, #3]
 8005092:	061b      	lsls	r3, r3, #24
 8005094:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005098:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 800509c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80050a0:	552a      	strb	r2, [r5, r4]
 80050a2:	704b      	strb	r3, [r1, #1]
 80050a4:	0c13      	lsrs	r3, r2, #16
 80050a6:	0e12      	lsrs	r2, r2, #24
 80050a8:	708b      	strb	r3, [r1, #2]
 80050aa:	70ca      	strb	r2, [r1, #3]
 80050ac:	e7c8      	b.n	8005040 <put_fat+0x80>
			res = FR_INT_ERR;
 80050ae:	2002      	movs	r0, #2
}
 80050b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080050b4 <create_chain>:
{
 80050b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b6:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 80050b8:	460f      	mov	r7, r1
 80050ba:	b989      	cbnz	r1, 80050e0 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 80050bc:	f8d0 620c 	ldr.w	r6, [r0, #524]	; 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80050c0:	b1fe      	cbz	r6, 8005102 <create_chain+0x4e>
 80050c2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80050c6:	429e      	cmp	r6, r3
 80050c8:	bf28      	it	cs
 80050ca:	2601      	movcs	r6, #1
 80050cc:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80050ce:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
		ncl++;							/* Next cluster */
 80050d2:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80050d4:	429c      	cmp	r4, r3
 80050d6:	d317      	bcc.n	8005108 <create_chain+0x54>
			if (ncl > scl) return 0;	/* No free cluster */
 80050d8:	2e01      	cmp	r6, #1
 80050da:	d814      	bhi.n	8005106 <create_chain+0x52>
 80050dc:	2400      	movs	r4, #0
 80050de:	e008      	b.n	80050f2 <create_chain+0x3e>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80050e0:	f7ff febe 	bl	8004e60 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 80050e4:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80050e6:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 80050e8:	d93b      	bls.n	8005162 <create_chain+0xae>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80050ea:	3001      	adds	r0, #1
 80050ec:	d103      	bne.n	80050f6 <create_chain+0x42>
			ncl = 2;
 80050ee:	f04f 34ff 	mov.w	r4, #4294967295
}
 80050f2:	4620      	mov	r0, r4
 80050f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80050f6:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 80050fa:	429c      	cmp	r4, r3
 80050fc:	d3f9      	bcc.n	80050f2 <create_chain+0x3e>
 80050fe:	463e      	mov	r6, r7
 8005100:	e7e4      	b.n	80050cc <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005102:	2601      	movs	r6, #1
 8005104:	e7e2      	b.n	80050cc <create_chain+0x18>
			ncl = 2;
 8005106:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005108:	4621      	mov	r1, r4
 800510a:	4628      	mov	r0, r5
 800510c:	f7ff fea8 	bl	8004e60 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8005110:	b130      	cbz	r0, 8005120 <create_chain+0x6c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005112:	1c41      	adds	r1, r0, #1
 8005114:	d0eb      	beq.n	80050ee <create_chain+0x3a>
 8005116:	2801      	cmp	r0, #1
 8005118:	d023      	beq.n	8005162 <create_chain+0xae>
		if (ncl == scl) return 0;		/* No free cluster */
 800511a:	42b4      	cmp	r4, r6
 800511c:	d1d7      	bne.n	80050ce <create_chain+0x1a>
 800511e:	e7dd      	b.n	80050dc <create_chain+0x28>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8005120:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005124:	4621      	mov	r1, r4
 8005126:	4628      	mov	r0, r5
 8005128:	f7ff ff4a 	bl	8004fc0 <put_fat>
	if (res == FR_OK && clst != 0) {
 800512c:	b9b8      	cbnz	r0, 800515e <create_chain+0xaa>
 800512e:	b97f      	cbnz	r7, 8005150 <create_chain+0x9c>
		if (fs->free_clust != 0xFFFFFFFF) {
 8005130:	f8d5 3210 	ldr.w	r3, [r5, #528]	; 0x210
		fs->last_clust = ncl;			/* Update FSINFO */
 8005134:	f8c5 420c 	str.w	r4, [r5, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	d0da      	beq.n	80050f2 <create_chain+0x3e>
			fs->free_clust--;
 800513c:	3b01      	subs	r3, #1
 800513e:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
			fs->fsi_flag |= 1;
 8005142:	f895 3205 	ldrb.w	r3, [r5, #517]	; 0x205
 8005146:	f043 0301 	orr.w	r3, r3, #1
 800514a:	f885 3205 	strb.w	r3, [r5, #517]	; 0x205
 800514e:	e7d0      	b.n	80050f2 <create_chain+0x3e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005150:	4622      	mov	r2, r4
 8005152:	4639      	mov	r1, r7
 8005154:	4628      	mov	r0, r5
 8005156:	f7ff ff33 	bl	8004fc0 <put_fat>
	if (res == FR_OK) {
 800515a:	2800      	cmp	r0, #0
 800515c:	d0e8      	beq.n	8005130 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800515e:	2801      	cmp	r0, #1
 8005160:	d0c5      	beq.n	80050ee <create_chain+0x3a>
 8005162:	2401      	movs	r4, #1
 8005164:	e7c5      	b.n	80050f2 <create_chain+0x3e>

08005166 <dir_next>:
{
 8005166:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 800516a:	f8b0 6206 	ldrh.w	r6, [r0, #518]	; 0x206
 800516e:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005170:	b2b3      	uxth	r3, r6
{
 8005172:	4604      	mov	r4, r0
 8005174:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005176:	b913      	cbnz	r3, 800517e <dir_next+0x18>
		return FR_NO_FILE;
 8005178:	2004      	movs	r0, #4
 800517a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800517e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0f8      	beq.n	8005178 <dir_next+0x12>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005186:	f016 080f 	ands.w	r8, r6, #15
 800518a:	d10b      	bne.n	80051a4 <dir_next+0x3e>
		if (!dp->clust) {		/* Static table */
 800518c:	f8d0 120c 	ldr.w	r1, [r0, #524]	; 0x20c
		dp->sect++;					/* Next sector */
 8005190:	3301      	adds	r3, #1
 8005192:	f8c0 3210 	str.w	r3, [r0, #528]	; 0x210
 8005196:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
		if (!dp->clust) {		/* Static table */
 800519a:	b971      	cbnz	r1, 80051ba <dir_next+0x54>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800519c:	f8b0 3208 	ldrh.w	r3, [r0, #520]	; 0x208
 80051a0:	429e      	cmp	r6, r3
 80051a2:	d2e9      	bcs.n	8005178 <dir_next+0x12>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80051a4:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
	dp->index = (WORD)i;	/* Current index */
 80051a8:	f8a4 6206 	strh.w	r6, [r4, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80051ac:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80051b0:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
	return FR_OK;
 80051b4:	2000      	movs	r0, #0
 80051b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80051ba:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 80051be:	3f01      	subs	r7, #1
 80051c0:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 80051c4:	d1ee      	bne.n	80051a4 <dir_next+0x3e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80051c6:	f7ff fe4b 	bl	8004e60 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 80051ca:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80051cc:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 80051ce:	d802      	bhi.n	80051d6 <dir_next+0x70>
 80051d0:	2002      	movs	r0, #2
 80051d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80051d6:	1c42      	adds	r2, r0, #1
 80051d8:	d102      	bne.n	80051e0 <dir_next+0x7a>
 80051da:	2001      	movs	r0, #1
 80051dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80051e0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80051e4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80051e8:	429d      	cmp	r5, r3
 80051ea:	d32f      	bcc.n	800524c <dir_next+0xe6>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80051ec:	f1b9 0f00 	cmp.w	r9, #0
 80051f0:	d0c2      	beq.n	8005178 <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80051f2:	f8d4 120c 	ldr.w	r1, [r4, #524]	; 0x20c
 80051f6:	f7ff ff5d 	bl	80050b4 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80051fa:	4605      	mov	r5, r0
 80051fc:	2800      	cmp	r0, #0
 80051fe:	d03e      	beq.n	800527e <dir_next+0x118>
					if (clst == 1) return FR_INT_ERR;
 8005200:	2801      	cmp	r0, #1
 8005202:	d0e5      	beq.n	80051d0 <dir_next+0x6a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005204:	1c43      	adds	r3, r0, #1
 8005206:	d0e8      	beq.n	80051da <dir_next+0x74>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005208:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800520c:	f7ff fc31 	bl	8004a72 <sync_window>
 8005210:	4601      	mov	r1, r0
 8005212:	2800      	cmp	r0, #0
 8005214:	d1e1      	bne.n	80051da <dir_next+0x74>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800521a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800521e:	f7ff fb17 	bl	8004850 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005222:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8005226:	4629      	mov	r1, r5
 8005228:	4610      	mov	r0, r2
 800522a:	f7ff fe0b 	bl	8004e44 <clust2sect>
						dp->fs->wflag = 1;
 800522e:	f04f 0901 	mov.w	r9, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005232:	f8c2 022c 	str.w	r0, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005236:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800523a:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 800523e:	429f      	cmp	r7, r3
 8005240:	d30e      	bcc.n	8005260 <dir_next+0xfa>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005242:	f8d0 322c 	ldr.w	r3, [r0, #556]	; 0x22c
 8005246:	1bdf      	subs	r7, r3, r7
 8005248:	f8c0 722c 	str.w	r7, [r0, #556]	; 0x22c
				dp->clust = clst;				/* Initialize data for new cluster */
 800524c:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8005250:	4629      	mov	r1, r5
 8005252:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005256:	f7ff fdf5 	bl	8004e44 <clust2sect>
 800525a:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
 800525e:	e7a1      	b.n	80051a4 <dir_next+0x3e>
						dp->fs->wflag = 1;
 8005260:	f880 9204 	strb.w	r9, [r0, #516]	; 0x204
 8005264:	f7ff fbdc 	bl	8004a20 <sync_window.part.1>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005268:	2800      	cmp	r0, #0
 800526a:	d1b6      	bne.n	80051da <dir_next+0x74>
						dp->fs->winsect++;
 800526c:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 8005270:	f8d2 322c 	ldr.w	r3, [r2, #556]	; 0x22c
 8005274:	3301      	adds	r3, #1
 8005276:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800527a:	3701      	adds	r7, #1
 800527c:	e7db      	b.n	8005236 <dir_next+0xd0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800527e:	2007      	movs	r0, #7
}
 8005280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005284 <dir_find.part.6>:
FRESULT dir_find (
 8005284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005288:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800528c:	f04f 08ff 	mov.w	r8, #255	; 0xff
FRESULT dir_find (
 8005290:	4606      	mov	r6, r0
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8005292:	f8a0 7224 	strh.w	r7, [r0, #548]	; 0x224
 8005296:	4644      	mov	r4, r8
		res = move_window(dp->fs, dp->sect);
 8005298:	f8d6 1210 	ldr.w	r1, [r6, #528]	; 0x210
 800529c:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
 80052a0:	f7ff fc4b 	bl	8004b3a <move_window>
		if (res != FR_OK) break;
 80052a4:	4682      	mov	sl, r0
 80052a6:	2800      	cmp	r0, #0
 80052a8:	d167      	bne.n	800537a <dir_find.part.6+0xf6>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80052aa:	f8d6 5214 	ldr.w	r5, [r6, #532]	; 0x214
		c = dir[DIR_Name];
 80052ae:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d07f      	beq.n	80053b4 <dir_find.part.6+0x130>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80052b4:	2be5      	cmp	r3, #229	; 0xe5
 80052b6:	d006      	beq.n	80052c6 <dir_find.part.6+0x42>
		a = dir[DIR_Attr] & AM_MASK;
 80052b8:	7ae9      	ldrb	r1, [r5, #11]
 80052ba:	f001 023f 	and.w	r2, r1, #63	; 0x3f
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80052be:	0709      	lsls	r1, r1, #28
 80052c0:	d504      	bpl.n	80052cc <dir_find.part.6+0x48>
 80052c2:	2a0f      	cmp	r2, #15
 80052c4:	d004      	beq.n	80052d0 <dir_find.part.6+0x4c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80052c6:	f8a6 7224 	strh.w	r7, [r6, #548]	; 0x224
 80052ca:	e04e      	b.n	800536a <dir_find.part.6+0xe6>
			if (a == AM_LFN) {			/* An LFN entry is found */
 80052cc:	2a0f      	cmp	r2, #15
 80052ce:	d15b      	bne.n	8005388 <dir_find.part.6+0x104>
				if (dp->lfn) {
 80052d0:	f8d6 b220 	ldr.w	fp, [r6, #544]	; 0x220
 80052d4:	f1bb 0f00 	cmp.w	fp, #0
 80052d8:	d048      	beq.n	800536c <dir_find.part.6+0xe8>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80052da:	0658      	lsls	r0, r3, #25
 80052dc:	d543      	bpl.n	8005366 <dir_find.part.6+0xe2>
						c &= ~LLEF; ord = c;	/* LFN start order */
 80052de:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80052e2:	f8b6 3206 	ldrh.w	r3, [r6, #518]	; 0x206
						sum = dir[LDIR_Chksum];
 80052e6:	f895 800d 	ldrb.w	r8, [r5, #13]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80052ea:	f8a6 3224 	strh.w	r3, [r6, #548]	; 0x224
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80052ee:	7b6b      	ldrb	r3, [r5, #13]
 80052f0:	4543      	cmp	r3, r8
 80052f2:	d13a      	bne.n	800536a <dir_find.part.6+0xe6>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80052f4:	f895 a000 	ldrb.w	sl, [r5]
 80052f8:	f02a 0a40 	bic.w	sl, sl, #64	; 0x40
 80052fc:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005300:	f04f 0a0d 	mov.w	sl, #13
 8005304:	fb0a fa03 	mul.w	sl, sl, r3
	s = 0; wc = 1;
 8005308:	2001      	movs	r0, #1
 800530a:	f04f 0900 	mov.w	r9, #0
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800530e:	4b2b      	ldr	r3, [pc, #172]	; (80053bc <dir_find.part.6+0x138>)
 8005310:	f819 1003 	ldrb.w	r1, [r9, r3]
 8005314:	186a      	adds	r2, r5, r1
 8005316:	f892 e001 	ldrb.w	lr, [r2, #1]
 800531a:	5c6a      	ldrb	r2, [r5, r1]
 800531c:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
		if (wc) {	/* Last character has not been processed */
 8005320:	b378      	cbz	r0, 8005382 <dir_find.part.6+0xfe>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8005322:	4610      	mov	r0, r2
 8005324:	f001 f8a8 	bl	8006478 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8005328:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800532c:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800532e:	d81c      	bhi.n	800536a <dir_find.part.6+0xe6>
 8005330:	f10a 0201 	add.w	r2, sl, #1
 8005334:	f83b 001a 	ldrh.w	r0, [fp, sl, lsl #1]
 8005338:	9200      	str	r2, [sp, #0]
 800533a:	f001 f89d 	bl	8006478 <ff_wtoupper>
 800533e:	9901      	ldr	r1, [sp, #4]
 8005340:	4281      	cmp	r1, r0
 8005342:	d112      	bne.n	800536a <dir_find.part.6+0xe6>
 8005344:	9a00      	ldr	r2, [sp, #0]
 8005346:	4692      	mov	sl, r2
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8005348:	f109 0901 	add.w	r9, r9, #1
 800534c:	f1b9 0f0d 	cmp.w	r9, #13
 8005350:	d1dd      	bne.n	800530e <dir_find.part.6+0x8a>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8005352:	782b      	ldrb	r3, [r5, #0]
 8005354:	0659      	lsls	r1, r3, #25
 8005356:	d503      	bpl.n	8005360 <dir_find.part.6+0xdc>
 8005358:	b110      	cbz	r0, 8005360 <dir_find.part.6+0xdc>
 800535a:	f83b 301a 	ldrh.w	r3, [fp, sl, lsl #1]
 800535e:	b923      	cbnz	r3, 800536a <dir_find.part.6+0xe6>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8005360:	3c01      	subs	r4, #1
 8005362:	b2e4      	uxtb	r4, r4
 8005364:	e002      	b.n	800536c <dir_find.part.6+0xe8>
 8005366:	42a3      	cmp	r3, r4
 8005368:	d0c1      	beq.n	80052ee <dir_find.part.6+0x6a>
 800536a:	24ff      	movs	r4, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 800536c:	2100      	movs	r1, #0
 800536e:	4630      	mov	r0, r6
 8005370:	f7ff fef9 	bl	8005166 <dir_next>
	} while (res == FR_OK);
 8005374:	4682      	mov	sl, r0
 8005376:	2800      	cmp	r0, #0
 8005378:	d08e      	beq.n	8005298 <dir_find.part.6+0x14>
}
 800537a:	4650      	mov	r0, sl
 800537c:	b003      	add	sp, #12
 800537e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8005382:	42ba      	cmp	r2, r7
 8005384:	d0e0      	beq.n	8005348 <dir_find.part.6+0xc4>
 8005386:	e7f0      	b.n	800536a <dir_find.part.6+0xe6>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8005388:	b924      	cbnz	r4, 8005394 <dir_find.part.6+0x110>
 800538a:	4628      	mov	r0, r5
 800538c:	f7ff fafc 	bl	8004988 <sum_sfn>
 8005390:	4540      	cmp	r0, r8
 8005392:	d0f2      	beq.n	800537a <dir_find.part.6+0xf6>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8005394:	f8d6 3218 	ldr.w	r3, [r6, #536]	; 0x218
 8005398:	7ada      	ldrb	r2, [r3, #11]
 800539a:	07d2      	lsls	r2, r2, #31
 800539c:	d493      	bmi.n	80052c6 <dir_find.part.6+0x42>
 800539e:	f103 000b 	add.w	r0, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80053a2:	4283      	cmp	r3, r0
 80053a4:	d0e9      	beq.n	800537a <dir_find.part.6+0xf6>
 80053a6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80053aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053ae:	4291      	cmp	r1, r2
 80053b0:	d0f7      	beq.n	80053a2 <dir_find.part.6+0x11e>
 80053b2:	e788      	b.n	80052c6 <dir_find.part.6+0x42>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80053b4:	f04f 0a04 	mov.w	sl, #4
 80053b8:	e7df      	b.n	800537a <dir_find.part.6+0xf6>
 80053ba:	bf00      	nop
 80053bc:	0800ab9c 	.word	0x0800ab9c

080053c0 <follow_path>:
{
 80053c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80053c4:	780b      	ldrb	r3, [r1, #0]
 80053c6:	2b2f      	cmp	r3, #47	; 0x2f
{
 80053c8:	4607      	mov	r7, r0
 80053ca:	4688      	mov	r8, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80053cc:	d001      	beq.n	80053d2 <follow_path+0x12>
 80053ce:	2b5c      	cmp	r3, #92	; 0x5c
 80053d0:	d101      	bne.n	80053d6 <follow_path+0x16>
		path++;
 80053d2:	f108 0801 	add.w	r8, r8, #1
	dp->sclust = 0;							/* Always start from the root directory */
 80053d6:	2400      	movs	r4, #0
 80053d8:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80053dc:	f898 3000 	ldrb.w	r3, [r8]
 80053e0:	2b1f      	cmp	r3, #31
 80053e2:	f200 8092 	bhi.w	800550a <follow_path+0x14a>
		res = dir_sdi(dp, 0);
 80053e6:	4621      	mov	r1, r4
 80053e8:	4638      	mov	r0, r7
 80053ea:	f7ff fd9a 	bl	8004f22 <dir_sdi>
		dp->dir = 0;
 80053ee:	f8c7 4214 	str.w	r4, [r7, #532]	; 0x214
}
 80053f2:	b003      	add	sp, #12
 80053f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lfn[di++] = w;					/* Store the Unicode character */
 80053f8:	f825 0f02 	strh.w	r0, [r5, #2]!
 80053fc:	4646      	mov	r6, r8
 80053fe:	e094      	b.n	800552a <follow_path+0x16a>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005400:	2820      	cmp	r0, #32
	*path = &p[si];						/* Return pointer to the next segment */
 8005402:	44a0      	add	r8, r4
 8005404:	eb0b 0246 	add.w	r2, fp, r6, lsl #1
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005408:	bf34      	ite	cc
 800540a:	2404      	movcc	r4, #4
 800540c:	2400      	movcs	r4, #0
	while (di) {						/* Strip trailing spaces and dots */
 800540e:	2e00      	cmp	r6, #0
 8005410:	f000 80aa 	beq.w	8005568 <follow_path+0x1a8>
		w = lfn[di - 1];
 8005414:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 8005418:	2920      	cmp	r1, #32
 800541a:	d002      	beq.n	8005422 <follow_path+0x62>
 800541c:	292e      	cmp	r1, #46	; 0x2e
 800541e:	f040 80a7 	bne.w	8005570 <follow_path+0x1b0>
		di--;
 8005422:	3e01      	subs	r6, #1
 8005424:	e7f3      	b.n	800540e <follow_path+0x4e>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005426:	3101      	adds	r1, #1
 8005428:	f83b 2011 	ldrh.w	r2, [fp, r1, lsl #1]
 800542c:	2a20      	cmp	r2, #32
 800542e:	d0fa      	beq.n	8005426 <follow_path+0x66>
 8005430:	2a2e      	cmp	r2, #46	; 0x2e
 8005432:	d0f8      	beq.n	8005426 <follow_path+0x66>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005434:	b109      	cbz	r1, 800543a <follow_path+0x7a>
 8005436:	f044 0403 	orr.w	r4, r4, #3
 800543a:	464a      	mov	r2, r9
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800543c:	f832 0d02 	ldrh.w	r0, [r2, #-2]!
 8005440:	282e      	cmp	r0, #46	; 0x2e
 8005442:	d001      	beq.n	8005448 <follow_path+0x88>
 8005444:	3e01      	subs	r6, #1
 8005446:	d1f9      	bne.n	800543c <follow_path+0x7c>
		dp->fn[i++] = (BYTE)w;
 8005448:	f04f 0a00 	mov.w	sl, #0
 800544c:	f04f 0908 	mov.w	r9, #8
 8005450:	4655      	mov	r5, sl
		w = lfn[si++];					/* Get an LFN character */
 8005452:	f83b 0011 	ldrh.w	r0, [fp, r1, lsl #1]
 8005456:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 8005458:	2800      	cmp	r0, #0
 800545a:	f000 80a1 	beq.w	80055a0 <follow_path+0x1e0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800545e:	2820      	cmp	r0, #32
 8005460:	d004      	beq.n	800546c <follow_path+0xac>
 8005462:	282e      	cmp	r0, #46	; 0x2e
 8005464:	d106      	bne.n	8005474 <follow_path+0xb4>
 8005466:	42b2      	cmp	r2, r6
 8005468:	f000 808f 	beq.w	800558a <follow_path+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800546c:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 8005470:	4611      	mov	r1, r2
 8005472:	e7ee      	b.n	8005452 <follow_path+0x92>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005474:	45ca      	cmp	sl, r9
 8005476:	f080 808b 	bcs.w	8005590 <follow_path+0x1d0>
 800547a:	42b2      	cmp	r2, r6
 800547c:	d111      	bne.n	80054a2 <follow_path+0xe2>
			if (ni == 11) {				/* Long extension */
 800547e:	f1b9 0f0b 	cmp.w	r9, #11
 8005482:	d106      	bne.n	8005492 <follow_path+0xd2>
 8005484:	e088      	b.n	8005598 <follow_path+0x1d8>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005486:	42b2      	cmp	r2, r6
 8005488:	d003      	beq.n	8005492 <follow_path+0xd2>
 800548a:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 800548e:	f200 8087 	bhi.w	80055a0 <follow_path+0x1e0>
			b <<= 2; continue;
 8005492:	00ad      	lsls	r5, r5, #2
 8005494:	b2ed      	uxtb	r5, r5
 8005496:	4632      	mov	r2, r6
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005498:	f04f 090b 	mov.w	r9, #11
 800549c:	f04f 0a08 	mov.w	sl, #8
 80054a0:	e7e6      	b.n	8005470 <follow_path+0xb0>
		if (w >= 0x80) {				/* Non ASCII character */
 80054a2:	287f      	cmp	r0, #127	; 0x7f
 80054a4:	d90d      	bls.n	80054c2 <follow_path+0x102>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80054a6:	2100      	movs	r1, #0
 80054a8:	9201      	str	r2, [sp, #4]
 80054aa:	f000 ffc7 	bl	800643c <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80054ae:	9a01      	ldr	r2, [sp, #4]
 80054b0:	b118      	cbz	r0, 80054ba <follow_path+0xfa>
 80054b2:	4b60      	ldr	r3, [pc, #384]	; (8005634 <follow_path+0x274>)
 80054b4:	4418      	add	r0, r3
 80054b6:	f810 0c80 	ldrb.w	r0, [r0, #-128]
 80054ba:	b280      	uxth	r0, r0
			cf |= NS_LFN;				/* Force create LFN entry */
 80054bc:	f044 0402 	orr.w	r4, r4, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80054c0:	b138      	cbz	r0, 80054d2 <follow_path+0x112>
 80054c2:	4b5d      	ldr	r3, [pc, #372]	; (8005638 <follow_path+0x278>)
	while (*str && *str != chr) str++;
 80054c4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80054c8:	2900      	cmp	r1, #0
 80054ca:	f000 80a4 	beq.w	8005616 <follow_path+0x256>
 80054ce:	4281      	cmp	r1, r0
 80054d0:	d1f8      	bne.n	80054c4 <follow_path+0x104>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80054d2:	f044 0403 	orr.w	r4, r4, #3
 80054d6:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 80054d8:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 80054dc:	f801 000a 	strb.w	r0, [r1, sl]
 80054e0:	f10a 0a01 	add.w	sl, sl, #1
 80054e4:	e7c4      	b.n	8005470 <follow_path+0xb0>
					b |= 2;
 80054e6:	f045 0502 	orr.w	r5, r5, #2
 80054ea:	e7f5      	b.n	80054d8 <follow_path+0x118>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80054ec:	075a      	lsls	r2, r3, #29
 80054ee:	d480      	bmi.n	80053f2 <follow_path+0x32>
			dir = dp->dir;						/* Follow the sub-directory */
 80054f0:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80054f4:	7acb      	ldrb	r3, [r1, #11]
 80054f6:	06db      	lsls	r3, r3, #27
 80054f8:	d538      	bpl.n	800556c <follow_path+0x1ac>
			dp->sclust = ld_clust(dp->fs, dir);
 80054fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80054fe:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8005502:	f7ff fa7f 	bl	8004a04 <ld_clust.isra.0>
 8005506:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800550a:	f898 3000 	ldrb.w	r3, [r8]
 800550e:	2b2f      	cmp	r3, #47	; 0x2f
 8005510:	4644      	mov	r4, r8
 8005512:	f108 0801 	add.w	r8, r8, #1
 8005516:	d0f8      	beq.n	800550a <follow_path+0x14a>
 8005518:	2b5c      	cmp	r3, #92	; 0x5c
 800551a:	d0f6      	beq.n	800550a <follow_path+0x14a>
	lfn = dp->lfn;
 800551c:	f8d7 b220 	ldr.w	fp, [r7, #544]	; 0x220
 8005520:	f104 39ff 	add.w	r9, r4, #4294967295
 8005524:	f1ab 0502 	sub.w	r5, fp, #2
	si = di = 0;
 8005528:	2600      	movs	r6, #0
		w = p[si++];					/* Get a character */
 800552a:	f819 0f01 	ldrb.w	r0, [r9, #1]!
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800552e:	281f      	cmp	r0, #31
		w = p[si++];					/* Get a character */
 8005530:	f106 0801 	add.w	r8, r6, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8005534:	f67f af64 	bls.w	8005400 <follow_path+0x40>
 8005538:	282f      	cmp	r0, #47	; 0x2f
 800553a:	f43f af61 	beq.w	8005400 <follow_path+0x40>
 800553e:	285c      	cmp	r0, #92	; 0x5c
 8005540:	f43f af5e 	beq.w	8005400 <follow_path+0x40>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8005544:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
 8005548:	d00e      	beq.n	8005568 <follow_path+0x1a8>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800554a:	2101      	movs	r1, #1
 800554c:	f000 ff76 	bl	800643c <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005550:	b150      	cbz	r0, 8005568 <follow_path+0x1a8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8005552:	287f      	cmp	r0, #127	; 0x7f
 8005554:	f63f af50 	bhi.w	80053f8 <follow_path+0x38>
 8005558:	4938      	ldr	r1, [pc, #224]	; (800563c <follow_path+0x27c>)
	while (*str && *str != chr) str++;
 800555a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800555e:	2a00      	cmp	r2, #0
 8005560:	f43f af4a 	beq.w	80053f8 <follow_path+0x38>
 8005564:	4282      	cmp	r2, r0
 8005566:	d1f8      	bne.n	800555a <follow_path+0x19a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005568:	2006      	movs	r0, #6
 800556a:	e742      	b.n	80053f2 <follow_path+0x32>
 800556c:	2005      	movs	r0, #5
	return res;
 800556e:	e740      	b.n	80053f2 <follow_path+0x32>
	lfn[di] = 0;						/* LFN is created */
 8005570:	2500      	movs	r5, #0
	mem_set(dp->fn, ' ', 11);
 8005572:	2120      	movs	r1, #32
	lfn[di] = 0;						/* LFN is created */
 8005574:	f82b 5016 	strh.w	r5, [fp, r6, lsl #1]
	mem_set(dp->fn, ' ', 11);
 8005578:	220b      	movs	r2, #11
 800557a:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 800557e:	f7ff f967 	bl	8004850 <mem_set>
	lfn[di] = 0;						/* LFN is created */
 8005582:	eb0b 0946 	add.w	r9, fp, r6, lsl #1
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005586:	4629      	mov	r1, r5
 8005588:	e74e      	b.n	8005428 <follow_path+0x68>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800558a:	45ca      	cmp	sl, r9
 800558c:	f4ff af77 	bcc.w	800547e <follow_path+0xbe>
			if (ni == 11) {				/* Long extension */
 8005590:	f1b9 0f0b 	cmp.w	r9, #11
 8005594:	f47f af77 	bne.w	8005486 <follow_path+0xc6>
				cf |= NS_LOSS | NS_LFN; break;
 8005598:	f044 0403 	orr.w	r4, r4, #3
 800559c:	f04f 090b 	mov.w	r9, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80055a0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80055a4:	781a      	ldrb	r2, [r3, #0]
 80055a6:	2ae5      	cmp	r2, #229	; 0xe5
 80055a8:	bf04      	itt	eq
 80055aa:	2205      	moveq	r2, #5
 80055ac:	701a      	strbeq	r2, [r3, #0]
	if (ni == 8) b <<= 2;
 80055ae:	f1b9 0f08 	cmp.w	r9, #8
 80055b2:	bf04      	itt	eq
 80055b4:	00ad      	lsleq	r5, r5, #2
 80055b6:	b2ed      	uxtbeq	r5, r5
 80055b8:	f005 030c 	and.w	r3, r5, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80055bc:	2b0c      	cmp	r3, #12
 80055be:	d003      	beq.n	80055c8 <follow_path+0x208>
 80055c0:	f005 0203 	and.w	r2, r5, #3
 80055c4:	2a03      	cmp	r2, #3
 80055c6:	d101      	bne.n	80055cc <follow_path+0x20c>
		cf |= NS_LFN;
 80055c8:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80055cc:	07a1      	lsls	r1, r4, #30
 80055ce:	d409      	bmi.n	80055e4 <follow_path+0x224>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80055d0:	f005 0503 	and.w	r5, r5, #3
 80055d4:	2d01      	cmp	r5, #1
 80055d6:	bf08      	it	eq
 80055d8:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80055dc:	2b04      	cmp	r3, #4
 80055de:	bf08      	it	eq
 80055e0:	f044 0408 	orreq.w	r4, r4, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80055e4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80055e8:	2100      	movs	r1, #0
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80055ea:	72dc      	strb	r4, [r3, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80055ec:	4638      	mov	r0, r7
 80055ee:	f7ff fc98 	bl	8004f22 <dir_sdi>
	if (res != FR_OK) return res;
 80055f2:	b910      	cbnz	r0, 80055fa <follow_path+0x23a>
 80055f4:	4638      	mov	r0, r7
 80055f6:	f7ff fe45 	bl	8005284 <dir_find.part.6>
			ns = dp->fn[NSFLAG];
 80055fa:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80055fe:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005600:	2800      	cmp	r0, #0
 8005602:	f43f af73 	beq.w	80054ec <follow_path+0x12c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005606:	2804      	cmp	r0, #4
 8005608:	f47f aef3 	bne.w	80053f2 <follow_path+0x32>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800560c:	f013 0f04 	tst.w	r3, #4
 8005610:	bf08      	it	eq
 8005612:	2005      	moveq	r0, #5
 8005614:	e6ed      	b.n	80053f2 <follow_path+0x32>
				if (IsUpper(w)) {		/* ASCII large capital */
 8005616:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 800561a:	2919      	cmp	r1, #25
 800561c:	f67f af63 	bls.w	80054e6 <follow_path+0x126>
					if (IsLower(w)) {	/* ASCII small capital */
 8005620:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8005624:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8005626:	bf9e      	ittt	ls
 8005628:	3820      	subls	r0, #32
 800562a:	f045 0501 	orrls.w	r5, r5, #1
 800562e:	b280      	uxthls	r0, r0
 8005630:	e752      	b.n	80054d8 <follow_path+0x118>
 8005632:	bf00      	nop
 8005634:	0800ab1c 	.word	0x0800ab1c
 8005638:	0800abb1 	.word	0x0800abb1
 800563c:	0800aba8 	.word	0x0800aba8

08005640 <dir_register>:
{
 8005640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	fn = dp->fn; lfn = dp->lfn;
 8005644:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
 8005648:	f8d0 7220 	ldr.w	r7, [r0, #544]	; 0x220
{
 800564c:	b086      	sub	sp, #24
	mem_cpy(sn, fn, 12);
 800564e:	220c      	movs	r2, #12
{
 8005650:	4604      	mov	r4, r0
	mem_cpy(sn, fn, 12);
 8005652:	4631      	mov	r1, r6
 8005654:	eb0d 0002 	add.w	r0, sp, r2
 8005658:	f7ff f8f0 	bl	800483c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800565c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005660:	07db      	lsls	r3, r3, #31
 8005662:	d57c      	bpl.n	800575e <dir_register+0x11e>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8005664:	2300      	movs	r3, #0
				if (sr & 0x10000) sr ^= 0x11021;
 8005666:	f8df 8244 	ldr.w	r8, [pc, #580]	; 80058ac <dir_register+0x26c>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800566a:	72f3      	strb	r3, [r6, #11]
		for (n = 1; n < 100; n++) {
 800566c:	f04f 0901 	mov.w	r9, #1
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8005670:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
	mem_cpy(dst, src, 11);
 8005674:	220b      	movs	r2, #11
 8005676:	a903      	add	r1, sp, #12
 8005678:	4630      	mov	r0, r6
 800567a:	f7ff f8df 	bl	800483c <mem_cpy>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800567e:	f1b9 0f05 	cmp.w	r9, #5
 8005682:	d850      	bhi.n	8005726 <dir_register+0xe6>
 8005684:	464b      	mov	r3, r9
		while (*lfn) {	/* Create a CRC */
 8005686:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
 8005688:	f003 000f 	and.w	r0, r3, #15
 800568c:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 8005690:	2939      	cmp	r1, #57	; 0x39
 8005692:	bf88      	it	hi
 8005694:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
 8005698:	3a01      	subs	r2, #1
 800569a:	a801      	add	r0, sp, #4
 800569c:	4410      	add	r0, r2
	} while (seq);
 800569e:	091b      	lsrs	r3, r3, #4
		ns[i--] = c;
 80056a0:	7041      	strb	r1, [r0, #1]
	} while (seq);
 80056a2:	d1f1      	bne.n	8005688 <dir_register+0x48>
	ns[i] = '~';
 80056a4:	a906      	add	r1, sp, #24
 80056a6:	4411      	add	r1, r2
 80056a8:	207e      	movs	r0, #126	; 0x7e
 80056aa:	f801 0c14 	strb.w	r0, [r1, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d03e      	beq.n	8005730 <dir_register+0xf0>
 80056b2:	5cf1      	ldrb	r1, [r6, r3]
 80056b4:	2920      	cmp	r1, #32
 80056b6:	d139      	bne.n	800572c <dir_register+0xec>
 80056b8:	4433      	add	r3, r6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80056ba:	2a07      	cmp	r2, #7
 80056bc:	bf9b      	ittet	ls
 80056be:	a906      	addls	r1, sp, #24
 80056c0:	1889      	addls	r1, r1, r2
 80056c2:	2120      	movhi	r1, #32
 80056c4:	f811 1c14 	ldrbls.w	r1, [r1, #-20]
 80056c8:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
 80056cc:	eba3 0106 	sub.w	r1, r3, r6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80056d0:	bf98      	it	ls
 80056d2:	3201      	addls	r2, #1
	} while (j < 8);
 80056d4:	2907      	cmp	r1, #7
 80056d6:	d9f0      	bls.n	80056ba <dir_register+0x7a>
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80056d8:	2100      	movs	r1, #0
 80056da:	4620      	mov	r0, r4
 80056dc:	f7ff fc21 	bl	8004f22 <dir_sdi>
	if (res != FR_OK) return res;
 80056e0:	4605      	mov	r5, r0
 80056e2:	bba8      	cbnz	r0, 8005750 <dir_register+0x110>
 80056e4:	4620      	mov	r0, r4
 80056e6:	f7ff fdcd 	bl	8005284 <dir_find.part.6>
			if (res != FR_OK) break;
 80056ea:	4605      	mov	r5, r0
 80056ec:	bb80      	cbnz	r0, 8005750 <dir_register+0x110>
		for (n = 1; n < 100; n++) {
 80056ee:	f109 0901 	add.w	r9, r9, #1
 80056f2:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 80056f6:	d1bd      	bne.n	8005674 <dir_register+0x34>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80056f8:	2507      	movs	r5, #7
}
 80056fa:	4628      	mov	r0, r5
 80056fc:	b006      	add	sp, #24
 80056fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		while (*lfn) {	/* Create a CRC */
 8005702:	2110      	movs	r1, #16
				sr = (sr << 1) + (wc & 1);
 8005704:	f002 0501 	and.w	r5, r2, #1
 8005708:	eb05 0343 	add.w	r3, r5, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800570c:	03dd      	lsls	r5, r3, #15
 800570e:	bf48      	it	mi
 8005710:	ea83 0308 	eormi.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
 8005714:	3901      	subs	r1, #1
				wc >>= 1;
 8005716:	ea4f 0252 	mov.w	r2, r2, lsr #1
			for (i = 0; i < 16; i++) {
 800571a:	d1f3      	bne.n	8005704 <dir_register+0xc4>
		while (*lfn) {	/* Create a CRC */
 800571c:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8005720:	2a00      	cmp	r2, #0
 8005722:	d1ee      	bne.n	8005702 <dir_register+0xc2>
 8005724:	e7af      	b.n	8005686 <dir_register+0x46>
 8005726:	1eb8      	subs	r0, r7, #2
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8005728:	464b      	mov	r3, r9
 800572a:	e7f7      	b.n	800571c <dir_register+0xdc>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800572c:	3301      	adds	r3, #1
 800572e:	e7be      	b.n	80056ae <dir_register+0x6e>
 8005730:	4613      	mov	r3, r2
 8005732:	e7c1      	b.n	80056b8 <dir_register+0x78>
		for (n = 0; lfn[n]; n++) ;
 8005734:	3601      	adds	r6, #1
 8005736:	e017      	b.n	8005768 <dir_register+0x128>
		nent = 1;
 8005738:	2601      	movs	r6, #1
 800573a:	e01d      	b.n	8005778 <dir_register+0x138>
				n = 0;					/* Not a blank entry. Restart to search */
 800573c:	4607      	mov	r7, r0
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800573e:	2101      	movs	r1, #1
 8005740:	4620      	mov	r0, r4
 8005742:	f7ff fd10 	bl	8005166 <dir_next>
		} while (res == FR_OK);
 8005746:	4605      	mov	r5, r0
 8005748:	b1f0      	cbz	r0, 8005788 <dir_register+0x148>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800574a:	2d04      	cmp	r5, #4
 800574c:	d0d4      	beq.n	80056f8 <dir_register+0xb8>
 800574e:	e7d4      	b.n	80056fa <dir_register+0xba>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005750:	2d04      	cmp	r5, #4
 8005752:	d1d2      	bne.n	80056fa <dir_register+0xba>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8005754:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005758:	72f3      	strb	r3, [r6, #11]
 800575a:	f8c4 7220 	str.w	r7, [r4, #544]	; 0x220
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800575e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005762:	079b      	lsls	r3, r3, #30
 8005764:	d5e8      	bpl.n	8005738 <dir_register+0xf8>
 8005766:	2600      	movs	r6, #0
		for (n = 0; lfn[n]; n++) ;
 8005768:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e1      	bne.n	8005734 <dir_register+0xf4>
		nent = (n + 25) / 13;
 8005770:	3619      	adds	r6, #25
 8005772:	230d      	movs	r3, #13
 8005774:	fbb6 f6f3 	udiv	r6, r6, r3
	res = dir_sdi(dp, 0);
 8005778:	2100      	movs	r1, #0
 800577a:	4620      	mov	r0, r4
 800577c:	f7ff fbd1 	bl	8004f22 <dir_sdi>
	if (res == FR_OK) {
 8005780:	4605      	mov	r5, r0
 8005782:	2800      	cmp	r0, #0
 8005784:	d1e1      	bne.n	800574a <dir_register+0x10a>
 8005786:	4607      	mov	r7, r0
			res = move_window(dp->fs, dp->sect);
 8005788:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 800578c:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005790:	f7ff f9d3 	bl	8004b3a <move_window>
			if (res != FR_OK) break;
 8005794:	4605      	mov	r5, r0
 8005796:	2800      	cmp	r0, #0
 8005798:	d1d7      	bne.n	800574a <dir_register+0x10a>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800579a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2be5      	cmp	r3, #229	; 0xe5
 80057a2:	d001      	beq.n	80057a8 <dir_register+0x168>
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1c9      	bne.n	800573c <dir_register+0xfc>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80057a8:	3701      	adds	r7, #1
 80057aa:	42be      	cmp	r6, r7
 80057ac:	d1c7      	bne.n	800573e <dir_register+0xfe>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80057ae:	3e01      	subs	r6, #1
 80057b0:	d056      	beq.n	8005860 <dir_register+0x220>
		res = dir_sdi(dp, dp->index - nent);
 80057b2:	f8b4 1206 	ldrh.w	r1, [r4, #518]	; 0x206
 80057b6:	4620      	mov	r0, r4
 80057b8:	1b89      	subs	r1, r1, r6
 80057ba:	f7ff fbb2 	bl	8004f22 <dir_sdi>
		if (res == FR_OK) {
 80057be:	4605      	mov	r5, r0
 80057c0:	2800      	cmp	r0, #0
 80057c2:	d19a      	bne.n	80056fa <dir_register+0xba>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80057c4:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 80057c8:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80058b0 <dir_register+0x270>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80057cc:	f7ff f8dc 	bl	8004988 <sum_sfn>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 80057d0:	f64f 79ff 	movw	r9, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80057d4:	4607      	mov	r7, r0
				res = move_window(dp->fs, dp->sect);
 80057d6:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 80057da:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80057de:	f7ff f9ac 	bl	8004b3a <move_window>
 80057e2:	4605      	mov	r5, r0
				if (res != FR_OK) break;
 80057e4:	2800      	cmp	r0, #0
 80057e6:	d188      	bne.n	80056fa <dir_register+0xba>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80057e8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80057ec:	f8d4 c220 	ldr.w	ip, [r4, #544]	; 0x220
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80057f0:	735f      	strb	r7, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80057f2:	220f      	movs	r2, #15
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80057f4:	b2f1      	uxtb	r1, r6
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80057f6:	250d      	movs	r5, #13
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80057f8:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80057fa:	1e4a      	subs	r2, r1, #1
 80057fc:	436a      	muls	r2, r5
	dir[LDIR_Type] = 0;
 80057fe:	7318      	strb	r0, [r3, #12]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8005800:	7698      	strb	r0, [r3, #26]
 8005802:	76d8      	strb	r0, [r3, #27]
	s = wc = 0;
 8005804:	4605      	mov	r5, r0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8005806:	4548      	cmp	r0, r9
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005808:	f815 e008 	ldrb.w	lr, [r5, r8]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800580c:	bf18      	it	ne
 800580e:	f83c 0012 	ldrhne.w	r0, [ip, r2, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005812:	f803 000e 	strb.w	r0, [r3, lr]
	} while (++s < 13);
 8005816:	f105 0501 	add.w	r5, r5, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800581a:	449e      	add	lr, r3
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800581c:	bf18      	it	ne
 800581e:	3201      	addne	r2, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8005820:	ea4f 2a10 	mov.w	sl, r0, lsr #8
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8005824:	2800      	cmp	r0, #0
 8005826:	bf08      	it	eq
 8005828:	4648      	moveq	r0, r9
	} while (++s < 13);
 800582a:	2d0d      	cmp	r5, #13
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800582c:	f88e a001 	strb.w	sl, [lr, #1]
	} while (++s < 13);
 8005830:	d1e9      	bne.n	8005806 <dir_register+0x1c6>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8005832:	4548      	cmp	r0, r9
 8005834:	d002      	beq.n	800583c <dir_register+0x1fc>
 8005836:	f83c 2012 	ldrh.w	r2, [ip, r2, lsl #1]
 800583a:	b90a      	cbnz	r2, 8005840 <dir_register+0x200>
 800583c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005840:	7019      	strb	r1, [r3, #0]
				dp->fs->wflag = 1;
 8005842:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = dir_next(dp, 0);	/* Next entry */
 800584c:	2100      	movs	r1, #0
 800584e:	4620      	mov	r0, r4
 8005850:	f7ff fc89 	bl	8005166 <dir_next>
			} while (res == FR_OK && --nent);
 8005854:	4605      	mov	r5, r0
 8005856:	2800      	cmp	r0, #0
 8005858:	f47f af4f 	bne.w	80056fa <dir_register+0xba>
 800585c:	3e01      	subs	r6, #1
 800585e:	d1ba      	bne.n	80057d6 <dir_register+0x196>
		res = move_window(dp->fs, dp->sect);
 8005860:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 8005864:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005868:	f7ff f967 	bl	8004b3a <move_window>
		if (res == FR_OK) {
 800586c:	4605      	mov	r5, r0
 800586e:	2800      	cmp	r0, #0
 8005870:	f47f af43 	bne.w	80056fa <dir_register+0xba>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8005874:	2220      	movs	r2, #32
 8005876:	4629      	mov	r1, r5
 8005878:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
 800587c:	f7fe ffe8 	bl	8004850 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8005880:	220b      	movs	r2, #11
 8005882:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 8005886:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
 800588a:	f7fe ffd7 	bl	800483c <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800588e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8005892:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8005896:	7adb      	ldrb	r3, [r3, #11]
 8005898:	f003 0318 	and.w	r3, r3, #24
 800589c:	7313      	strb	r3, [r2, #12]
			dp->fs->wflag = 1;
 800589e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 80058a8:	e727      	b.n	80056fa <dir_register+0xba>
 80058aa:	bf00      	nop
 80058ac:	00011021 	.word	0x00011021
 80058b0:	0800ab9c 	.word	0x0800ab9c

080058b4 <dir_remove>:
{
 80058b4:	b570      	push	{r4, r5, r6, lr}
	res = dir_sdi(dp, (dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx);	/* Goto the SFN or top of the LFN entries */
 80058b6:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
	i = dp->index;	/* SFN index */
 80058ba:	f8b0 5206 	ldrh.w	r5, [r0, #518]	; 0x206
	res = dir_sdi(dp, (dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx);	/* Goto the SFN or top of the LFN entries */
 80058be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058c2:	4299      	cmp	r1, r3
 80058c4:	bf08      	it	eq
 80058c6:	4629      	moveq	r1, r5
{
 80058c8:	4604      	mov	r4, r0
	res = dir_sdi(dp, (dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx);	/* Goto the SFN or top of the LFN entries */
 80058ca:	f7ff fb2a 	bl	8004f22 <dir_sdi>
	if (res == FR_OK) {
 80058ce:	4603      	mov	r3, r0
 80058d0:	bb20      	cbnz	r0, 800591c <dir_remove+0x68>
			*dp->dir = DDEM;
 80058d2:	26e5      	movs	r6, #229	; 0xe5
			res = move_window(dp->fs, dp->sect);
 80058d4:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
 80058d8:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80058dc:	f7ff f92d 	bl	8004b3a <move_window>
			if (res != FR_OK) break;
 80058e0:	4603      	mov	r3, r0
 80058e2:	b9c0      	cbnz	r0, 8005916 <dir_remove+0x62>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 80058e4:	4601      	mov	r1, r0
 80058e6:	2220      	movs	r2, #32
 80058e8:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
 80058ec:	f7fe ffb0 	bl	8004850 <mem_set>
			*dp->dir = DDEM;
 80058f0:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 80058f4:	7016      	strb	r6, [r2, #0]
			dp->fs->wflag = 1;
 80058f6:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 80058fa:	2101      	movs	r1, #1
 80058fc:	f882 1204 	strb.w	r1, [r2, #516]	; 0x204
			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
 8005900:	f8b4 2206 	ldrh.w	r2, [r4, #518]	; 0x206
 8005904:	4295      	cmp	r5, r2
 8005906:	d909      	bls.n	800591c <dir_remove+0x68>
			res = dir_next(dp, 0);		/* Next entry */
 8005908:	4619      	mov	r1, r3
 800590a:	4620      	mov	r0, r4
 800590c:	f7ff fc2b 	bl	8005166 <dir_next>
		} while (res == FR_OK);
 8005910:	4603      	mov	r3, r0
 8005912:	2800      	cmp	r0, #0
 8005914:	d0de      	beq.n	80058d4 <dir_remove+0x20>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8005916:	2b04      	cmp	r3, #4
 8005918:	bf08      	it	eq
 800591a:	2302      	moveq	r3, #2
}
 800591c:	4618      	mov	r0, r3
 800591e:	bd70      	pop	{r4, r5, r6, pc}

08005920 <dir_read.constprop.11>:
FRESULT dir_read (
 8005920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	BYTE ord = 0xFF, sum = 0xFF;
 8005924:	27ff      	movs	r7, #255	; 0xff
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 8005926:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8005a24 <dir_read.constprop.11+0x104>
FRESULT dir_read (
 800592a:	4605      	mov	r5, r0
	BYTE ord = 0xFF, sum = 0xFF;
 800592c:	463c      	mov	r4, r7
	res = FR_NO_FILE;
 800592e:	2604      	movs	r6, #4
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005930:	f64f 79ff 	movw	r9, #65535	; 0xffff
	while (dp->sect) {
 8005934:	f8d5 1210 	ldr.w	r1, [r5, #528]	; 0x210
 8005938:	b911      	cbnz	r1, 8005940 <dir_read.constprop.11+0x20>
	if (res != FR_OK) dp->sect = 0;
 800593a:	2e00      	cmp	r6, #0
 800593c:	d067      	beq.n	8005a0e <dir_read.constprop.11+0xee>
 800593e:	e05a      	b.n	80059f6 <dir_read.constprop.11+0xd6>
		res = move_window(dp->fs, dp->sect);
 8005940:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
 8005944:	f7ff f8f9 	bl	8004b3a <move_window>
		if (res != FR_OK) break;
 8005948:	4606      	mov	r6, r0
 800594a:	2800      	cmp	r0, #0
 800594c:	d153      	bne.n	80059f6 <dir_read.constprop.11+0xd6>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800594e:	f8d5 0214 	ldr.w	r0, [r5, #532]	; 0x214
		c = dir[DIR_Name];
 8005952:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005954:	2b00      	cmp	r3, #0
 8005956:	d063      	beq.n	8005a20 <dir_read.constprop.11+0x100>
		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005958:	2be5      	cmp	r3, #229	; 0xe5
 800595a:	d044      	beq.n	80059e6 <dir_read.constprop.11+0xc6>
 800595c:	2b2e      	cmp	r3, #46	; 0x2e
 800595e:	d042      	beq.n	80059e6 <dir_read.constprop.11+0xc6>
		a = dir[DIR_Attr] & AM_MASK;
 8005960:	7ac2      	ldrb	r2, [r0, #11]
 8005962:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005966:	f022 0120 	bic.w	r1, r2, #32
 800596a:	2908      	cmp	r1, #8
 800596c:	d03b      	beq.n	80059e6 <dir_read.constprop.11+0xc6>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800596e:	2a0f      	cmp	r2, #15
 8005970:	d148      	bne.n	8005a04 <dir_read.constprop.11+0xe4>
				if (c & LLEF) {			/* Is it start of LFN sequence? */
 8005972:	0659      	lsls	r1, r3, #25
 8005974:	d535      	bpl.n	80059e2 <dir_read.constprop.11+0xc2>
					c &= ~LLEF; ord = c;
 8005976:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
					dp->lfn_idx = dp->index;
 800597a:	f8b5 3206 	ldrh.w	r3, [r5, #518]	; 0x206
					sum = dir[LDIR_Chksum];
 800597e:	7b47      	ldrb	r7, [r0, #13]
					dp->lfn_idx = dp->index;
 8005980:	f8a5 3224 	strh.w	r3, [r5, #548]	; 0x224
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8005984:	7b43      	ldrb	r3, [r0, #13]
 8005986:	42bb      	cmp	r3, r7
 8005988:	d12d      	bne.n	80059e6 <dir_read.constprop.11+0xc6>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800598a:	7803      	ldrb	r3, [r0, #0]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800598c:	f8d5 6220 	ldr.w	r6, [r5, #544]	; 0x220
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005994:	3b01      	subs	r3, #1
 8005996:	220d      	movs	r2, #13
 8005998:	4353      	muls	r3, r2
	s = 0; wc = 1;
 800599a:	f04f 0e01 	mov.w	lr, #1
 800599e:	2100      	movs	r1, #0
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 80059a0:	f811 c008 	ldrb.w	ip, [r1, r8]
 80059a4:	eb00 020c 	add.w	r2, r0, ip
 80059a8:	f892 a001 	ldrb.w	sl, [r2, #1]
 80059ac:	f810 200c 	ldrb.w	r2, [r0, ip]
 80059b0:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
		if (wc) {	/* Last character has not been processed */
 80059b4:	f1be 0f00 	cmp.w	lr, #0
 80059b8:	d021      	beq.n	80059fe <dir_read.constprop.11+0xde>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80059ba:	2bfe      	cmp	r3, #254	; 0xfe
 80059bc:	d813      	bhi.n	80059e6 <dir_read.constprop.11+0xc6>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80059be:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
 80059c2:	4696      	mov	lr, r2
			lfnbuf[i++] = wc = uc;			/* Store it */
 80059c4:	3301      	adds	r3, #1
	} while (++s < 13);						/* Read all character in the entry */
 80059c6:	3101      	adds	r1, #1
 80059c8:	290d      	cmp	r1, #13
 80059ca:	d1e9      	bne.n	80059a0 <dir_read.constprop.11+0x80>
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80059cc:	7802      	ldrb	r2, [r0, #0]
 80059ce:	0652      	lsls	r2, r2, #25
 80059d0:	d504      	bpl.n	80059dc <dir_read.constprop.11+0xbc>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80059d2:	2bfe      	cmp	r3, #254	; 0xfe
 80059d4:	d807      	bhi.n	80059e6 <dir_read.constprop.11+0xc6>
		lfnbuf[i] = 0;
 80059d6:	2200      	movs	r2, #0
 80059d8:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80059dc:	3c01      	subs	r4, #1
 80059de:	b2e4      	uxtb	r4, r4
 80059e0:	e002      	b.n	80059e8 <dir_read.constprop.11+0xc8>
 80059e2:	42a3      	cmp	r3, r4
 80059e4:	d0ce      	beq.n	8005984 <dir_read.constprop.11+0x64>
 80059e6:	24ff      	movs	r4, #255	; 0xff
		res = dir_next(dp, 0);				/* Next entry */
 80059e8:	2100      	movs	r1, #0
 80059ea:	4628      	mov	r0, r5
 80059ec:	f7ff fbbb 	bl	8005166 <dir_next>
		if (res != FR_OK) break;
 80059f0:	4606      	mov	r6, r0
 80059f2:	2800      	cmp	r0, #0
 80059f4:	d09e      	beq.n	8005934 <dir_read.constprop.11+0x14>
	if (res != FR_OK) dp->sect = 0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
 80059fc:	e008      	b.n	8005a10 <dir_read.constprop.11+0xf0>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80059fe:	454a      	cmp	r2, r9
 8005a00:	d0e1      	beq.n	80059c6 <dir_read.constprop.11+0xa6>
 8005a02:	e7f0      	b.n	80059e6 <dir_read.constprop.11+0xc6>
				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 8005a04:	b93c      	cbnz	r4, 8005a16 <dir_read.constprop.11+0xf6>
 8005a06:	f7fe ffbf 	bl	8004988 <sum_sfn>
 8005a0a:	42b8      	cmp	r0, r7
 8005a0c:	d103      	bne.n	8005a16 <dir_read.constprop.11+0xf6>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005a0e:	2600      	movs	r6, #0
}
 8005a10:	4630      	mov	r0, r6
 8005a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
 8005a16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a1a:	f8a5 3224 	strh.w	r3, [r5, #548]	; 0x224
 8005a1e:	e7f7      	b.n	8005a10 <dir_read.constprop.11+0xf0>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005a20:	2604      	movs	r6, #4
 8005a22:	e7e8      	b.n	80059f6 <dir_read.constprop.11+0xd6>
 8005a24:	0800ab9c 	.word	0x0800ab9c

08005a28 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005a28:	2901      	cmp	r1, #1
{
 8005a2a:	b570      	push	{r4, r5, r6, lr}
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005a30:	d801      	bhi.n	8005a36 <remove_chain+0xe>
		res = FR_INT_ERR;
 8005a32:	2002      	movs	r0, #2
 8005a34:	bd70      	pop	{r4, r5, r6, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005a36:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005a3a:	4299      	cmp	r1, r3
 8005a3c:	d2f9      	bcs.n	8005a32 <remove_chain+0xa>
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005a3e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8005a42:	429d      	cmp	r5, r3
 8005a44:	d205      	bcs.n	8005a52 <remove_chain+0x2a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005a46:	4629      	mov	r1, r5
 8005a48:	4620      	mov	r0, r4
 8005a4a:	f7ff fa09 	bl	8004e60 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8005a4e:	4606      	mov	r6, r0
 8005a50:	b908      	cbnz	r0, 8005a56 <remove_chain+0x2e>
		res = FR_INT_ERR;
 8005a52:	2000      	movs	r0, #0
 8005a54:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005a56:	2801      	cmp	r0, #1
 8005a58:	d0eb      	beq.n	8005a32 <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005a5a:	1c41      	adds	r1, r0, #1
 8005a5c:	d014      	beq.n	8005a88 <remove_chain+0x60>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005a5e:	2200      	movs	r2, #0
 8005a60:	4629      	mov	r1, r5
 8005a62:	4620      	mov	r0, r4
 8005a64:	f7ff faac 	bl	8004fc0 <put_fat>
			if (res != FR_OK) break;
 8005a68:	b978      	cbnz	r0, 8005a8a <remove_chain+0x62>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005a6a:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	d008      	beq.n	8005a84 <remove_chain+0x5c>
				fs->free_clust++;
 8005a72:	3301      	adds	r3, #1
 8005a74:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
				fs->fsi_flag |= 1;
 8005a78:	f894 3205 	ldrb.w	r3, [r4, #517]	; 0x205
 8005a7c:	f043 0301 	orr.w	r3, r3, #1
 8005a80:	f884 3205 	strb.w	r3, [r4, #517]	; 0x205
{
 8005a84:	4635      	mov	r5, r6
 8005a86:	e7da      	b.n	8005a3e <remove_chain+0x16>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005a88:	2001      	movs	r0, #1
}
 8005a8a:	bd70      	pop	{r4, r5, r6, pc}

08005a8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	4616      	mov	r6, r2
 8005a92:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005a94:	a804      	add	r0, sp, #16
{
 8005a96:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8005a98:	f840 1d04 	str.w	r1, [r0, #-4]!


	vol = get_ldnumber(&rp);
 8005a9c:	f7fe ff83 	bl	80049a6 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005aa0:	1e05      	subs	r5, r0, #0
 8005aa2:	db21      	blt.n	8005ae8 <f_mount+0x5c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005aa4:	4912      	ldr	r1, [pc, #72]	; (8005af0 <f_mount+0x64>)
 8005aa6:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 8005aaa:	b164      	cbz	r4, 8005ac6 <f_mount+0x3a>
 8005aac:	2300      	movs	r3, #0
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005aae:	4811      	ldr	r0, [pc, #68]	; (8005af4 <f_mount+0x68>)
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	581f      	ldr	r7, [r3, r0]
 8005ab4:	42bc      	cmp	r4, r7
 8005ab6:	bf08      	it	eq
 8005ab8:	501a      	streq	r2, [r3, r0]
 8005aba:	330c      	adds	r3, #12
	for (i = 0; i < _FS_LOCK; i++) {
 8005abc:	2b48      	cmp	r3, #72	; 0x48
 8005abe:	d1f8      	bne.n	8005ab2 <f_mount+0x26>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
	}

	if (fs) {
 8005ac6:	9801      	ldr	r0, [sp, #4]
 8005ac8:	b110      	cbz	r0, 8005ad0 <f_mount+0x44>
		fs->fs_type = 0;				/* Clear new fs object */
 8005aca:	2300      	movs	r3, #0
 8005acc:	f880 3200 	strb.w	r3, [r0, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005ad0:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005ad4:	b130      	cbz	r0, 8005ae4 <f_mount+0x58>
 8005ad6:	2e01      	cmp	r6, #1
 8005ad8:	d108      	bne.n	8005aec <f_mount+0x60>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8005ada:	2200      	movs	r2, #0
 8005adc:	4669      	mov	r1, sp
 8005ade:	a801      	add	r0, sp, #4
 8005ae0:	f7ff f874 	bl	8004bcc <find_volume>
	LEAVE_FF(fs, res);
}
 8005ae4:	b005      	add	sp, #20
 8005ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8005ae8:	200b      	movs	r0, #11
 8005aea:	e7fb      	b.n	8005ae4 <f_mount+0x58>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005aec:	2000      	movs	r0, #0
 8005aee:	e7f9      	b.n	8005ae4 <f_mount+0x58>
 8005af0:	2000063c 	.word	0x2000063c
 8005af4:	20000640 	.word	0x20000640

08005af8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005afc:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8005b00:	4691      	mov	r9, r2
 8005b02:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005b04:	4606      	mov	r6, r0
 8005b06:	2800      	cmp	r0, #0
 8005b08:	f000 80d0 	beq.w	8005cac <f_open+0x1b4>
	fp->fs = 0;			/* Clear file object */
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8005b12:	f002 021e 	and.w	r2, r2, #30
 8005b16:	a901      	add	r1, sp, #4
 8005b18:	a886      	add	r0, sp, #536	; 0x218
 8005b1a:	f7ff f857 	bl	8004bcc <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	f040 80c6 	bne.w	8005cb0 <f_open+0x1b8>
		INIT_BUF(dj);
 8005b24:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005b28:	f000 fc83 	bl	8006432 <ff_memalloc>
 8005b2c:	4680      	mov	r8, r0
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	f000 80c0 	beq.w	8005cb4 <f_open+0x1bc>
 8005b34:	908e      	str	r0, [sp, #568]	; 0x238
 8005b36:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 8005b38:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 8005b3a:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 8005b3c:	a806      	add	r0, sp, #24
 8005b3e:	f7ff fc3f 	bl	80053c0 <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005b42:	f009 071f 	and.w	r7, r9, #31
		dir = dj.dir;
 8005b46:	9d8b      	ldr	r5, [sp, #556]	; 0x22c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005b48:	4604      	mov	r4, r0
 8005b4a:	b948      	cbnz	r0, 8005b60 <f_open+0x68>
			if (!dir)	/* Default directory itself */
 8005b4c:	b1dd      	cbz	r5, 8005b86 <f_open+0x8e>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005b4e:	f017 0f1e 	tst.w	r7, #30
 8005b52:	bf14      	ite	ne
 8005b54:	2101      	movne	r1, #1
 8005b56:	2100      	moveq	r1, #0
 8005b58:	a806      	add	r0, sp, #24
 8005b5a:	f7fe fe81 	bl	8004860 <chk_lock>
 8005b5e:	4604      	mov	r4, r0
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005b60:	f019 0f1c 	tst.w	r9, #28
 8005b64:	f000 8092 	beq.w	8005c8c <f_open+0x194>
			if (res != FR_OK) {					/* No file, create new */
 8005b68:	b3cc      	cbz	r4, 8005bde <f_open+0xe6>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005b6a:	2c04      	cmp	r4, #4
 8005b6c:	d111      	bne.n	8005b92 <f_open+0x9a>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b6e:	4952      	ldr	r1, [pc, #328]	; (8005cb8 <f_open+0x1c0>)
 8005b70:	2300      	movs	r3, #0
 8005b72:	200c      	movs	r0, #12
 8005b74:	fb00 f203 	mul.w	r2, r0, r3
 8005b78:	5852      	ldr	r2, [r2, r1]
 8005b7a:	b932      	cbnz	r2, 8005b8a <f_open+0x92>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005b7c:	a806      	add	r0, sp, #24
 8005b7e:	f7ff fd5f 	bl	8005640 <dir_register>
 8005b82:	4604      	mov	r4, r0
 8005b84:	e005      	b.n	8005b92 <f_open+0x9a>
				res = FR_INVALID_NAME;
 8005b86:	2406      	movs	r4, #6
 8005b88:	e7ea      	b.n	8005b60 <f_open+0x68>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	2b06      	cmp	r3, #6
 8005b8e:	d1f1      	bne.n	8005b74 <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005b90:	2412      	movs	r4, #18
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005b92:	f047 0708 	orr.w	r7, r7, #8
				dir = dj.dir;					/* New entry */
 8005b96:	9d8b      	ldr	r5, [sp, #556]	; 0x22c
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005b98:	b344      	cbz	r4, 8005bec <f_open+0xf4>
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
					res = FR_NO_FILE;
			}
		}
#endif
		FREE_BUF();
 8005b9a:	4640      	mov	r0, r8
 8005b9c:	f000 fc4b 	bl	8006436 <ff_memfree>

		if (res == FR_OK) {
 8005ba0:	b9c4      	cbnz	r4, 8005bd4 <f_open+0xdc>
			fp->flag = mode;					/* File access mode */
 8005ba2:	f886 7206 	strb.w	r7, [r6, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8005ba6:	9f86      	ldr	r7, [sp, #536]	; 0x218
			fp->err = 0;						/* Clear error flag */
 8005ba8:	f886 4207 	strb.w	r4, [r6, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8005bac:	f897 0200 	ldrb.w	r0, [r7, #512]	; 0x200
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	f7fe ff27 	bl	8004a04 <ld_clust.isra.0>
 8005bb6:	f8c6 0210 	str.w	r0, [r6, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8005bba:	69eb      	ldr	r3, [r5, #28]
 8005bbc:	f8c6 320c 	str.w	r3, [r6, #524]	; 0x20c
			fp->dsect = 0;
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
			fp->id = fp->fs->id;
 8005bc0:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
			fp->fptr = 0;						/* File pointer */
 8005bc4:	f8c6 4208 	str.w	r4, [r6, #520]	; 0x208
			fp->dsect = 0;
 8005bc8:	f8c6 4218 	str.w	r4, [r6, #536]	; 0x218
			fp->fs = dj.fs;	 					/* Validate file object */
 8005bcc:	f8c6 7200 	str.w	r7, [r6, #512]	; 0x200
			fp->id = fp->fs->id;
 8005bd0:	f8a6 3204 	strh.w	r3, [r6, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	f50d 7d10 	add.w	sp, sp, #576	; 0x240
 8005bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005bde:	7aeb      	ldrb	r3, [r5, #11]
 8005be0:	f013 0f11 	tst.w	r3, #17
 8005be4:	d15c      	bne.n	8005ca0 <f_open+0x1a8>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8005be6:	f019 0f04 	tst.w	r9, #4
 8005bea:	d15b      	bne.n	8005ca4 <f_open+0x1ac>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005bec:	073b      	lsls	r3, r7, #28
 8005bee:	d533      	bpl.n	8005c58 <f_open+0x160>
				dw = GET_FATTIME();				/* Created time */
 8005bf0:	f7fe fd54 	bl	800469c <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005bf4:	f3c0 2307 	ubfx	r3, r0, #8, #8
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8005bf8:	2400      	movs	r4, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 8005bfa:	73a8      	strb	r0, [r5, #14]
 8005bfc:	73eb      	strb	r3, [r5, #15]
 8005bfe:	0c03      	lsrs	r3, r0, #16
 8005c00:	0e00      	lsrs	r0, r0, #24
 8005c02:	742b      	strb	r3, [r5, #16]
 8005c04:	7468      	strb	r0, [r5, #17]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8005c06:	72ec      	strb	r4, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8005c08:	772c      	strb	r4, [r5, #28]
 8005c0a:	776c      	strb	r4, [r5, #29]
 8005c0c:	77ac      	strb	r4, [r5, #30]
 8005c0e:	77ec      	strb	r4, [r5, #31]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005c10:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8005c12:	4629      	mov	r1, r5
 8005c14:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8005c18:	f7fe fef4 	bl	8004a04 <ld_clust.isra.0>
	ST_WORD(dir + DIR_FstClusLO, cl);
 8005c1c:	76ac      	strb	r4, [r5, #26]
 8005c1e:	76ec      	strb	r4, [r5, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8005c20:	752c      	strb	r4, [r5, #20]
 8005c22:	756c      	strb	r4, [r5, #21]
				dj.fs->wflag = 1;
 8005c24:	9b86      	ldr	r3, [sp, #536]	; 0x218
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8005c2c:	4681      	mov	r9, r0
 8005c2e:	b198      	cbz	r0, 8005c58 <f_open+0x160>
					res = remove_chain(dj.fs, cl);
 8005c30:	4601      	mov	r1, r0
 8005c32:	4618      	mov	r0, r3
					dw = dj.fs->winsect;
 8005c34:	f8d3 a22c 	ldr.w	sl, [r3, #556]	; 0x22c
					res = remove_chain(dj.fs, cl);
 8005c38:	f7ff fef6 	bl	8005a28 <remove_chain>
					if (res == FR_OK) {
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	d1ab      	bne.n	8005b9a <f_open+0xa2>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005c42:	9886      	ldr	r0, [sp, #536]	; 0x218
 8005c44:	f109 33ff 	add.w	r3, r9, #4294967295
 8005c48:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8005c4c:	4651      	mov	r1, sl
 8005c4e:	f7fe ff74 	bl	8004b3a <move_window>
		if (res == FR_OK) {
 8005c52:	4604      	mov	r4, r0
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d1a0      	bne.n	8005b9a <f_open+0xa2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005c58:	073b      	lsls	r3, r7, #28
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8005c5a:	9b86      	ldr	r3, [sp, #536]	; 0x218
				mode |= FA__WRITTEN;
 8005c5c:	bf48      	it	mi
 8005c5e:	f047 0720 	orrmi.w	r7, r7, #32
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005c62:	f017 0ffe 	tst.w	r7, #254	; 0xfe
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8005c66:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005c6a:	f8c6 321c 	str.w	r3, [r6, #540]	; 0x21c
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005c6e:	bf14      	ite	ne
 8005c70:	2101      	movne	r1, #1
 8005c72:	2100      	moveq	r1, #0
			fp->dir_ptr = dir;
 8005c74:	f8c6 5220 	str.w	r5, [r6, #544]	; 0x220
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005c78:	a806      	add	r0, sp, #24
 8005c7a:	f7fe fe23 	bl	80048c4 <inc_lock>
			if (!fp->lockid) res = FR_INT_ERR;
 8005c7e:	2800      	cmp	r0, #0
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005c80:	f8c6 0224 	str.w	r0, [r6, #548]	; 0x224
			if (!fp->lockid) res = FR_INT_ERR;
 8005c84:	bf14      	ite	ne
 8005c86:	2400      	movne	r4, #0
 8005c88:	2402      	moveq	r4, #2
 8005c8a:	e786      	b.n	8005b9a <f_open+0xa2>
			if (res == FR_OK) {					/* Follow succeeded */
 8005c8c:	2c00      	cmp	r4, #0
 8005c8e:	d184      	bne.n	8005b9a <f_open+0xa2>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8005c90:	7aeb      	ldrb	r3, [r5, #11]
 8005c92:	06d8      	lsls	r0, r3, #27
 8005c94:	d408      	bmi.n	8005ca8 <f_open+0x1b0>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8005c96:	f019 0f02 	tst.w	r9, #2
 8005c9a:	d0dd      	beq.n	8005c58 <f_open+0x160>
 8005c9c:	07da      	lsls	r2, r3, #31
 8005c9e:	d5db      	bpl.n	8005c58 <f_open+0x160>
						res = FR_DENIED;
 8005ca0:	2407      	movs	r4, #7
 8005ca2:	e77a      	b.n	8005b9a <f_open+0xa2>
						res = FR_EXIST;
 8005ca4:	2408      	movs	r4, #8
 8005ca6:	e778      	b.n	8005b9a <f_open+0xa2>
					res = FR_NO_FILE;
 8005ca8:	2404      	movs	r4, #4
 8005caa:	e776      	b.n	8005b9a <f_open+0xa2>
	if (!fp) return FR_INVALID_OBJECT;
 8005cac:	2409      	movs	r4, #9
 8005cae:	e791      	b.n	8005bd4 <f_open+0xdc>
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	e78f      	b.n	8005bd4 <f_open+0xdc>
		INIT_BUF(dj);
 8005cb4:	2411      	movs	r4, #17
 8005cb6:	e78d      	b.n	8005bd4 <f_open+0xdc>
 8005cb8:	20000640 	.word	0x20000640

08005cbc <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8005cbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc0:	469b      	mov	fp, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f8cb 3000 	str.w	r3, [fp]
{
 8005cc8:	4604      	mov	r4, r0
 8005cca:	4689      	mov	r9, r1
 8005ccc:	4615      	mov	r5, r2

	res = validate(fp);							/* Check validity */
 8005cce:	f7fe fe82 	bl	80049d6 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	bb58      	cbnz	r0, 8005d2e <f_read+0x72>
	if (fp->err)								/* Check error */
 8005cd6:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f040 80a7 	bne.w	8005e2e <f_read+0x172>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8005ce0:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005ce4:	07d8      	lsls	r0, r3, #31
 8005ce6:	f140 80a4 	bpl.w	8005e32 <f_read+0x176>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 8005cea:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8005cee:	f8d4 7208 	ldr.w	r7, [r4, #520]	; 0x208
 8005cf2:	1bdf      	subs	r7, r3, r7
 8005cf4:	42af      	cmp	r7, r5
 8005cf6:	bf28      	it	cs
 8005cf8:	462f      	movcs	r7, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 8005cfa:	b1c7      	cbz	r7, 8005d2e <f_read+0x72>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8005cfc:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
 8005d00:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f040 8083 	bne.w	8005e10 <f_read+0x154>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005d0a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005d0e:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8005d12:	3b01      	subs	r3, #1
 8005d14:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {						/* On the cluster boundary? */
 8005d18:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8005d1c:	d118      	bne.n	8005d50 <f_read+0x94>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005d1e:	b952      	cbnz	r2, 8005d36 <f_read+0x7a>
					clst = fp->sclust;			/* Follow from the origin */
 8005d20:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8005d24:	2801      	cmp	r0, #1
 8005d26:	d80d      	bhi.n	8005d44 <f_read+0x88>
 8005d28:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005d2a:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 8005d2e:	4630      	mov	r0, r6
 8005d30:	b003      	add	sp, #12
 8005d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8005d36:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8005d3a:	9301      	str	r3, [sp, #4]
 8005d3c:	f7ff f890 	bl	8004e60 <get_fat>
 8005d40:	9b01      	ldr	r3, [sp, #4]
 8005d42:	e7ef      	b.n	8005d24 <f_read+0x68>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005d44:	1c41      	adds	r1, r0, #1
 8005d46:	d101      	bne.n	8005d4c <f_read+0x90>
 8005d48:	2601      	movs	r6, #1
 8005d4a:	e7ee      	b.n	8005d2a <f_read+0x6e>
				fp->clust = clst;				/* Update current cluster */
 8005d4c:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005d50:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 8005d54:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8005d58:	9301      	str	r3, [sp, #4]
 8005d5a:	4650      	mov	r0, sl
 8005d5c:	f7ff f872 	bl	8004e44 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005d60:	2800      	cmp	r0, #0
 8005d62:	d0e1      	beq.n	8005d28 <f_read+0x6c>
			sect += csect;
 8005d64:	9b01      	ldr	r3, [sp, #4]
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005d66:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 8005d68:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005d6c:	d02d      	beq.n	8005dca <f_read+0x10e>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005d6e:	f89a 2202 	ldrb.w	r2, [sl, #514]	; 0x202
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8005d72:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005d76:	1959      	adds	r1, r3, r5
 8005d78:	4291      	cmp	r1, r2
					cc = fp->fs->csize - csect;
 8005d7a:	bf88      	it	hi
 8005d7c:	1ad5      	subhi	r5, r2, r3
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8005d7e:	462b      	mov	r3, r5
 8005d80:	4642      	mov	r2, r8
 8005d82:	4649      	mov	r1, r9
 8005d84:	f7fe fc60 	bl	8004648 <disk_read>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d1dd      	bne.n	8005d48 <f_read+0x8c>
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8005d8c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005d90:	065a      	lsls	r2, r3, #25
 8005d92:	d50c      	bpl.n	8005dae <f_read+0xf2>
 8005d94:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8005d98:	eba0 0008 	sub.w	r0, r0, r8
 8005d9c:	4285      	cmp	r5, r0
 8005d9e:	d906      	bls.n	8005dae <f_read+0xf2>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 8005da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da4:	4621      	mov	r1, r4
 8005da6:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8005daa:	f7fe fd47 	bl	800483c <mem_cpy>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8005dae:	026d      	lsls	r5, r5, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005db0:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8005db4:	442b      	add	r3, r5
 8005db6:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8005dba:	f8db 3000 	ldr.w	r3, [fp]
 8005dbe:	442b      	add	r3, r5
 8005dc0:	44a9      	add	r9, r5
 8005dc2:	f8cb 3000 	str.w	r3, [fp]
 8005dc6:	1b7f      	subs	r7, r7, r5
 8005dc8:	e797      	b.n	8005cfa <f_read+0x3e>
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8005dca:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8005dce:	4590      	cmp	r8, r2
 8005dd0:	d01c      	beq.n	8005e0c <f_read+0x150>
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8005dd2:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005dd6:	065b      	lsls	r3, r3, #25
 8005dd8:	d50d      	bpl.n	8005df6 <f_read+0x13a>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005dda:	2301      	movs	r3, #1
 8005ddc:	4621      	mov	r1, r4
 8005dde:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 8005de2:	f7fe fc3f 	bl	8004664 <disk_write>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d1ae      	bne.n	8005d48 <f_read+0x8c>
					fp->flag &= ~FA__DIRTY;
 8005dea:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005df2:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8005df6:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	4642      	mov	r2, r8
 8005dfe:	4621      	mov	r1, r4
 8005e00:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8005e04:	f7fe fc20 	bl	8004648 <disk_read>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d19d      	bne.n	8005d48 <f_read+0x8c>
			fp->dsect = sect;
 8005e0c:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8005e10:	f8d4 1208 	ldr.w	r1, [r4, #520]	; 0x208
 8005e14:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005e18:	f5c1 7500 	rsb	r5, r1, #512	; 0x200
 8005e1c:	42bd      	cmp	r5, r7
 8005e1e:	bf28      	it	cs
 8005e20:	463d      	movcs	r5, r7
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8005e22:	462a      	mov	r2, r5
 8005e24:	4421      	add	r1, r4
 8005e26:	4648      	mov	r0, r9
 8005e28:	f7fe fd08 	bl	800483c <mem_cpy>
 8005e2c:	e7c0      	b.n	8005db0 <f_read+0xf4>
 8005e2e:	461e      	mov	r6, r3
 8005e30:	e77d      	b.n	8005d2e <f_read+0x72>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005e32:	2607      	movs	r6, #7
 8005e34:	e77b      	b.n	8005d2e <f_read+0x72>

08005e36 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005e36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3a:	469b      	mov	fp, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f8cb 3000 	str.w	r3, [fp]
{
 8005e42:	4604      	mov	r4, r0
 8005e44:	4689      	mov	r9, r1
 8005e46:	4617      	mov	r7, r2

	res = validate(fp);						/* Check validity */
 8005e48:	f7fe fdc5 	bl	80049d6 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005e4c:	4606      	mov	r6, r0
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	f040 80a1 	bne.w	8005f96 <f_write+0x160>
	if (fp->err)							/* Check error */
 8005e54:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f040 80ce 	bne.w	8005ffa <f_write+0x1c4>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8005e5e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005e62:	0799      	lsls	r1, r3, #30
 8005e64:	f140 80cb 	bpl.w	8005ffe <f_write+0x1c8>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8005e68:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8005e6c:	42df      	cmn	r7, r3
 8005e6e:	d370      	bcc.n	8005f52 <f_write+0x11c>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8005e70:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8005e74:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	f200 80bb 	bhi.w	8005ff4 <f_write+0x1be>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8005e7e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005e82:	f043 0320 	orr.w	r3, r3, #32
 8005e86:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8005e8a:	e084      	b.n	8005f96 <f_write+0x160>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005e8c:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8005e90:	e076      	b.n	8005f80 <f_write+0x14a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005e92:	1c4a      	adds	r2, r1, #1
 8005e94:	d101      	bne.n	8005e9a <f_write+0x64>
 8005e96:	2601      	movs	r6, #1
 8005e98:	e07b      	b.n	8005f92 <f_write+0x15c>
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8005e9a:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
				fp->clust = clst;			/* Update current cluster */
 8005e9e:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8005ea2:	b90b      	cbnz	r3, 8005ea8 <f_write+0x72>
 8005ea4:	f8c4 1210 	str.w	r1, [r4, #528]	; 0x210
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8005ea8:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005eac:	065b      	lsls	r3, r3, #25
 8005eae:	d511      	bpl.n	8005ed4 <f_write+0x9e>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8005eb0:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005eb4:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8005eb8:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	f7fe fbd0 	bl	8004664 <disk_write>
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	d1e6      	bne.n	8005e96 <f_write+0x60>
				fp->flag &= ~FA__DIRTY;
 8005ec8:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ed0:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005ed4:	f8d4 a200 	ldr.w	sl, [r4, #512]	; 0x200
 8005ed8:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
 8005edc:	4650      	mov	r0, sl
 8005ede:	f7fe ffb1 	bl	8004e44 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d054      	beq.n	8005f90 <f_write+0x15a>
			sect += csect;
 8005ee6:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005ee8:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 8005eea:	eb00 0803 	add.w	r8, r0, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005eee:	d056      	beq.n	8005f9e <f_write+0x168>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005ef0:	9a01      	ldr	r2, [sp, #4]
 8005ef2:	f89a 3202 	ldrb.w	r3, [sl, #514]	; 0x202
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8005ef6:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005efa:	442a      	add	r2, r5
 8005efc:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 8005efe:	bf84      	itt	hi
 8005f00:	9a01      	ldrhi	r2, [sp, #4]
 8005f02:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8005f04:	462b      	mov	r3, r5
 8005f06:	4642      	mov	r2, r8
 8005f08:	4649      	mov	r1, r9
 8005f0a:	f7fe fbab 	bl	8004664 <disk_write>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	d1c1      	bne.n	8005e96 <f_write+0x60>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005f12:	f8d4 1218 	ldr.w	r1, [r4, #536]	; 0x218
 8005f16:	eba1 0108 	sub.w	r1, r1, r8
 8005f1a:	428d      	cmp	r5, r1
 8005f1c:	d90c      	bls.n	8005f38 <f_write+0x102>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8005f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f22:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8005f26:	4620      	mov	r0, r4
 8005f28:	f7fe fc88 	bl	800483c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8005f2c:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f34:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8005f38:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8005f3a:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8005f3e:	442b      	add	r3, r5
 8005f40:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8005f44:	f8db 3000 	ldr.w	r3, [fp]
 8005f48:	442b      	add	r3, r5
 8005f4a:	44a9      	add	r9, r5
 8005f4c:	f8cb 3000 	str.w	r3, [fp]
 8005f50:	1b7f      	subs	r7, r7, r5
	for ( ;  btw;							/* Repeat until all data written */
 8005f52:	2f00      	cmp	r7, #0
 8005f54:	d08c      	beq.n	8005e70 <f_write+0x3a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8005f56:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
 8005f5a:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8005f5e:	bba3      	cbnz	r3, 8005fca <f_write+0x194>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005f60:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8005f64:	f890 3202 	ldrb.w	r3, [r0, #514]	; 0x202
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	ea03 2352 	and.w	r3, r3, r2, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 8005f6e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8005f72:	9301      	str	r3, [sp, #4]
 8005f74:	d198      	bne.n	8005ea8 <f_write+0x72>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005f76:	2a00      	cmp	r2, #0
 8005f78:	d188      	bne.n	8005e8c <f_write+0x56>
					clst = fp->sclust;		/* Follow from the origin */
 8005f7a:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
					if (clst == 0)			/* When no cluster is allocated, */
 8005f7e:	b929      	cbnz	r1, 8005f8c <f_write+0x156>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005f80:	f7ff f898 	bl	80050b4 <create_chain>
 8005f84:	4601      	mov	r1, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005f86:	2800      	cmp	r0, #0
 8005f88:	f43f af72 	beq.w	8005e70 <f_write+0x3a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005f8c:	2901      	cmp	r1, #1
 8005f8e:	d180      	bne.n	8005e92 <f_write+0x5c>
 8005f90:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005f92:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207

	LEAVE_FF(fp->fs, FR_OK);
}
 8005f96:	4630      	mov	r0, r6
 8005f98:	b003      	add	sp, #12
 8005f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8005f9e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8005fa2:	4598      	cmp	r8, r3
 8005fa4:	d00f      	beq.n	8005fc6 <f_write+0x190>
				if (fp->fptr < fp->fsize &&
 8005fa6:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
 8005faa:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d209      	bcs.n	8005fc6 <f_write+0x190>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	4642      	mov	r2, r8
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	f89a 0201 	ldrb.w	r0, [sl, #513]	; 0x201
 8005fbc:	f7fe fb44 	bl	8004648 <disk_read>
				if (fp->fptr < fp->fsize &&
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	f47f af68 	bne.w	8005e96 <f_write+0x60>
			fp->dsect = sect;
 8005fc6:	f8c4 8218 	str.w	r8, [r4, #536]	; 0x218
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8005fca:	f8d4 0208 	ldr.w	r0, [r4, #520]	; 0x208
 8005fce:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8005fd2:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 8005fd6:	42bd      	cmp	r5, r7
 8005fd8:	bf28      	it	cs
 8005fda:	463d      	movcs	r5, r7
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8005fdc:	462a      	mov	r2, r5
 8005fde:	4649      	mov	r1, r9
 8005fe0:	4420      	add	r0, r4
 8005fe2:	f7fe fc2b 	bl	800483c <mem_cpy>
		fp->flag |= FA__DIRTY;
 8005fe6:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8005fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fee:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 8005ff2:	e7a2      	b.n	8005f3a <f_write+0x104>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8005ff4:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
 8005ff8:	e741      	b.n	8005e7e <f_write+0x48>
 8005ffa:	461e      	mov	r6, r3
 8005ffc:	e7cb      	b.n	8005f96 <f_write+0x160>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005ffe:	2607      	movs	r6, #7
 8006000:	e7c9      	b.n	8005f96 <f_write+0x160>

08006002 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006002:	b570      	push	{r4, r5, r6, lr}
 8006004:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8006006:	f7fe fce6 	bl	80049d6 <validate>
	if (res == FR_OK) {
 800600a:	2800      	cmp	r0, #0
 800600c:	d158      	bne.n	80060c0 <f_sync+0xbe>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800600e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8006012:	069a      	lsls	r2, r3, #26
 8006014:	d554      	bpl.n	80060c0 <f_sync+0xbe>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8006016:	065b      	lsls	r3, r3, #25
 8006018:	d511      	bpl.n	800603e <f_sync+0x3c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800601a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800601e:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8006022:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 8006026:	2301      	movs	r3, #1
 8006028:	4621      	mov	r1, r4
 800602a:	f7fe fb1b 	bl	8004664 <disk_write>
 800602e:	2800      	cmp	r0, #0
 8006030:	d145      	bne.n	80060be <f_sync+0xbc>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 8006032:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8006036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800603a:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800603e:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 8006042:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8006046:	f7fe fd78 	bl	8004b3a <move_window>
 800604a:	4606      	mov	r6, r0
			if (res == FR_OK) {
 800604c:	bbc0      	cbnz	r0, 80060c0 <f_sync+0xbe>
				dir = fp->dir_ptr;
 800604e:	f8d4 5220 	ldr.w	r5, [r4, #544]	; 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006052:	7aeb      	ldrb	r3, [r5, #11]
 8006054:	f043 0320 	orr.w	r3, r3, #32
 8006058:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800605a:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800605e:	772b      	strb	r3, [r5, #28]
 8006060:	f8b4 320c 	ldrh.w	r3, [r4, #524]	; 0x20c
 8006064:	0a1b      	lsrs	r3, r3, #8
 8006066:	776b      	strb	r3, [r5, #29]
 8006068:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800606c:	77ab      	strb	r3, [r5, #30]
 800606e:	f894 320f 	ldrb.w	r3, [r4, #527]	; 0x20f
 8006072:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006074:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006078:	76ab      	strb	r3, [r5, #26]
 800607a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800607e:	0c1b      	lsrs	r3, r3, #16
 8006080:	752b      	strb	r3, [r5, #20]
 8006082:	0a1b      	lsrs	r3, r3, #8
 8006084:	756b      	strb	r3, [r5, #21]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006086:	76ea      	strb	r2, [r5, #27]
				tm = GET_FATTIME();							/* Update updated time */
 8006088:	f7fe fb08 	bl	800469c <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 800608c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006090:	75a8      	strb	r0, [r5, #22]
 8006092:	75eb      	strb	r3, [r5, #23]
 8006094:	0c03      	lsrs	r3, r0, #16
 8006096:	0e00      	lsrs	r0, r0, #24
 8006098:	762b      	strb	r3, [r5, #24]
 800609a:	7668      	strb	r0, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800609c:	74ae      	strb	r6, [r5, #18]
 800609e:	74ee      	strb	r6, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 80060a0:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 80060a4:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
				fp->flag &= ~FA__WRITTEN;
 80060a8:	f023 0320 	bic.w	r3, r3, #32
 80060ac:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
				fp->fs->wflag = 1;
 80060b0:	2301      	movs	r3, #1
 80060b2:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 80060b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 80060ba:	f7fe bce1 	b.w	8004a80 <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80060be:	2001      	movs	r0, #1
}
 80060c0:	bd70      	pop	{r4, r5, r6, pc}

080060c2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80060c2:	b510      	push	{r4, lr}
 80060c4:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80060c6:	f7ff ff9c 	bl	8006002 <f_sync>
	if (res == FR_OK)
 80060ca:	b950      	cbnz	r0, 80060e2 <f_close+0x20>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80060cc:	4620      	mov	r0, r4
 80060ce:	f7fe fc82 	bl	80049d6 <validate>
		if (res == FR_OK) {
 80060d2:	b930      	cbnz	r0, 80060e2 <f_close+0x20>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80060d4:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
 80060d8:	f7fe fc3a 	bl	8004950 <dec_lock>
			if (res == FR_OK)
 80060dc:	b908      	cbnz	r0, 80060e2 <f_close+0x20>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80060de:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80060e2:	bd10      	pop	{r4, pc}

080060e4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80060e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e6:	4604      	mov	r4, r0
 80060e8:	460d      	mov	r5, r1
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80060ea:	f7fe fc74 	bl	80049d6 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80060ee:	4606      	mov	r6, r0
 80060f0:	2800      	cmp	r0, #0
 80060f2:	f040 8087 	bne.w	8006204 <f_lseek+0x120>
	if (fp->err)						/* Check error */
 80060f6:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f040 80af 	bne.w	800625e <f_lseek+0x17a>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8006100:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8006104:	42ab      	cmp	r3, r5
 8006106:	d205      	bcs.n	8006114 <f_lseek+0x30>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8006108:	f894 2206 	ldrb.w	r2, [r4, #518]	; 0x206
 800610c:	f012 0f02 	tst.w	r2, #2
 8006110:	bf08      	it	eq
 8006112:	461d      	moveq	r5, r3
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
 8006114:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8006116:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
		fp->fptr = nsect = 0;
 800611a:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
		if (ofs) {
 800611e:	2d00      	cmp	r5, #0
 8006120:	d13b      	bne.n	800619a <f_lseek+0xb6>
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8006122:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8006126:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 800612a:	4293      	cmp	r3, r2
 800612c:	d96a      	bls.n	8006204 <f_lseek+0x120>
			fp->fsize = fp->fptr;
 800612e:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 8006132:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8006136:	f043 0320 	orr.w	r3, r3, #32
 800613a:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 800613e:	e061      	b.n	8006204 <f_lseek+0x120>
		fp->fptr = nsect = 0;
 8006140:	2500      	movs	r5, #0
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8006142:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 8006146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0e9      	beq.n	8006122 <f_lseek+0x3e>
 800614e:	f8d4 2218 	ldr.w	r2, [r4, #536]	; 0x218
 8006152:	4295      	cmp	r5, r2
 8006154:	d0e5      	beq.n	8006122 <f_lseek+0x3e>
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8006156:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 800615a:	065b      	lsls	r3, r3, #25
 800615c:	d50f      	bpl.n	800617e <f_lseek+0x9a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800615e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8006162:	2301      	movs	r3, #1
 8006164:	4621      	mov	r1, r4
 8006166:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800616a:	f7fe fa7b 	bl	8004664 <disk_write>
 800616e:	2800      	cmp	r0, #0
 8006170:	d14c      	bne.n	800620c <f_lseek+0x128>
				fp->flag &= ~FA__DIRTY;
 8006172:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
 8006176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800617a:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800617e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 8006182:	2301      	movs	r3, #1
 8006184:	462a      	mov	r2, r5
 8006186:	4621      	mov	r1, r4
 8006188:	f890 0201 	ldrb.w	r0, [r0, #513]	; 0x201
 800618c:	f7fe fa5c 	bl	8004648 <disk_read>
 8006190:	2800      	cmp	r0, #0
 8006192:	d13b      	bne.n	800620c <f_lseek+0x128>
			fp->dsect = nsect;
 8006194:	f8c4 5218 	str.w	r5, [r4, #536]	; 0x218
 8006198:	e7c3      	b.n	8006122 <f_lseek+0x3e>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800619a:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 800619e:	f890 7202 	ldrb.w	r7, [r0, #514]	; 0x202
 80061a2:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 80061a4:	b31b      	cbz	r3, 80061ee <f_lseek+0x10a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80061a6:	3b01      	subs	r3, #1
 80061a8:	1e6a      	subs	r2, r5, #1
 80061aa:	fbb3 f1f7 	udiv	r1, r3, r7
 80061ae:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 80061b2:	428a      	cmp	r2, r1
 80061b4:	d31b      	bcc.n	80061ee <f_lseek+0x10a>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80061b6:	427a      	negs	r2, r7
 80061b8:	4013      	ands	r3, r2
				clst = fp->clust;
 80061ba:	f8d4 1214 	ldr.w	r1, [r4, #532]	; 0x214
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80061be:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				ofs -= fp->fptr;
 80061c2:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 80061c4:	2900      	cmp	r1, #0
 80061c6:	d0bb      	beq.n	8006140 <f_lseek+0x5c>
				while (ofs > bcs) {						/* Cluster following loop */
 80061c8:	42bd      	cmp	r5, r7
 80061ca:	d826      	bhi.n	800621a <f_lseek+0x136>
				fp->fptr += ofs;
 80061cc:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 80061d0:	442b      	add	r3, r5
 80061d2:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 80061d6:	f3c5 0308 	ubfx	r3, r5, #0, #9
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0b0      	beq.n	8006140 <f_lseek+0x5c>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 80061de:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
 80061e2:	f7fe fe2f 	bl	8004e44 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 80061e6:	b150      	cbz	r0, 80061fe <f_lseek+0x11a>
					nsect += ofs / SS(fp->fs);
 80061e8:	eb00 2555 	add.w	r5, r0, r5, lsr #9
 80061ec:	e7a9      	b.n	8006142 <f_lseek+0x5e>
				clst = fp->sclust;						/* start from the first cluster */
 80061ee:	f8d4 1210 	ldr.w	r1, [r4, #528]	; 0x210
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80061f2:	b979      	cbnz	r1, 8006214 <f_lseek+0x130>
					clst = create_chain(fp->fs, 0);
 80061f4:	f7fe ff5e 	bl	80050b4 <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80061f8:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 80061fa:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80061fc:	d104      	bne.n	8006208 <f_lseek+0x124>
 80061fe:	2602      	movs	r6, #2
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006200:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
 8006204:	4630      	mov	r0, r6
 8006206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006208:	1c42      	adds	r2, r0, #1
 800620a:	d101      	bne.n	8006210 <f_lseek+0x12c>
 800620c:	2601      	movs	r6, #1
 800620e:	e7f7      	b.n	8006200 <f_lseek+0x11c>
					fp->sclust = clst;
 8006210:	f8c4 0210 	str.w	r0, [r4, #528]	; 0x210
				fp->clust = clst;
 8006214:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
 8006218:	e7d4      	b.n	80061c4 <f_lseek+0xe0>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800621a:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800621e:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006222:	079b      	lsls	r3, r3, #30
 8006224:	d505      	bpl.n	8006232 <f_lseek+0x14e>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8006226:	f7fe ff45 	bl	80050b4 <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 800622a:	4601      	mov	r1, r0
 800622c:	b920      	cbnz	r0, 8006238 <f_lseek+0x154>
 800622e:	463d      	mov	r5, r7
 8006230:	e7cc      	b.n	80061cc <f_lseek+0xe8>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8006232:	f7fe fe15 	bl	8004e60 <get_fat>
 8006236:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006238:	1c4a      	adds	r2, r1, #1
 800623a:	d0e7      	beq.n	800620c <f_lseek+0x128>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800623c:	2901      	cmp	r1, #1
 800623e:	d9de      	bls.n	80061fe <f_lseek+0x11a>
 8006240:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8006244:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006248:	4299      	cmp	r1, r3
 800624a:	d2d8      	bcs.n	80061fe <f_lseek+0x11a>
					fp->fptr += bcs;
 800624c:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
					fp->clust = clst;
 8006250:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
					fp->fptr += bcs;
 8006254:	443b      	add	r3, r7
 8006256:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
					ofs -= bcs;
 800625a:	1bed      	subs	r5, r5, r7
 800625c:	e7b4      	b.n	80061c8 <f_lseek+0xe4>
 800625e:	461e      	mov	r6, r3
 8006260:	e7d0      	b.n	8006204 <f_lseek+0x120>

08006262 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8006262:	b570      	push	{r4, r5, r6, lr}
 8006264:	b086      	sub	sp, #24
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8006266:	4605      	mov	r5, r0
{
 8006268:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 800626a:	2800      	cmp	r0, #0
 800626c:	d051      	beq.n	8006312 <f_opendir+0xb0>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 800626e:	2200      	movs	r2, #0
 8006270:	a901      	add	r1, sp, #4
 8006272:	a802      	add	r0, sp, #8
 8006274:	f7fe fcaa 	bl	8004bcc <find_volume>
	if (res == FR_OK) {
 8006278:	4604      	mov	r4, r0
 800627a:	bb90      	cbnz	r0, 80062e2 <f_opendir+0x80>
		dp->fs = fs;
 800627c:	9b02      	ldr	r3, [sp, #8]
 800627e:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
		INIT_BUF(*dp);
 8006282:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006286:	f000 f8d4 	bl	8006432 <ff_memalloc>
 800628a:	4606      	mov	r6, r0
 800628c:	2800      	cmp	r0, #0
 800628e:	d042      	beq.n	8006316 <f_opendir+0xb4>
 8006290:	ab03      	add	r3, sp, #12
 8006292:	f8c5 0220 	str.w	r0, [r5, #544]	; 0x220
 8006296:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800629a:	9901      	ldr	r1, [sp, #4]
 800629c:	4628      	mov	r0, r5
 800629e:	f7ff f88f 	bl	80053c0 <follow_path>
 80062a2:	4604      	mov	r4, r0
		FREE_BUF();
 80062a4:	4630      	mov	r0, r6
 80062a6:	f000 f8c6 	bl	8006436 <ff_memfree>
		if (res == FR_OK) {						/* Follow completed */
 80062aa:	b9bc      	cbnz	r4, 80062dc <f_opendir+0x7a>
			if (dp->dir) {						/* It is not the origin directory itself */
 80062ac:	f8d5 1214 	ldr.w	r1, [r5, #532]	; 0x214
 80062b0:	b149      	cbz	r1, 80062c6 <f_opendir+0x64>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 80062b2:	7acb      	ldrb	r3, [r1, #11]
 80062b4:	06db      	lsls	r3, r3, #27
 80062b6:	d528      	bpl.n	800630a <f_opendir+0xa8>
					dp->sclust = ld_clust(fs, dp->dir);
 80062b8:	9b02      	ldr	r3, [sp, #8]
 80062ba:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 80062be:	f7fe fba1 	bl	8004a04 <ld_clust.isra.0>
 80062c2:	f8c5 0208 	str.w	r0, [r5, #520]	; 0x208
				else							/* The object is a file */
					res = FR_NO_PATH;
			}
			if (res == FR_OK) {
				dp->id = fs->id;
 80062c6:	9b02      	ldr	r3, [sp, #8]
 80062c8:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80062cc:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80062d0:	2100      	movs	r1, #0
 80062d2:	4628      	mov	r0, r5
 80062d4:	f7fe fe25 	bl	8004f22 <dir_sdi>
#if _FS_LOCK
				if (res == FR_OK) {
 80062d8:	4604      	mov	r4, r0
 80062da:	b130      	cbz	r0, 80062ea <f_opendir+0x88>
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80062dc:	2c04      	cmp	r4, #4
 80062de:	bf08      	it	eq
 80062e0:	2405      	moveq	r4, #5
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 80062e2:	2300      	movs	r3, #0
 80062e4:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
 80062e8:	e009      	b.n	80062fe <f_opendir+0x9c>
					if (dp->sclust) {
 80062ea:	f8d5 3208 	ldr.w	r3, [r5, #520]	; 0x208
 80062ee:	b14b      	cbz	r3, 8006304 <f_opendir+0xa2>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80062f0:	4621      	mov	r1, r4
 80062f2:	4628      	mov	r0, r5
 80062f4:	f7fe fae6 	bl	80048c4 <inc_lock>
 80062f8:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
						if (!dp->lockid)
 80062fc:	b138      	cbz	r0, 800630e <f_opendir+0xac>

	LEAVE_FF(fs, res);
}
 80062fe:	4620      	mov	r0, r4
 8006300:	b006      	add	sp, #24
 8006302:	bd70      	pop	{r4, r5, r6, pc}
						dp->lockid = 0;	/* Root directory need not to be locked */
 8006304:	f8c5 421c 	str.w	r4, [r5, #540]	; 0x21c
 8006308:	e7f9      	b.n	80062fe <f_opendir+0x9c>
					res = FR_NO_PATH;
 800630a:	2405      	movs	r4, #5
 800630c:	e7e9      	b.n	80062e2 <f_opendir+0x80>
							res = FR_TOO_MANY_OPEN_FILES;
 800630e:	2412      	movs	r4, #18
 8006310:	e7e7      	b.n	80062e2 <f_opendir+0x80>
	if (!dp) return FR_INVALID_OBJECT;
 8006312:	2409      	movs	r4, #9
 8006314:	e7f3      	b.n	80062fe <f_opendir+0x9c>
		INIT_BUF(*dp);
 8006316:	2411      	movs	r4, #17
 8006318:	e7f1      	b.n	80062fe <f_opendir+0x9c>

0800631a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800631a:	b570      	push	{r4, r5, r6, lr}
 800631c:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
	DWORD dclst = 0;
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 8006320:	2201      	movs	r2, #1
{
 8006322:	9001      	str	r0, [sp, #4]
	res = find_volume(&dj.fs, &path, 1);
 8006324:	a901      	add	r1, sp, #4
 8006326:	a886      	add	r0, sp, #536	; 0x218
 8006328:	f7fe fc50 	bl	8004bcc <find_volume>
	if (res == FR_OK) {
 800632c:	4604      	mov	r4, r0
 800632e:	b9e8      	cbnz	r0, 800636c <f_unlink+0x52>
		INIT_BUF(dj);
 8006330:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006334:	f000 f87d 	bl	8006432 <ff_memalloc>
 8006338:	4606      	mov	r6, r0
 800633a:	b328      	cbz	r0, 8006388 <f_unlink+0x6e>
 800633c:	908e      	str	r0, [sp, #568]	; 0x238
 800633e:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);		/* Follow the file path */
 8006340:	9901      	ldr	r1, [sp, #4]
		INIT_BUF(dj);
 8006342:	938c      	str	r3, [sp, #560]	; 0x230
		res = follow_path(&dj, path);		/* Follow the file path */
 8006344:	a806      	add	r0, sp, #24
 8006346:	f7ff f83b 	bl	80053c0 <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
 800634a:	4604      	mov	r4, r0
 800634c:	b958      	cbnz	r0, 8006366 <f_unlink+0x4c>
 800634e:	2102      	movs	r1, #2
 8006350:	a806      	add	r0, sp, #24
 8006352:	f7fe fa85 	bl	8004860 <chk_lock>
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8006356:	4604      	mov	r4, r0
 8006358:	b928      	cbnz	r0, 8006366 <f_unlink+0x4c>
			dir = dj.dir;
 800635a:	998b      	ldr	r1, [sp, #556]	; 0x22c
			if (!dir) {
 800635c:	b191      	cbz	r1, 8006384 <f_unlink+0x6a>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
 800635e:	7acc      	ldrb	r4, [r1, #11]
 8006360:	07e2      	lsls	r2, r4, #31
 8006362:	d513      	bpl.n	800638c <f_unlink+0x72>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8006364:	2407      	movs	r4, #7
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
					res = remove_chain(dj.fs, dclst);
				if (res == FR_OK) res = sync_fs(dj.fs);
			}
		}
		FREE_BUF();
 8006366:	4630      	mov	r0, r6
 8006368:	f000 f865 	bl	8006436 <ff_memfree>
	}

	LEAVE_FF(dj.fs, res);
}
 800636c:	4620      	mov	r0, r4
 800636e:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8006372:	bd70      	pop	{r4, r5, r6, pc}
					res = remove_chain(dj.fs, dclst);
 8006374:	4629      	mov	r1, r5
 8006376:	9886      	ldr	r0, [sp, #536]	; 0x218
 8006378:	f7ff fb56 	bl	8005a28 <remove_chain>
				if (res == FR_OK) res = sync_fs(dj.fs);
 800637c:	4604      	mov	r4, r0
 800637e:	2800      	cmp	r0, #0
 8006380:	d1f1      	bne.n	8006366 <f_unlink+0x4c>
 8006382:	e02b      	b.n	80063dc <f_unlink+0xc2>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8006384:	2406      	movs	r4, #6
 8006386:	e7ee      	b.n	8006366 <f_unlink+0x4c>
		INIT_BUF(dj);
 8006388:	2411      	movs	r4, #17
 800638a:	e7ef      	b.n	800636c <f_unlink+0x52>
				dclst = ld_clust(dj.fs, dir);
 800638c:	9b86      	ldr	r3, [sp, #536]	; 0x218
 800638e:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
 8006392:	f7fe fb37 	bl	8004a04 <ld_clust.isra.0>
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 8006396:	4605      	mov	r5, r0
 8006398:	b1c0      	cbz	r0, 80063cc <f_unlink+0xb2>
 800639a:	06e3      	lsls	r3, r4, #27
 800639c:	d516      	bpl.n	80063cc <f_unlink+0xb2>
						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
 800639e:	f44f 720a 	mov.w	r2, #552	; 0x228
 80063a2:	a906      	add	r1, sp, #24
 80063a4:	a890      	add	r0, sp, #576	; 0x240
 80063a6:	f7fe fa49 	bl	800483c <mem_cpy>
						res = dir_sdi(&sdj, 2);
 80063aa:	2102      	movs	r1, #2
 80063ac:	a890      	add	r0, sp, #576	; 0x240
						sdj.sclust = dclst;
 80063ae:	f8cd 5448 	str.w	r5, [sp, #1096]	; 0x448
						res = dir_sdi(&sdj, 2);
 80063b2:	f7fe fdb6 	bl	8004f22 <dir_sdi>
						if (res == FR_OK) {
 80063b6:	4604      	mov	r4, r0
 80063b8:	2800      	cmp	r0, #0
 80063ba:	d1d4      	bne.n	8006366 <f_unlink+0x4c>
							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 80063bc:	a890      	add	r0, sp, #576	; 0x240
 80063be:	f7ff faaf 	bl	8005920 <dir_read.constprop.11>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 80063c2:	4604      	mov	r4, r0
 80063c4:	2800      	cmp	r0, #0
 80063c6:	d0cd      	beq.n	8006364 <f_unlink+0x4a>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 80063c8:	2804      	cmp	r0, #4
 80063ca:	d1cc      	bne.n	8006366 <f_unlink+0x4c>
				res = dir_remove(&dj);		/* Remove the directory entry */
 80063cc:	a806      	add	r0, sp, #24
 80063ce:	f7ff fa71 	bl	80058b4 <dir_remove>
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 80063d2:	4604      	mov	r4, r0
 80063d4:	2800      	cmp	r0, #0
 80063d6:	d1c6      	bne.n	8006366 <f_unlink+0x4c>
 80063d8:	2d00      	cmp	r5, #0
 80063da:	d1cb      	bne.n	8006374 <f_unlink+0x5a>
				if (res == FR_OK) res = sync_fs(dj.fs);
 80063dc:	9886      	ldr	r0, [sp, #536]	; 0x218
 80063de:	f7fe fb4f 	bl	8004a80 <sync_fs>
 80063e2:	4604      	mov	r4, r0
 80063e4:	e7bf      	b.n	8006366 <f_unlink+0x4c>
	...

080063e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80063e8:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 80063ea:	4b0f      	ldr	r3, [pc, #60]	; (8006428 <FATFS_LinkDriverEx+0x40>)
 80063ec:	7a5c      	ldrb	r4, [r3, #9]
 80063ee:	2c01      	cmp	r4, #1
 80063f0:	d818      	bhi.n	8006424 <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 80063f2:	7a5d      	ldrb	r5, [r3, #9]
 80063f4:	b2ed      	uxtb	r5, r5
 80063f6:	2400      	movs	r4, #0
 80063f8:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 80063fa:	7a5d      	ldrb	r5, [r3, #9]
 80063fc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8006400:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 8006402:	7a58      	ldrb	r0, [r3, #9]
 8006404:	4418      	add	r0, r3
 8006406:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8006408:	7a5a      	ldrb	r2, [r3, #9]
 800640a:	b2d2      	uxtb	r2, r2
 800640c:	1c50      	adds	r0, r2, #1
 800640e:	b2c0      	uxtb	r0, r0
 8006410:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8006412:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8006414:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8006416:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8006418:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800641a:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800641c:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800641e:	70cc      	strb	r4, [r1, #3]
 8006420:	4620      	mov	r0, r4
 8006422:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8006424:	2001      	movs	r0, #1
    ret = 0;
  }
  
  return ret;
}
 8006426:	bd30      	pop	{r4, r5, pc}
 8006428:	2000068c 	.word	0x2000068c

0800642c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 800642c:	2200      	movs	r2, #0
 800642e:	f7ff bfdb 	b.w	80063e8 <FATFS_LinkDriverEx>

08006432 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return malloc(msize);	/* Allocate a new memory block with POSIX API */
 8006432:	f003 b911 	b.w	8009658 <malloc>

08006436 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	free(mblock);	/* Discard the memory block with POSIX API */
 8006436:	f003 b917 	b.w	8009668 <free>
	...

0800643c <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800643c:	287f      	cmp	r0, #127	; 0x7f
{
 800643e:	b510      	push	{r4, lr}
	if (chr < 0x80) {	/* ASCII */
 8006440:	d916      	bls.n	8006470 <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8006442:	b131      	cbz	r1, 8006452 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006444:	28ff      	cmp	r0, #255	; 0xff
 8006446:	d812      	bhi.n	800646e <ff_convert+0x32>
 8006448:	4b0a      	ldr	r3, [pc, #40]	; (8006474 <ff_convert+0x38>)
 800644a:	3880      	subs	r0, #128	; 0x80
 800644c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8006450:	bd10      	pop	{r4, pc}

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (chr == Tbl[c]) break;
 8006452:	4a08      	ldr	r2, [pc, #32]	; (8006474 <ff_convert+0x38>)
 8006454:	f832 4011 	ldrh.w	r4, [r2, r1, lsl #1]
 8006458:	4284      	cmp	r4, r0
 800645a:	b28b      	uxth	r3, r1
 800645c:	d003      	beq.n	8006466 <ff_convert+0x2a>
 800645e:	3101      	adds	r1, #1
			for (c = 0; c < 0x80; c++) {
 8006460:	2980      	cmp	r1, #128	; 0x80
 8006462:	d1f7      	bne.n	8006454 <ff_convert+0x18>
 8006464:	460b      	mov	r3, r1
			}
			c = (c + 0x80) & 0xFF;
 8006466:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800646a:	b2c0      	uxtb	r0, r0
 800646c:	bd10      	pop	{r4, pc}
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800646e:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8006470:	bd10      	pop	{r4, pc}
 8006472:	bf00      	nop
 8006474:	0800abba 	.word	0x0800abba

08006478 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8006478:	4906      	ldr	r1, [pc, #24]	; (8006494 <ff_wtoupper+0x1c>)
 800647a:	2300      	movs	r3, #0
 800647c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8006480:	b122      	cbz	r2, 800648c <ff_wtoupper+0x14>
 8006482:	4282      	cmp	r2, r0
 8006484:	d103      	bne.n	800648e <ff_wtoupper+0x16>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8006486:	4a04      	ldr	r2, [pc, #16]	; (8006498 <ff_wtoupper+0x20>)
 8006488:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
}
 800648c:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800648e:	3301      	adds	r3, #1
 8006490:	e7f4      	b.n	800647c <ff_wtoupper+0x4>
 8006492:	bf00      	nop
 8006494:	0800acba 	.word	0x0800acba
 8006498:	0800ae9a 	.word	0x0800ae9a

0800649c <USBH_MSC_SOFProcess>:
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{

  return USBH_OK;
}
 800649c:	2000      	movs	r0, #0
 800649e:	4770      	bx	lr

080064a0 <USBH_MSC_Process>:
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80064a0:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
{
 80064a4:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80064a6:	69dd      	ldr	r5, [r3, #28]
  switch (MSC_Handle->state)
 80064a8:	7b2b      	ldrb	r3, [r5, #12]
{
 80064aa:	4606      	mov	r6, r0
  switch (MSC_Handle->state)
 80064ac:	b123      	cbz	r3, 80064b8 <USBH_MSC_Process+0x18>
  USBH_StatusTypeDef error = USBH_BUSY ;
 80064ae:	f113 30ff 	adds.w	r0, r3, #4294967295
 80064b2:	bf18      	it	ne
 80064b4:	2001      	movne	r0, #1
 80064b6:	bd70      	pop	{r4, r5, r6, pc}
    if(MSC_Handle->current_lun < MSC_Handle->max_lun)
 80064b8:	f8b5 10f8 	ldrh.w	r1, [r5, #248]	; 0xf8
 80064bc:	682a      	ldr	r2, [r5, #0]
 80064be:	4291      	cmp	r1, r2
 80064c0:	f04f 0401 	mov.w	r4, #1
 80064c4:	f080 80c6 	bcs.w	8006654 <USBH_MSC_Process+0x1b4>
      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80064c8:	2234      	movs	r2, #52	; 0x34
 80064ca:	fb02 5301 	mla	r3, r2, r1, r5
 80064ce:	f883 4091 	strb.w	r4, [r3, #145]	; 0x91
      switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80064d2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80064d6:	4614      	mov	r4, r2
 80064d8:	2b08      	cmp	r3, #8
 80064da:	d83a      	bhi.n	8006552 <USBH_MSC_Process+0xb2>
 80064dc:	e8df f003 	tbb	[pc, r3]
 80064e0:	64203905 	.word	0x64203905
 80064e4:	3939870e 	.word	0x3939870e
 80064e8:	b6          	.byte	0xb6
 80064e9:	00          	.byte	0x00
        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80064ea:	fb04 5401 	mla	r4, r4, r1, r5
 80064ee:	2304      	movs	r3, #4
 80064f0:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        MSC_Handle->timer = phost->Timer;
 80064f4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80064f8:	f8c5 30fc 	str.w	r3, [r5, #252]	; 0xfc
        scsi_status = USBH_MSC_SCSI_Inquiry(phost, MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80064fc:	2434      	movs	r4, #52	; 0x34
 80064fe:	fb04 5201 	mla	r2, r4, r1, r5
 8006502:	329f      	adds	r2, #159	; 0x9f
 8006504:	b2c9      	uxtb	r1, r1
 8006506:	4630      	mov	r0, r6
 8006508:	f000 fbe7 	bl	8006cda <USBH_MSC_SCSI_Inquiry>
        if( scsi_status == USBH_OK)
 800650c:	2800      	cmp	r0, #0
 800650e:	d15f      	bne.n	80065d0 <USBH_MSC_Process+0x130>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;        
 8006510:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8006514:	fb04 5503 	mla	r5, r4, r3, r5
 8006518:	2302      	movs	r3, #2
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR; 
 800651a:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
 800651e:	e018      	b.n	8006552 <USBH_MSC_Process+0xb2>
        ready_status = USBH_MSC_SCSI_TestUnitReady(phost, MSC_Handle->current_lun);
 8006520:	b2c9      	uxtb	r1, r1
 8006522:	f000 fb75 	bl	8006c10 <USBH_MSC_SCSI_TestUnitReady>
        if( ready_status == USBH_OK)
 8006526:	b9b0      	cbnz	r0, 8006556 <USBH_MSC_Process+0xb6>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8006528:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 800652c:	2234      	movs	r2, #52	; 0x34
 800652e:	fb02 5103 	mla	r1, r2, r3, r5
 8006532:	f891 0092 	ldrb.w	r0, [r1, #146]	; 0x92
 8006536:	b100      	cbz	r0, 800653a <USBH_MSC_Process+0x9a>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
 8006538:	2001      	movs	r0, #1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800653a:	fb02 5503 	mla	r5, r2, r3, r5
 800653e:	2303      	movs	r3, #3
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 8006540:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8006544:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800654e:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006552:	2001      	movs	r0, #1
}
 8006554:	bd70      	pop	{r4, r5, r6, pc}
        if( ready_status == USBH_FAIL)
 8006556:	2802      	cmp	r0, #2
 8006558:	d118      	bne.n	800658c <USBH_MSC_Process+0xec>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800655a:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 800655e:	2234      	movs	r2, #52	; 0x34
 8006560:	fb02 5103 	mla	r1, r2, r3, r5
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
 8006564:	fb02 5503 	mla	r5, r2, r3, r5
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8006568:	f891 0092 	ldrb.w	r0, [r1, #146]	; 0x92
 800656c:	2802      	cmp	r0, #2
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1;
 800656e:	bf14      	ite	ne
 8006570:	2001      	movne	r0, #1
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 8006572:	2000      	moveq	r0, #0
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
 8006574:	2305      	movs	r3, #5
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0;
 8006576:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE; 
 800657a:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800657e:	2001      	movs	r0, #1
            MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8006580:	2302      	movs	r3, #2
            MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006582:	f885 0091 	strb.w	r0, [r5, #145]	; 0x91
            MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8006586:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
 800658a:	bd70      	pop	{r4, r5, r6, pc}
        else if(ready_status == USBH_UNRECOVERED_ERROR)
 800658c:	2804      	cmp	r0, #4
 800658e:	d1e0      	bne.n	8006552 <USBH_MSC_Process+0xb2>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006590:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8006594:	2234      	movs	r2, #52	; 0x34
 8006596:	fb02 5503 	mla	r5, r2, r3, r5
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800659a:	2001      	movs	r0, #1
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800659c:	2302      	movs	r3, #2
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800659e:	f885 0090 	strb.w	r0, [r5, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80065a2:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
        scsi_status = USBH_MSC_SCSI_ReadCapacity(phost,MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80065a8:	fb04 5201 	mla	r2, r4, r1, r5
 80065ac:	3294      	adds	r2, #148	; 0x94
 80065ae:	b2c9      	uxtb	r1, r1
 80065b0:	f000 fb54 	bl	8006c5c <USBH_MSC_SCSI_ReadCapacity>
        if(scsi_status == USBH_OK)
 80065b4:	b960      	cbnz	r0, 80065d0 <USBH_MSC_Process+0x130>
          if(MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1)
 80065b6:	f8b5 20f8 	ldrh.w	r2, [r5, #248]	; 0xf8
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80065ba:	2301      	movs	r3, #1
 80065bc:	fb04 5402 	mla	r4, r4, r2, r5
          MSC_Handle->current_lun++;
 80065c0:	441a      	add	r2, r3
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80065c2:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80065c6:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
          MSC_Handle->current_lun++;
 80065ca:	f8a5 20f8 	strh.w	r2, [r5, #248]	; 0xf8
 80065ce:	e7c0      	b.n	8006552 <USBH_MSC_Process+0xb2>
        else if( scsi_status == USBH_FAIL)
 80065d0:	2802      	cmp	r0, #2
 80065d2:	d105      	bne.n	80065e0 <USBH_MSC_Process+0x140>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80065d4:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 80065d8:	fb04 5503 	mla	r5, r4, r3, r5
 80065dc:	2305      	movs	r3, #5
 80065de:	e79c      	b.n	800651a <USBH_MSC_Process+0x7a>
        else if(scsi_status == USBH_UNRECOVERED_ERROR)
 80065e0:	2804      	cmp	r0, #4
 80065e2:	d1b6      	bne.n	8006552 <USBH_MSC_Process+0xb2>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80065e4:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 80065e8:	fb04 5503 	mla	r5, r4, r3, r5
 80065ec:	e7d5      	b.n	800659a <USBH_MSC_Process+0xfa>
        scsi_status = USBH_MSC_SCSI_RequestSense(phost,  MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80065ee:	fb04 5201 	mla	r2, r4, r1, r5
 80065f2:	329c      	adds	r2, #156	; 0x9c
 80065f4:	b2c9      	uxtb	r1, r1
 80065f6:	f000 fbda 	bl	8006dae <USBH_MSC_SCSI_RequestSense>
        if( scsi_status == USBH_OK)
 80065fa:	b9f8      	cbnz	r0, 800663c <USBH_MSC_Process+0x19c>
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80065fc:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8006600:	fb04 5403 	mla	r4, r4, r3, r5
 8006604:	f894 209c 	ldrb.w	r2, [r4, #156]	; 0x9c
 8006608:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 800660c:	2a02      	cmp	r2, #2
 800660e:	d10b      	bne.n	8006628 <USBH_MSC_Process+0x188>
            if((phost->Timer - MSC_Handle->timer) < 10000)
 8006610:	f8d5 00fc 	ldr.w	r0, [r5, #252]	; 0xfc
 8006614:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8006618:	1a09      	subs	r1, r1, r0
 800661a:	f242 700f 	movw	r0, #9999	; 0x270f
 800661e:	4281      	cmp	r1, r0
 8006620:	d802      	bhi.n	8006628 <USBH_MSC_Process+0x188>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006622:	f884 2090 	strb.w	r2, [r4, #144]	; 0x90
 8006626:	e794      	b.n	8006552 <USBH_MSC_Process+0xb2>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006628:	2234      	movs	r2, #52	; 0x34
 800662a:	fb02 5203 	mla	r2, r2, r3, r5
 800662e:	2001      	movs	r0, #1
          MSC_Handle->current_lun++;
 8006630:	4403      	add	r3, r0
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006632:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
          MSC_Handle->current_lun++;
 8006636:	f8a5 30f8 	strh.w	r3, [r5, #248]	; 0xf8
 800663a:	bd70      	pop	{r4, r5, r6, pc}
        if( scsi_status == USBH_FAIL)
 800663c:	2802      	cmp	r0, #2
 800663e:	d1cf      	bne.n	80065e0 <USBH_MSC_Process+0x140>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR; 
 8006640:	f8b5 30f8 	ldrh.w	r3, [r5, #248]	; 0xf8
 8006644:	fb04 5503 	mla	r5, r4, r3, r5
 8006648:	2308      	movs	r3, #8
 800664a:	e766      	b.n	800651a <USBH_MSC_Process+0x7a>
        MSC_Handle->current_lun++;
 800664c:	3101      	adds	r1, #1
 800664e:	f8a5 10f8 	strh.w	r1, [r5, #248]	; 0xf8
 8006652:	e77e      	b.n	8006552 <USBH_MSC_Process+0xb2>
      MSC_Handle->current_lun = 0;
 8006654:	f8a5 30f8 	strh.w	r3, [r5, #248]	; 0xf8
    MSC_Handle->state = MSC_IDLE;
 8006658:	732c      	strb	r4, [r5, #12]
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);     
 800665a:	f8d0 3394 	ldr.w	r3, [r0, #916]	; 0x394
 800665e:	2102      	movs	r1, #2
 8006660:	4798      	blx	r3
 8006662:	e776      	b.n	8006552 <USBH_MSC_Process+0xb2>

08006664 <USBH_MSC_ClassRequest>:
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 8006664:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
{   
 8006668:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 800666a:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->req_state)
 800666c:	7ba3      	ldrb	r3, [r4, #14]
 800666e:	2b02      	cmp	r3, #2
{   
 8006670:	4602      	mov	r2, r0
  switch (MSC_Handle->req_state)
 8006672:	d002      	beq.n	800667a <USBH_MSC_ClassRequest+0x16>
 8006674:	2b03      	cmp	r3, #3
 8006676:	d020      	beq.n	80066ba <USBH_MSC_ClassRequest+0x56>
 8006678:	bb2b      	cbnz	r3, 80066c6 <USBH_MSC_ClassRequest+0x62>
    status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)&MSC_Handle->max_lun);
 800667a:	4621      	mov	r1, r4
 800667c:	4610      	mov	r0, r2
 800667e:	f000 f9bc 	bl	80069fa <USBH_MSC_BOT_REQ_GetMaxLUN>
    if(status == USBH_NOT_SUPPORTED)
 8006682:	2803      	cmp	r0, #3
 8006684:	d10e      	bne.n	80066a4 <USBH_MSC_ClassRequest+0x40>
      MSC_Handle->max_lun = 0;
 8006686:	2300      	movs	r3, #0
 8006688:	6023      	str	r3, [r4, #0]
      MSC_Handle->max_lun = (uint8_t )(MSC_Handle->max_lun) + 1;
 800668a:	7822      	ldrb	r2, [r4, #0]
      for(i = 0; i < MSC_Handle->max_lun; i++)
 800668c:	2300      	movs	r3, #0
      MSC_Handle->max_lun = (uint8_t )(MSC_Handle->max_lun) + 1;
 800668e:	3201      	adds	r2, #1
 8006690:	6022      	str	r2, [r4, #0]
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8006692:	2034      	movs	r0, #52	; 0x34
 8006694:	2502      	movs	r5, #2
        MSC_Handle->unit[i].state_changed = 0;
 8006696:	461e      	mov	r6, r3
 8006698:	1c59      	adds	r1, r3, #1
      for(i = 0; i < MSC_Handle->max_lun; i++)
 800669a:	b2db      	uxtb	r3, r3
 800669c:	429a      	cmp	r2, r3
 800669e:	d804      	bhi.n	80066aa <USBH_MSC_ClassRequest+0x46>
 80066a0:	2000      	movs	r0, #0
 80066a2:	bd70      	pop	{r4, r5, r6, pc}
    if(status == USBH_OK)
 80066a4:	2800      	cmp	r0, #0
 80066a6:	d0f0      	beq.n	800668a <USBH_MSC_ClassRequest+0x26>
}
 80066a8:	bd70      	pop	{r4, r5, r6, pc}
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80066aa:	fb00 4303 	mla	r3, r0, r3, r4
 80066ae:	f883 5092 	strb.w	r5, [r3, #146]	; 0x92
        MSC_Handle->unit[i].state_changed = 0;
 80066b2:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
 80066b6:	460b      	mov	r3, r1
 80066b8:	e7ee      	b.n	8006698 <USBH_MSC_ClassRequest+0x34>
    if(USBH_ClrFeature(phost, 0x00) == USBH_OK)
 80066ba:	2100      	movs	r1, #0
 80066bc:	f001 f81f 	bl	80076fe <USBH_ClrFeature>
 80066c0:	b908      	cbnz	r0, 80066c6 <USBH_MSC_ClassRequest+0x62>
      MSC_Handle->req_state = MSC_Handle->prev_req_state; 
 80066c2:	7be3      	ldrb	r3, [r4, #15]
 80066c4:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 80066c6:	2001      	movs	r0, #1
 80066c8:	e7ee      	b.n	80066a8 <USBH_MSC_ClassRequest+0x44>

080066ca <USBH_MSC_InterfaceDeInit>:
{
 80066ca:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80066cc:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 80066d0:	69dd      	ldr	r5, [r3, #28]
  if ( MSC_Handle->OutPipe)
 80066d2:	7969      	ldrb	r1, [r5, #5]
{
 80066d4:	4604      	mov	r4, r0
  if ( MSC_Handle->OutPipe)
 80066d6:	b139      	cbz	r1, 80066e8 <USBH_MSC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80066d8:	f001 f88d 	bl	80077f6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->OutPipe);
 80066dc:	7969      	ldrb	r1, [r5, #5]
 80066de:	4620      	mov	r0, r4
 80066e0:	f001 f8a6 	bl	8007830 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0;     /* Reset the Channel as Free */
 80066e4:	2300      	movs	r3, #0
 80066e6:	716b      	strb	r3, [r5, #5]
  if ( MSC_Handle->InPipe)
 80066e8:	7929      	ldrb	r1, [r5, #4]
 80066ea:	b141      	cbz	r1, 80066fe <USBH_MSC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80066ec:	4620      	mov	r0, r4
 80066ee:	f001 f882 	bl	80077f6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->InPipe);
 80066f2:	7929      	ldrb	r1, [r5, #4]
 80066f4:	4620      	mov	r0, r4
 80066f6:	f001 f89b 	bl	8007830 <USBH_FreePipe>
    MSC_Handle->InPipe = 0;     /* Reset the Channel as Free */
 80066fa:	2300      	movs	r3, #0
 80066fc:	712b      	strb	r3, [r5, #4]
  if(phost->pActiveClass->pData)
 80066fe:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 8006702:	69d8      	ldr	r0, [r3, #28]
 8006704:	b128      	cbz	r0, 8006712 <USBH_MSC_InterfaceDeInit+0x48>
    USBH_free (phost->pActiveClass->pData);
 8006706:	f002 ffaf 	bl	8009668 <free>
    phost->pActiveClass->pData = 0;
 800670a:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 800670e:	2200      	movs	r2, #0
 8006710:	61da      	str	r2, [r3, #28]
}
 8006712:	2000      	movs	r0, #0
 8006714:	bd38      	pop	{r3, r4, r5, pc}

08006716 <USBH_MSC_InterfaceInit>:
{	 
 8006716:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8006718:	f8d0 1344 	ldr.w	r1, [r0, #836]	; 0x344
{	 
 800671c:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800671e:	7909      	ldrb	r1, [r1, #4]
 8006720:	2350      	movs	r3, #80	; 0x50
 8006722:	2206      	movs	r2, #6
{	 
 8006724:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8006726:	f000 fc63 	bl	8006ff0 <USBH_FindInterface>
  if(interface == 0xFF) /* Not Valid Interface */
 800672a:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800672c:	4601      	mov	r1, r0
  if(interface == 0xFF) /* Not Valid Interface */
 800672e:	d06d      	beq.n	800680c <USBH_MSC_InterfaceInit+0xf6>
    USBH_SelectInterface (phost, interface);
 8006730:	4628      	mov	r0, r5
 8006732:	f000 fc54 	bl	8006fde <USBH_SelectInterface>
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 8006736:	f44f 7080 	mov.w	r0, #256	; 0x100
 800673a:	f8d5 6344 	ldr.w	r6, [r5, #836]	; 0x344
 800673e:	f002 ff8b 	bl	8009658 <malloc>
 8006742:	61f0      	str	r0, [r6, #28]
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8006744:	f895 221f 	ldrb.w	r2, [r5, #543]	; 0x21f
 8006748:	231a      	movs	r3, #26
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 800674a:	4604      	mov	r4, r0
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 800674c:	fb03 5002 	mla	r0, r3, r2, r5
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8006750:	fb03 5302 	mla	r3, r3, r2, r5
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8006754:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8006758:	f893 2250 	ldrb.w	r2, [r3, #592]	; 0x250
 800675c:	f8b0 024a 	ldrh.w	r0, [r0, #586]	; 0x24a
 8006760:	f8b3 3252 	ldrh.w	r3, [r3, #594]	; 0x252
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8006764:	f011 0f80 	tst.w	r1, #128	; 0x80
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 8006768:	bf19      	ittee	ne
 800676a:	71e1      	strbne	r1, [r4, #7]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 800676c:	8160      	strhne	r0, [r4, #10]
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 800676e:	71a1      	strbeq	r1, [r4, #6]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;      
 8006770:	8120      	strheq	r0, [r4, #8]
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8006772:	f012 0f80 	tst.w	r2, #128	; 0x80
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8006776:	bf08      	it	eq
 8006778:	71a2      	strbeq	r2, [r4, #6]
    MSC_Handle->current_lun = 0;
 800677a:	f04f 0600 	mov.w	r6, #0
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800677e:	79a1      	ldrb	r1, [r4, #6]
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 8006780:	bf18      	it	ne
 8006782:	71e2      	strbne	r2, [r4, #7]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8006784:	4628      	mov	r0, r5
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
 8006786:	bf14      	ite	ne
 8006788:	8163      	strhne	r3, [r4, #10]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;      
 800678a:	8123      	strheq	r3, [r4, #8]
    MSC_Handle->current_lun = 0;
 800678c:	f8a4 60f8 	strh.w	r6, [r4, #248]	; 0xf8
    MSC_Handle->rw_lun = 0;
 8006790:	f8a4 60fa 	strh.w	r6, [r4, #250]	; 0xfa
    MSC_Handle->state = MSC_INIT;
 8006794:	7326      	strb	r6, [r4, #12]
    MSC_Handle->error = MSC_OK;
 8006796:	7366      	strb	r6, [r4, #13]
    MSC_Handle->req_state = MSC_REQ_IDLE;
 8006798:	73a6      	strb	r6, [r4, #14]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800679a:	f001 f831 	bl	8007800 <USBH_AllocPipe>
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800679e:	79e1      	ldrb	r1, [r4, #7]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80067a0:	7160      	strb	r0, [r4, #5]
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80067a2:	4628      	mov	r0, r5
 80067a4:	f001 f82c 	bl	8007800 <USBH_AllocPipe>
 80067a8:	7120      	strb	r0, [r4, #4]
    USBH_MSC_BOT_Init(phost);
 80067aa:	4628      	mov	r0, r5
 80067ac:	f000 f930 	bl	8006a10 <USBH_MSC_BOT_Init>
    USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
 80067b0:	2268      	movs	r2, #104	; 0x68
 80067b2:	4631      	mov	r1, r6
 80067b4:	f104 0090 	add.w	r0, r4, #144	; 0x90
 80067b8:	f002 ff69 	bl	800968e <memset>
    USBH_OpenPipe  (phost,
 80067bc:	8920      	ldrh	r0, [r4, #8]
 80067be:	9002      	str	r0, [sp, #8]
 80067c0:	2702      	movs	r7, #2
 80067c2:	f895 021d 	ldrb.w	r0, [r5, #541]	; 0x21d
 80067c6:	f895 321c 	ldrb.w	r3, [r5, #540]	; 0x21c
 80067ca:	79a2      	ldrb	r2, [r4, #6]
 80067cc:	7961      	ldrb	r1, [r4, #5]
 80067ce:	9000      	str	r0, [sp, #0]
 80067d0:	9701      	str	r7, [sp, #4]
 80067d2:	4628      	mov	r0, r5
 80067d4:	f001 f800 	bl	80077d8 <USBH_OpenPipe>
    USBH_OpenPipe  (phost,
 80067d8:	8960      	ldrh	r0, [r4, #10]
 80067da:	9002      	str	r0, [sp, #8]
 80067dc:	f895 021d 	ldrb.w	r0, [r5, #541]	; 0x21d
 80067e0:	f895 321c 	ldrb.w	r3, [r5, #540]	; 0x21c
 80067e4:	79e2      	ldrb	r2, [r4, #7]
 80067e6:	7921      	ldrb	r1, [r4, #4]
 80067e8:	9000      	str	r0, [sp, #0]
 80067ea:	9701      	str	r7, [sp, #4]
 80067ec:	4628      	mov	r0, r5
 80067ee:	f000 fff3 	bl	80077d8 <USBH_OpenPipe>
    USBH_LL_SetToggle  (phost, MSC_Handle->InPipe,0);
 80067f2:	4632      	mov	r2, r6
 80067f4:	7921      	ldrb	r1, [r4, #4]
 80067f6:	4628      	mov	r0, r5
 80067f8:	f002 f83a 	bl	8008870 <USBH_LL_SetToggle>
    USBH_LL_SetToggle  (phost, MSC_Handle->OutPipe,0);
 80067fc:	4632      	mov	r2, r6
 80067fe:	7961      	ldrb	r1, [r4, #5]
 8006800:	4628      	mov	r0, r5
 8006802:	f002 f835 	bl	8008870 <USBH_LL_SetToggle>
    status = USBH_OK; 
 8006806:	4630      	mov	r0, r6
}
 8006808:	b005      	add	sp, #20
 800680a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = USBH_FAIL;      
 800680c:	2002      	movs	r0, #2
 800680e:	e7fb      	b.n	8006808 <USBH_MSC_InterfaceInit+0xf2>

08006810 <USBH_MSC_RdWrProcess>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006810:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
{
 8006814:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006816:	69dd      	ldr	r5, [r3, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;  
  
  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8006818:	2634      	movs	r6, #52	; 0x34
 800681a:	fb06 5401 	mla	r4, r6, r1, r5
 800681e:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8006822:	2b06      	cmp	r3, #6
 8006824:	d010      	beq.n	8006848 <USBH_MSC_RdWrProcess+0x38>
 8006826:	2b07      	cmp	r3, #7
 8006828:	d019      	beq.n	800685e <USBH_MSC_RdWrProcess+0x4e>
 800682a:	2b05      	cmp	r3, #5
 800682c:	d122      	bne.n	8006874 <USBH_MSC_RdWrProcess+0x64>
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
#endif       
    break; 
  
  case MSC_REQUEST_SENSE:
    scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800682e:	fb06 5201 	mla	r2, r6, r1, r5
 8006832:	329c      	adds	r2, #156	; 0x9c
 8006834:	f000 fabb 	bl	8006dae <USBH_MSC_SCSI_RequestSense>
    
    if( scsi_status == USBH_OK)
 8006838:	b9f0      	cbnz	r0, 8006878 <USBH_MSC_RdWrProcess+0x68>
    {
      USBH_UsrLog ("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
      USBH_UsrLog ("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
      USBH_UsrLog ("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
      MSC_Handle->unit[lun].state = MSC_IDLE;
 800683a:	2301      	movs	r3, #1
      MSC_Handle->unit[lun].error = MSC_ERROR;
 800683c:	2002      	movs	r0, #2
      MSC_Handle->unit[lun].state = MSC_IDLE;
 800683e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      MSC_Handle->unit[lun].error = MSC_ERROR;
 8006842:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
 8006846:	e008      	b.n	800685a <USBH_MSC_RdWrProcess+0x4a>
    scsi_status = USBH_MSC_SCSI_Read(phost,lun, 0, NULL, 0) ;
 8006848:	2300      	movs	r3, #0
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	461a      	mov	r2, r3
 800684e:	f000 fb3b 	bl	8006ec8 <USBH_MSC_SCSI_Read>
    if(scsi_status == USBH_OK)
 8006852:	b950      	cbnz	r0, 800686a <USBH_MSC_RdWrProcess+0x5a>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006854:	2301      	movs	r3, #1
 8006856:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  default:
    break;  
    
  }
  return error;
}
 800685a:	b002      	add	sp, #8
 800685c:	bd70      	pop	{r4, r5, r6, pc}
    scsi_status = USBH_MSC_SCSI_Write(phost,lun, 0, NULL, 0) ;
 800685e:	2300      	movs	r3, #0
 8006860:	9300      	str	r3, [sp, #0]
 8006862:	461a      	mov	r2, r3
 8006864:	f000 faec 	bl	8006e40 <USBH_MSC_SCSI_Write>
 8006868:	e7f3      	b.n	8006852 <USBH_MSC_RdWrProcess+0x42>
    else if( scsi_status == USBH_FAIL)
 800686a:	2802      	cmp	r0, #2
 800686c:	d104      	bne.n	8006878 <USBH_MSC_RdWrProcess+0x68>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;  
 800686e:	2305      	movs	r3, #5
 8006870:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006874:	2001      	movs	r0, #1
 8006876:	e7f0      	b.n	800685a <USBH_MSC_RdWrProcess+0x4a>
    if( scsi_status == USBH_FAIL)
 8006878:	2804      	cmp	r0, #4
 800687a:	d1fb      	bne.n	8006874 <USBH_MSC_RdWrProcess+0x64>
      MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;  
 800687c:	2308      	movs	r3, #8
 800687e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
 8006882:	2002      	movs	r0, #2
 8006884:	e7e9      	b.n	800685a <USBH_MSC_RdWrProcess+0x4a>

08006886 <USBH_MSC_UnitIsReady>:
  */
uint8_t  USBH_MSC_UnitIsReady (USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
  
  if(phost->gState == HOST_CLASS)
 8006886:	7803      	ldrb	r3, [r0, #0]
 8006888:	2b0a      	cmp	r3, #10
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;  
 800688a:	bf01      	itttt	eq
 800688c:	f8d0 3344 	ldreq.w	r3, [r0, #836]	; 0x344
  {
    return (MSC_Handle->unit[lun].error == MSC_OK);
 8006890:	69db      	ldreq	r3, [r3, #28]
 8006892:	2234      	moveq	r2, #52	; 0x34
 8006894:	fb02 3101 	mlaeq	r1, r2, r1, r3
 8006898:	bf03      	ittte	eq
 800689a:	f891 0091 	ldrbeq.w	r0, [r1, #145]	; 0x91
 800689e:	fab0 f080 	clzeq	r0, r0
 80068a2:	0940      	lsreq	r0, r0, #5
 80068a4:	2000      	movne	r0, #0
  }
  else
  {
    return 0;
  }
}
 80068a6:	4770      	bx	lr

080068a8 <USBH_MSC_GetLUNInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;    
  if(phost->gState == HOST_CLASS)
 80068a8:	7803      	ldrb	r3, [r0, #0]
 80068aa:	2b0a      	cmp	r3, #10
{
 80068ac:	b510      	push	{r4, lr}
  if(phost->gState == HOST_CLASS)
 80068ae:	d111      	bne.n	80068d4 <USBH_MSC_GetLUNInfo+0x2c>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;    
 80068b0:	f8d0 0344 	ldr.w	r0, [r0, #836]	; 0x344
  {
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80068b4:	2490      	movs	r4, #144	; 0x90
 80068b6:	2334      	movs	r3, #52	; 0x34
 80068b8:	fb13 4301 	smlabb	r3, r3, r1, r4
 80068bc:	69c1      	ldr	r1, [r0, #28]
 80068be:	4419      	add	r1, r3
 80068c0:	f101 0334 	add.w	r3, r1, #52	; 0x34
 80068c4:	f851 0b04 	ldr.w	r0, [r1], #4
 80068c8:	f842 0b04 	str.w	r0, [r2], #4
 80068cc:	4299      	cmp	r1, r3
 80068ce:	d1f9      	bne.n	80068c4 <USBH_MSC_GetLUNInfo+0x1c>
    return USBH_OK;
 80068d0:	2000      	movs	r0, #0
 80068d2:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBH_FAIL;
 80068d4:	2002      	movs	r0, #2
  }
}
 80068d6:	bd10      	pop	{r4, pc}

080068d8 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 80068d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
  
  if ((phost->device.is_connected == 0) || 
 80068dc:	f890 521e 	ldrb.w	r5, [r0, #542]	; 0x21e
{
 80068e0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80068e4:	4604      	mov	r4, r0
 80068e6:	460f      	mov	r7, r1
  if ((phost->device.is_connected == 0) || 
 80068e8:	b3bd      	cbz	r5, 800695a <USBH_MSC_Read+0x82>
      (phost->gState != HOST_CLASS) || 
 80068ea:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0) || 
 80068ec:	2d0a      	cmp	r5, #10
 80068ee:	d134      	bne.n	800695a <USBH_MSC_Read+0x82>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
 80068f0:	f8d0 5344 	ldr.w	r5, [r0, #836]	; 0x344
 80068f4:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80068f6:	2634      	movs	r6, #52	; 0x34
 80068f8:	fb06 5601 	mla	r6, r6, r1, r5
      (phost->gState != HOST_CLASS) || 
 80068fc:	f896 e090 	ldrb.w	lr, [r6, #144]	; 0x90
 8006900:	f1be 0f01 	cmp.w	lr, #1
 8006904:	d129      	bne.n	800695a <USBH_MSC_Read+0x82>
  {
    return  USBH_FAIL;
  }
  MSC_Handle->state = MSC_READ;
 8006906:	f04f 0e06 	mov.w	lr, #6
 800690a:	f885 e00c 	strb.w	lr, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800690e:	f886 e090 	strb.w	lr, [r6, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8006912:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa
  USBH_MSC_SCSI_Read(phost,
 8006916:	f8cd 8000 	str.w	r8, [sp]
 800691a:	f000 fad5 	bl	8006ec8 <USBH_MSC_SCSI_Read>
  
  timeout = phost->Timer;
  
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if(((phost->Timer - timeout) > (10000 * length)) || (phost->device.is_connected == 0))
 800691e:	f242 7610 	movw	r6, #10000	; 0x2710
  timeout = phost->Timer;
 8006922:	f8d4 9388 	ldr.w	r9, [r4, #904]	; 0x388
    if(((phost->Timer - timeout) > (10000 * length)) || (phost->device.is_connected == 0))
 8006926:	fb06 f608 	mul.w	r6, r6, r8
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800692a:	4639      	mov	r1, r7
 800692c:	4620      	mov	r0, r4
 800692e:	f7ff ff6f 	bl	8006810 <USBH_MSC_RdWrProcess>
 8006932:	2801      	cmp	r0, #1
 8006934:	d005      	beq.n	8006942 <USBH_MSC_Read+0x6a>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006936:	2301      	movs	r3, #1
 8006938:	732b      	strb	r3, [r5, #12]
  return USBH_OK;
 800693a:	2000      	movs	r0, #0
}
 800693c:	b003      	add	sp, #12
 800693e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(((phost->Timer - timeout) > (10000 * length)) || (phost->device.is_connected == 0))
 8006942:	f8d4 3388 	ldr.w	r3, [r4, #904]	; 0x388
 8006946:	eba3 0309 	sub.w	r3, r3, r9
 800694a:	42b3      	cmp	r3, r6
 800694c:	d803      	bhi.n	8006956 <USBH_MSC_Read+0x7e>
 800694e:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e9      	bne.n	800692a <USBH_MSC_Read+0x52>
      MSC_Handle->state = MSC_IDLE;
 8006956:	2301      	movs	r3, #1
 8006958:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 800695a:	2002      	movs	r0, #2
 800695c:	e7ee      	b.n	800693c <USBH_MSC_Read+0x64>

0800695e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 800695e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
  
  if ((phost->device.is_connected == 0) || 
 8006962:	f890 521e 	ldrb.w	r5, [r0, #542]	; 0x21e
{
 8006966:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800696a:	4604      	mov	r4, r0
 800696c:	460f      	mov	r7, r1
  if ((phost->device.is_connected == 0) || 
 800696e:	b3bd      	cbz	r5, 80069e0 <USBH_MSC_Write+0x82>
      (phost->gState != HOST_CLASS) || 
 8006970:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0) || 
 8006972:	2d0a      	cmp	r5, #10
 8006974:	d134      	bne.n	80069e0 <USBH_MSC_Write+0x82>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;   
 8006976:	f8d0 5344 	ldr.w	r5, [r0, #836]	; 0x344
 800697a:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800697c:	2634      	movs	r6, #52	; 0x34
 800697e:	fb06 5601 	mla	r6, r6, r1, r5
      (phost->gState != HOST_CLASS) || 
 8006982:	f896 e090 	ldrb.w	lr, [r6, #144]	; 0x90
 8006986:	f1be 0f01 	cmp.w	lr, #1
 800698a:	d129      	bne.n	80069e0 <USBH_MSC_Write+0x82>
  {
    return  USBH_FAIL;
  }
  MSC_Handle->state = MSC_WRITE;
 800698c:	f04f 0e07 	mov.w	lr, #7
 8006990:	f885 e00c 	strb.w	lr, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8006994:	f886 e090 	strb.w	lr, [r6, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8006998:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa
  USBH_MSC_SCSI_Write(phost,
 800699c:	f8cd 8000 	str.w	r8, [sp]
 80069a0:	f000 fa4e 	bl	8006e40 <USBH_MSC_SCSI_Write>
                     length);
  
  timeout = phost->Timer;
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if(((phost->Timer - timeout) >  (10000 * length)) || (phost->device.is_connected == 0))
 80069a4:	f242 7610 	movw	r6, #10000	; 0x2710
  timeout = phost->Timer;
 80069a8:	f8d4 9388 	ldr.w	r9, [r4, #904]	; 0x388
    if(((phost->Timer - timeout) >  (10000 * length)) || (phost->device.is_connected == 0))
 80069ac:	fb06 f608 	mul.w	r6, r6, r8
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80069b0:	4639      	mov	r1, r7
 80069b2:	4620      	mov	r0, r4
 80069b4:	f7ff ff2c 	bl	8006810 <USBH_MSC_RdWrProcess>
 80069b8:	2801      	cmp	r0, #1
 80069ba:	d005      	beq.n	80069c8 <USBH_MSC_Write+0x6a>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80069bc:	2301      	movs	r3, #1
 80069be:	732b      	strb	r3, [r5, #12]
  return USBH_OK;
 80069c0:	2000      	movs	r0, #0
}
 80069c2:	b003      	add	sp, #12
 80069c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(((phost->Timer - timeout) >  (10000 * length)) || (phost->device.is_connected == 0))
 80069c8:	f8d4 3388 	ldr.w	r3, [r4, #904]	; 0x388
 80069cc:	eba3 0309 	sub.w	r3, r3, r9
 80069d0:	42b3      	cmp	r3, r6
 80069d2:	d803      	bhi.n	80069dc <USBH_MSC_Write+0x7e>
 80069d4:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e9      	bne.n	80069b0 <USBH_MSC_Write+0x52>
      MSC_Handle->state = MSC_IDLE;
 80069dc:	2301      	movs	r3, #1
 80069de:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 80069e0:	2002      	movs	r0, #2
 80069e2:	e7ee      	b.n	80069c2 <USBH_MSC_Write+0x64>

080069e4 <USBH_MSC_BOT_REQ_Reset>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
  
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 80069e4:	2221      	movs	r2, #33	; 0x21
 80069e6:	7402      	strb	r2, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80069e8:	22ff      	movs	r2, #255	; 0xff
 80069ea:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0;
 80069ec:	2200      	movs	r2, #0
 80069ee:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 80069f0:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 0;           
 80069f2:	82c2      	strh	r2, [r0, #22]
  
  return USBH_CtlReq(phost, 0 , 0 );  
 80069f4:	4611      	mov	r1, r2
 80069f6:	f000 bc7c 	b.w	80072f2 <USBH_CtlReq>

080069fa <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80069fa:	22a1      	movs	r2, #161	; 0xa1
 80069fc:	7402      	strb	r2, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80069fe:	22fe      	movs	r2, #254	; 0xfe
 8006a00:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0;
 8006a02:	2200      	movs	r2, #0
 8006a04:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8006a06:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 1;           
 8006a08:	2201      	movs	r2, #1
 8006a0a:	82c2      	strh	r2, [r0, #22]
  
  return USBH_CtlReq(phost, Maxlun , 1 ); 
 8006a0c:	f000 bc71 	b.w	80072f2 <USBH_CtlReq>

08006a10 <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
  
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a10:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
  
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8006a14:	4a05      	ldr	r2, [pc, #20]	; (8006a2c <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a16:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8006a18:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8006a1a:	4a05      	ldr	r2, [pc, #20]	; (8006a30 <USBH_MSC_BOT_Init+0x20>)
 8006a1c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;    
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;   
 8006a24:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  
  return USBH_OK;
}
 8006a28:	2000      	movs	r0, #0
 8006a2a:	4770      	bx	lr
 8006a2c:	43425355 	.word	0x43425355
 8006a30:	20304050 	.word	0x20304050

08006a34 <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;  
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a34:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
{
 8006a38:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a3a:	69dc      	ldr	r4, [r3, #28]
  uint8_t toggle = 0;
  
  switch (MSC_Handle->hbot.state)
 8006a3c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8006a40:	3b01      	subs	r3, #1
{
 8006a42:	4606      	mov	r6, r0
  switch (MSC_Handle->hbot.state)
 8006a44:	2b0a      	cmp	r3, #10
 8006a46:	d859      	bhi.n	8006afc <USBH_MSC_BOT_Process+0xc8>
 8006a48:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006a4c:	001a000b 	.word	0x001a000b
 8006a50:	003d0033 	.word	0x003d0033
 8006a54:	0068005e 	.word	0x0068005e
 8006a58:	0093008b 	.word	0x0093008b
 8006a5c:	00be00b4 	.word	0x00be00b4
 8006a60:	00d6      	.short	0x00d6
  {
  case BOT_SEND_CBW:
    MSC_Handle->hbot.cbw.field.LUN = lun;
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;    
 8006a62:	2302      	movs	r3, #2
    USBH_BulkSendData (phost,
 8006a64:	2501      	movs	r5, #1
    MSC_Handle->hbot.cbw.field.LUN = lun;
 8006a66:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;    
 8006a6a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    USBH_BulkSendData (phost,
 8006a6e:	221f      	movs	r2, #31
 8006a70:	7963      	ldrb	r3, [r4, #5]
 8006a72:	9500      	str	r5, [sp, #0]
 8006a74:	f104 0154 	add.w	r1, r4, #84	; 0x54
      } 
      
      /* More Data To be Sent */
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
      {
        USBH_BulkSendData (phost,
 8006a78:	4630      	mov	r0, r6
 8006a7a:	f000 fe86 	bl	800778a <USBH_BulkSendData>
 8006a7e:	e03d      	b.n	8006afc <USBH_MSC_BOT_Process+0xc8>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe); 
 8006a80:	7961      	ldrb	r1, [r4, #5]
 8006a82:	f001 fee1 	bl	8008848 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8006a86:	2801      	cmp	r0, #1
 8006a88:	d10c      	bne.n	8006aa4 <USBH_MSC_BOT_Process+0x70>
      if ( MSC_Handle->hbot.cbw.field.DataTransferLength != 0 )
 8006a8a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006a8c:	b143      	cbz	r3, 8006aa0 <USBH_MSC_BOT_Process+0x6c>
        if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8006a8e:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 8006a92:	2b00      	cmp	r3, #0
          MSC_Handle->hbot.state = BOT_DATA_IN;
 8006a94:	bfb4      	ite	lt
 8006a96:	2303      	movlt	r3, #3
          MSC_Handle->hbot.state = BOT_DATA_OUT;
 8006a98:	2305      	movge	r3, #5
    
  case BOT_UNRECOVERED_ERROR: 
    status = USBH_MSC_BOT_REQ_Reset(phost);
    if ( status == USBH_OK)
    {
      MSC_Handle->hbot.state = BOT_SEND_CBW; 
 8006a9a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8006a9e:	e006      	b.n	8006aae <USBH_MSC_BOT_Process+0x7a>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006aa0:	2307      	movs	r3, #7
 8006aa2:	e7fa      	b.n	8006a9a <USBH_MSC_BOT_Process+0x66>
    else if(URB_Status == USBH_URB_NOTREADY)
 8006aa4:	2802      	cmp	r0, #2
 8006aa6:	d158      	bne.n	8006b5a <USBH_MSC_BOT_Process+0x126>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006aa8:	2001      	movs	r0, #1
 8006aaa:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    
  default:      
    break;
  }
  return status;
}
 8006aae:	b002      	add	sp, #8
 8006ab0:	bd70      	pop	{r4, r5, r6, pc}
    USBH_BulkReceiveData (phost,
 8006ab2:	7923      	ldrb	r3, [r4, #4]
 8006ab4:	8962      	ldrh	r2, [r4, #10]
 8006ab6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006aba:	f000 fe7d 	bl	80077b8 <USBH_BulkReceiveData>
    MSC_Handle->hbot.state  = BOT_DATA_IN_WAIT;
 8006abe:	2304      	movs	r3, #4
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006ac0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8006ac4:	e01a      	b.n	8006afc <USBH_MSC_BOT_Process+0xc8>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe); 
 8006ac6:	7921      	ldrb	r1, [r4, #4]
 8006ac8:	f001 febe 	bl	8008848 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE) 
 8006acc:	2801      	cmp	r0, #1
 8006ace:	d117      	bne.n	8006b00 <USBH_MSC_BOT_Process+0xcc>
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8006ad0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006ad2:	8962      	ldrh	r2, [r4, #10]
 8006ad4:	4293      	cmp	r3, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;  
 8006ad6:	bf8a      	itet	hi
 8006ad8:	1a9b      	subhi	r3, r3, r2
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 8006ada:	2300      	movls	r3, #0
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006adc:	f8d4 108c 	ldrhi.w	r1, [r4, #140]	; 0x8c
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 8006ae0:	65e3      	str	r3, [r4, #92]	; 0x5c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8006ae2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006ae4:	bf84      	itt	hi
 8006ae6:	1889      	addhi	r1, r1, r2
 8006ae8:	f8c4 108c 	strhi.w	r1, [r4, #140]	; 0x8c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d065      	beq.n	8006bbc <USBH_MSC_BOT_Process+0x188>
        USBH_BulkReceiveData (phost,
 8006af0:	7923      	ldrb	r3, [r4, #4]
 8006af2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006af6:	4630      	mov	r0, r6
 8006af8:	f000 fe5e 	bl	80077b8 <USBH_BulkReceiveData>
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006afc:	2001      	movs	r0, #1
 8006afe:	e7d6      	b.n	8006aae <USBH_MSC_BOT_Process+0x7a>
    else if(URB_Status == USBH_URB_STALL)
 8006b00:	2805      	cmp	r0, #5
 8006b02:	d1fb      	bne.n	8006afc <USBH_MSC_BOT_Process+0xc8>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006b04:	2309      	movs	r3, #9
 8006b06:	e7db      	b.n	8006ac0 <USBH_MSC_BOT_Process+0x8c>
    USBH_BulkSendData (phost,
 8006b08:	2501      	movs	r5, #1
 8006b0a:	7963      	ldrb	r3, [r4, #5]
 8006b0c:	8922      	ldrh	r2, [r4, #8]
 8006b0e:	9500      	str	r5, [sp, #0]
 8006b10:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006b14:	f000 fe39 	bl	800778a <USBH_BulkSendData>
    MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8006b18:	2306      	movs	r3, #6
 8006b1a:	e7d1      	b.n	8006ac0 <USBH_MSC_BOT_Process+0x8c>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);     
 8006b1c:	7961      	ldrb	r1, [r4, #5]
 8006b1e:	f001 fe93 	bl	8008848 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8006b22:	2801      	cmp	r0, #1
 8006b24:	d115      	bne.n	8006b52 <USBH_MSC_BOT_Process+0x11e>
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006b26:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006b28:	8922      	ldrh	r2, [r4, #8]
 8006b2a:	4293      	cmp	r3, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize; 
 8006b2c:	bf8a      	itet	hi
 8006b2e:	1a9b      	subhi	r3, r3, r2
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 8006b30:	2300      	movls	r3, #0
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006b32:	f8d4 108c 	ldrhi.w	r1, [r4, #140]	; 0x8c
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0;
 8006b36:	65e3      	str	r3, [r4, #92]	; 0x5c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8006b38:	6de3      	ldr	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006b3a:	bf84      	itt	hi
 8006b3c:	1889      	addhi	r1, r1, r2
 8006b3e:	f8c4 108c 	strhi.w	r1, [r4, #140]	; 0x8c
 8006b42:	2501      	movs	r5, #1
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0)
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d039      	beq.n	8006bbc <USBH_MSC_BOT_Process+0x188>
        USBH_BulkSendData (phost,
 8006b48:	7963      	ldrb	r3, [r4, #5]
 8006b4a:	9500      	str	r5, [sp, #0]
 8006b4c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006b50:	e792      	b.n	8006a78 <USBH_MSC_BOT_Process+0x44>
    else if(URB_Status == USBH_URB_NOTREADY)
 8006b52:	2802      	cmp	r0, #2
 8006b54:	d101      	bne.n	8006b5a <USBH_MSC_BOT_Process+0x126>
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8006b56:	2305      	movs	r3, #5
 8006b58:	e7b2      	b.n	8006ac0 <USBH_MSC_BOT_Process+0x8c>
    else if(URB_Status == USBH_URB_STALL)
 8006b5a:	2805      	cmp	r0, #5
 8006b5c:	d1ce      	bne.n	8006afc <USBH_MSC_BOT_Process+0xc8>
      MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006b5e:	230a      	movs	r3, #10
 8006b60:	e7ae      	b.n	8006ac0 <USBH_MSC_BOT_Process+0x8c>
    USBH_BulkReceiveData (phost,
 8006b62:	7923      	ldrb	r3, [r4, #4]
 8006b64:	220d      	movs	r2, #13
 8006b66:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8006b6a:	f000 fe25 	bl	80077b8 <USBH_BulkReceiveData>
    MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006b6e:	2308      	movs	r3, #8
 8006b70:	e7a6      	b.n	8006ac0 <USBH_MSC_BOT_Process+0x8c>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe); 
 8006b72:	7921      	ldrb	r1, [r4, #4]
 8006b74:	f001 fe68 	bl	8008848 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8006b78:	2801      	cmp	r0, #1
 8006b7a:	d1c1      	bne.n	8006b00 <USBH_MSC_BOT_Process+0xcc>
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b7c:	f8d6 3344 	ldr.w	r3, [r6, #836]	; 0x344
      MSC_Handle->hbot.state = BOT_SEND_CBW;    
 8006b80:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;        
 8006b84:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b88:	69dc      	ldr	r4, [r3, #28]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
  
    /*Checking if the transfer length is different than 13*/    
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	7921      	ldrb	r1, [r4, #4]
 8006b8e:	f001 fe2c 	bl	80087ea <USBH_LL_GetLastXferSize>
 8006b92:	280d      	cmp	r0, #13
 8006b94:	d137      	bne.n	8006c06 <USBH_MSC_BOT_Process+0x1d2>
    }
    else
    { /* CSW length is Correct */
      
      /* Check validity of the CSW Signature and CSWStatus */
      if(MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006b96:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8006b98:	4b1c      	ldr	r3, [pc, #112]	; (8006c0c <USBH_MSC_BOT_Process+0x1d8>)
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d133      	bne.n	8006c06 <USBH_MSC_BOT_Process+0x1d2>
      {/* Check Condition 1. dCSWSignature is equal to 53425355h */
        
        if(MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8006b9e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006ba0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d12f      	bne.n	8006c06 <USBH_MSC_BOT_Process+0x1d2>
        {
          /* Check Condition 3. dCSWTag matches the dCBWTag from the 
          corresponding CBW */

          if(MSC_Handle->hbot.csw.field.Status == 0) 
 8006ba6:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
        status = USBH_OK;
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	bf14      	ite	ne
 8006bae:	2002      	movne	r0, #2
 8006bb0:	2000      	moveq	r0, #0
 8006bb2:	e77c      	b.n	8006aae <USBH_MSC_BOT_Process+0x7a>
    status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8006bb4:	79e1      	ldrb	r1, [r4, #7]
 8006bb6:	f000 fda2 	bl	80076fe <USBH_ClrFeature>
    if (error == USBH_OK)
 8006bba:	b908      	cbnz	r0, 8006bc0 <USBH_MSC_BOT_Process+0x18c>
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006bbc:	2307      	movs	r3, #7
 8006bbe:	e77f      	b.n	8006ac0 <USBH_MSC_BOT_Process+0x8c>
    else if (error == USBH_UNRECOVERED_ERROR)
 8006bc0:	2804      	cmp	r0, #4
 8006bc2:	d19b      	bne.n	8006afc <USBH_MSC_BOT_Process+0xc8>
      MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006bc4:	230b      	movs	r3, #11
 8006bc6:	e77b      	b.n	8006ac0 <USBH_MSC_BOT_Process+0x8c>
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006bc8:	79a1      	ldrb	r1, [r4, #6]
 8006bca:	f000 fd98 	bl	80076fe <USBH_ClrFeature>
    if ( error == USBH_OK)
 8006bce:	4605      	mov	r5, r0
 8006bd0:	b980      	cbnz	r0, 8006bf4 <USBH_MSC_BOT_Process+0x1c0>
      toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe); 
 8006bd2:	7961      	ldrb	r1, [r4, #5]
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	f001 fe5b 	bl	8008890 <USBH_LL_GetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1- toggle);   
 8006bda:	f1c0 0201 	rsb	r2, r0, #1
 8006bde:	7961      	ldrb	r1, [r4, #5]
 8006be0:	b2d2      	uxtb	r2, r2
 8006be2:	4630      	mov	r0, r6
 8006be4:	f001 fe44 	bl	8008870 <USBH_LL_SetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0);  
 8006be8:	462a      	mov	r2, r5
 8006bea:	7921      	ldrb	r1, [r4, #4]
 8006bec:	4630      	mov	r0, r6
 8006bee:	f001 fe3f 	bl	8008870 <USBH_LL_SetToggle>
 8006bf2:	e787      	b.n	8006b04 <USBH_MSC_BOT_Process+0xd0>
    else if (error == USBH_UNRECOVERED_ERROR)
 8006bf4:	2804      	cmp	r0, #4
 8006bf6:	e7e4      	b.n	8006bc2 <USBH_MSC_BOT_Process+0x18e>
    status = USBH_MSC_BOT_REQ_Reset(phost);
 8006bf8:	f7ff fef4 	bl	80069e4 <USBH_MSC_BOT_REQ_Reset>
    if ( status == USBH_OK)
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	f47f af56 	bne.w	8006aae <USBH_MSC_BOT_Process+0x7a>
      MSC_Handle->hbot.state = BOT_SEND_CBW; 
 8006c02:	2301      	movs	r3, #1
 8006c04:	e749      	b.n	8006a9a <USBH_MSC_BOT_Process+0x66>
        status = USBH_FAIL;
 8006c06:	2002      	movs	r0, #2
 8006c08:	e751      	b.n	8006aae <USBH_MSC_BOT_Process+0x7a>
 8006c0a:	bf00      	nop
 8006c0c:	53425355 	.word	0x53425355

08006c10 <USBH_MSC_SCSI_TestUnitReady>:
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady (USBH_HandleTypeDef *phost, 
                                                uint8_t lun)
{
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c10:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
{
 8006c14:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c16:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 8006c18:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8006c1c:	2d01      	cmp	r5, #1
 8006c1e:	d003      	beq.n	8006c28 <USBH_MSC_SCSI_TestUnitReady+0x18>
 8006c20:	2d02      	cmp	r5, #2
 8006c22:	d017      	beq.n	8006c54 <USBH_MSC_SCSI_TestUnitReady+0x44>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006c24:	2002      	movs	r0, #2
  default:
    break;
  }
  
  return error;
}
 8006c26:	bd70      	pop	{r4, r5, r6, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;     
 8006c28:	2600      	movs	r6, #0
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006c2a:	230a      	movs	r3, #10
 8006c2c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;     
 8006c30:	65e6      	str	r6, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006c32:	f884 6060 	strb.w	r6, [r4, #96]	; 0x60
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006c36:	2210      	movs	r2, #16
 8006c38:	4631      	mov	r1, r6
 8006c3a:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8006c3e:	f002 fd26 	bl	800968e <memset>
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006c42:	2302      	movs	r3, #2
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY; 
 8006c44:	f884 6063 	strb.w	r6, [r4, #99]	; 0x63
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006c48:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006c4c:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    error = USBH_BUSY; 
 8006c50:	4628      	mov	r0, r5
    break;
 8006c52:	bd70      	pop	{r4, r5, r6, pc}
}
 8006c54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    error = USBH_MSC_BOT_Process(phost, lun);
 8006c58:	f7ff beec 	b.w	8006a34 <USBH_MSC_BOT_Process>

08006c5c <USBH_MSC_SCSI_ReadCapacity>:
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity (USBH_HandleTypeDef *phost, 
                                               uint8_t lun,
                                               SCSI_CapacityTypeDef *capacity)
{
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c5c:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
{
 8006c60:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c62:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 8006c64:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8006c68:	2d01      	cmp	r5, #1
{
 8006c6a:	4616      	mov	r6, r2
  switch(MSC_Handle->hbot.cmd_state)
 8006c6c:	d003      	beq.n	8006c76 <USBH_MSC_SCSI_ReadCapacity+0x1a>
 8006c6e:	2d02      	cmp	r5, #2
 8006c70:	d01c      	beq.n	8006cac <USBH_MSC_SCSI_ReadCapacity+0x50>
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8006c72:	2001      	movs	r0, #1
  default:
    break;
  }
  
  return error;
}
 8006c74:	bd70      	pop	{r4, r5, r6, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8006c76:	2308      	movs	r3, #8
 8006c78:	65e3      	str	r3, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006c7a:	2380      	movs	r3, #128	; 0x80
 8006c7c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006c80:	230a      	movs	r3, #10
 8006c82:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006c86:	2210      	movs	r2, #16
 8006c88:	2100      	movs	r1, #0
 8006c8a:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8006c8e:	f002 fcfe 	bl	800968e <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10; 
 8006c92:	2325      	movs	r3, #37	; 0x25
 8006c94:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006c98:	2302      	movs	r3, #2
 8006c9a:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8006c9e:	f104 0310 	add.w	r3, r4, #16
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006ca2:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8006ca6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8006caa:	e7e2      	b.n	8006c72 <USBH_MSC_SCSI_ReadCapacity+0x16>
    error = USBH_MSC_BOT_Process(phost, lun);
 8006cac:	f7ff fec2 	bl	8006a34 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d1df      	bne.n	8006c74 <USBH_MSC_SCSI_ReadCapacity+0x18>
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8006cb4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 8006cb8:	784b      	ldrb	r3, [r1, #1]
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8006cba:	788a      	ldrb	r2, [r1, #2]
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 8006cbc:	041b      	lsls	r3, r3, #16
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8006cbe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006cc2:	78ca      	ldrb	r2, [r1, #3]
 8006cc4:	4313      	orrs	r3, r2
                           (MSC_Handle->hbot.pbuf[1] << 16) | (MSC_Handle->hbot.pbuf[0] << 24);
 8006cc6:	780a      	ldrb	r2, [r1, #0]
 8006cc8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | (MSC_Handle->hbot.pbuf[2] << 8) |\
 8006ccc:	6033      	str	r3, [r6, #0]
      capacity->block_size = MSC_Handle->hbot.pbuf[7] | (MSC_Handle->hbot.pbuf[6] << 8); 
 8006cce:	798a      	ldrb	r2, [r1, #6]
 8006cd0:	79cb      	ldrb	r3, [r1, #7]
 8006cd2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006cd6:	80b3      	strh	r3, [r6, #4]
 8006cd8:	bd70      	pop	{r4, r5, r6, pc}

08006cda <USBH_MSC_SCSI_Inquiry>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry (USBH_HandleTypeDef *phost, 
                                               uint8_t lun, 
                                               SCSI_StdInquiryDataTypeDef *inquiry)
{
 8006cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cdc:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8006ce0:	69dc      	ldr	r4, [r3, #28]
  switch(MSC_Handle->hbot.cmd_state)
 8006ce2:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8006ce6:	2d01      	cmp	r5, #1
{
 8006ce8:	460f      	mov	r7, r1
 8006cea:	4616      	mov	r6, r2
  switch(MSC_Handle->hbot.cmd_state)
 8006cec:	d003      	beq.n	8006cf6 <USBH_MSC_SCSI_Inquiry+0x1c>
 8006cee:	2d02      	cmp	r5, #2
 8006cf0:	d027      	beq.n	8006d42 <USBH_MSC_SCSI_Inquiry+0x68>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006cf2:	2502      	movs	r5, #2
 8006cf4:	e023      	b.n	8006d3e <USBH_MSC_SCSI_Inquiry+0x64>
  {
  case BOT_CMD_SEND:  
    
    /*Prepare the CBW and relevent field*/
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006cf6:	2380      	movs	r3, #128	; 0x80
 8006cf8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006cfc:	230a      	movs	r3, #10
 8006cfe:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8006d02:	2300      	movs	r3, #0
 8006d04:	f8c4 3067 	str.w	r3, [r4, #103]	; 0x67
 8006d08:	f8a4 306b 	strh.w	r3, [r4, #107]	; 0x6b
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY; 
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);    
    MSC_Handle->hbot.cbw.field.CB[2]  = 0;    
 8006d0c:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0;    
 8006d10:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24;    
    MSC_Handle->hbot.cbw.field.CB[5]  = 0;    
 8006d14:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
        
    MSC_Handle->hbot.state = BOT_SEND_CBW;

    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006d18:	2302      	movs	r3, #2
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006d1a:	2224      	movs	r2, #36	; 0x24
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY; 
 8006d1c:	2112      	movs	r1, #18
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);    
 8006d1e:	017f      	lsls	r7, r7, #5
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006d20:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8006d24:	f104 0310 	add.w	r3, r4, #16
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006d28:	65e2      	str	r2, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY; 
 8006d2a:	f884 1063 	strb.w	r1, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);    
 8006d2e:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[4]  = 0x24;    
 8006d32:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006d36:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8006d3a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  default:
    break;
  }
  
  return error;
}
 8006d3e:	4628      	mov	r0, r5
 8006d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error = USBH_MSC_BOT_Process(phost, lun);
 8006d42:	f7ff fe77 	bl	8006a34 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 8006d46:	4605      	mov	r5, r0
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	d1f8      	bne.n	8006d3e <USBH_MSC_SCSI_Inquiry+0x64>
      USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8006d4c:	4601      	mov	r1, r0
 8006d4e:	2222      	movs	r2, #34	; 0x22
 8006d50:	4630      	mov	r0, r6
 8006d52:	f002 fc9c 	bl	800968e <memset>
      inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1F;
 8006d56:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	f003 031f 	and.w	r3, r3, #31
 8006d60:	7073      	strb	r3, [r6, #1]
      inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5;  
 8006d62:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	095b      	lsrs	r3, r3, #5
 8006d6a:	7033      	strb	r3, [r6, #0]
      inquiry->RemovableMedia = (MSC_Handle->hbot.pbuf[1] & 0x80)== 0x80;
 8006d6c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006d70:	785b      	ldrb	r3, [r3, #1]
 8006d72:	09db      	lsrs	r3, r3, #7
 8006d74:	70b3      	strb	r3, [r6, #2]
      USBH_memcpy (inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8);
 8006d76:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006d7a:	f852 3f08 	ldr.w	r3, [r2, #8]!
 8006d7e:	f8c6 3003 	str.w	r3, [r6, #3]
 8006d82:	6853      	ldr	r3, [r2, #4]
 8006d84:	f8c6 3007 	str.w	r3, [r6, #7]
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16);
 8006d88:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006d8c:	3310      	adds	r3, #16
 8006d8e:	f106 020c 	add.w	r2, r6, #12
 8006d92:	f103 0110 	add.w	r1, r3, #16
 8006d96:	f853 0b04 	ldr.w	r0, [r3], #4
 8006d9a:	f842 0b04 	str.w	r0, [r2], #4
 8006d9e:	428b      	cmp	r3, r1
 8006da0:	d1f9      	bne.n	8006d96 <USBH_MSC_SCSI_Inquiry+0xbc>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4);    
 8006da2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	f8c6 301d 	str.w	r3, [r6, #29]
 8006dac:	e7c7      	b.n	8006d3e <USBH_MSC_SCSI_Inquiry+0x64>

08006dae <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense (USBH_HandleTypeDef *phost, 
                                               uint8_t lun, 
                                               SCSI_SenseTypeDef *sense_data)
{
 8006dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006db0:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 8006db4:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 8006db6:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8006dba:	2d01      	cmp	r5, #1
{
 8006dbc:	460f      	mov	r7, r1
 8006dbe:	4616      	mov	r6, r2
  switch(MSC_Handle->hbot.cmd_state)
 8006dc0:	d003      	beq.n	8006dca <USBH_MSC_SCSI_RequestSense+0x1c>
 8006dc2:	2d02      	cmp	r5, #2
 8006dc4:	d029      	beq.n	8006e1a <USBH_MSC_SCSI_RequestSense+0x6c>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006dc6:	2002      	movs	r0, #2
  default:
    break;
  }
  
  return error;
}
 8006dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006dca:	2380      	movs	r3, #128	; 0x80
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8006dcc:	260e      	movs	r6, #14
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006dce:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006dd2:	230a      	movs	r3, #10
 8006dd4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8006dd8:	65e6      	str	r6, [r4, #92]	; 0x5c
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006dda:	2210      	movs	r2, #16
 8006ddc:	2100      	movs	r1, #0
 8006dde:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8006de2:	f002 fc54 	bl	800968e <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE; 
 8006de6:	2303      	movs	r3, #3
 8006de8:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    MSC_Handle->hbot.cbw.field.CB[2]  = 0; 
 8006dec:	2300      	movs	r3, #0
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5); 
 8006dee:	017f      	lsls	r7, r7, #5
    MSC_Handle->hbot.cbw.field.CB[2]  = 0; 
 8006df0:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = 0; 
 8006df4:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[5]  = 0;       
 8006df8:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5); 
 8006e02:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8006e06:	f104 0310 	add.w	r3, r4, #16
    MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8006e0a:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006e0e:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.pbuf = (uint8_t *)MSC_Handle->hbot.data;
 8006e12:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    error = USBH_BUSY; 
 8006e16:	4628      	mov	r0, r5
    break;
 8006e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error = USBH_MSC_BOT_Process(phost, lun);
 8006e1a:	f7ff fe0b 	bl	8006a34 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	d1d2      	bne.n	8006dc8 <USBH_MSC_SCSI_RequestSense+0x1a>
      sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0F;  
 8006e22:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006e26:	789b      	ldrb	r3, [r3, #2]
 8006e28:	f003 030f 	and.w	r3, r3, #15
 8006e2c:	7033      	strb	r3, [r6, #0]
      sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8006e2e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006e32:	7b1b      	ldrb	r3, [r3, #12]
 8006e34:	7073      	strb	r3, [r6, #1]
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8006e36:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006e3a:	7b5b      	ldrb	r3, [r3, #13]
 8006e3c:	70b3      	strb	r3, [r6, #2]
 8006e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e40 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8006e40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e42:	461e      	mov	r6, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e44:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
{
 8006e48:	9201      	str	r2, [sp, #4]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e4a:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 8006e4c:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8006e50:	2d01      	cmp	r5, #1
 8006e52:	d003      	beq.n	8006e5c <USBH_MSC_SCSI_Write+0x1c>
 8006e54:	2d02      	cmp	r5, #2
 8006e56:	d034      	beq.n	8006ec2 <USBH_MSC_SCSI_Write+0x82>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006e58:	2002      	movs	r0, #2
 8006e5a:	e030      	b.n	8006ebe <USBH_MSC_SCSI_Write+0x7e>
  {
  case BOT_CMD_SEND:  
    
    /*Prepare the CBW and relevent field*/
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 8006e5c:	9a06      	ldr	r2, [sp, #24]
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006e5e:	230a      	movs	r3, #10
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 8006e60:	0252      	lsls	r2, r2, #9
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006e62:	2100      	movs	r1, #0
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 8006e64:	65e2      	str	r2, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006e66:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006e6a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006e6e:	2210      	movs	r2, #16
 8006e70:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8006e74:	f002 fc0b 	bl	800968e <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10; 
 8006e78:	232a      	movs	r3, #42	; 0x2a
 8006e7a:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    
    /*logical block address*/
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)&address)[3]);
 8006e7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006e82:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)&address)[2]);
 8006e86:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006e8a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)&address)[1]);
 8006e8e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006e92:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)&address)[0]);
 8006e96:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006e9a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    
    
    /*Transfer length */
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)&length)[1]) ; 
 8006e9e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8006ea2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)&length)[0]) ; 
 8006ea6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006eaa:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b

    
    MSC_Handle->hbot.state = BOT_SEND_CBW;
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006eae:	2302      	movs	r3, #2
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006eb0:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006eb4:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = pbuf;
 8006eb8:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    error = USBH_BUSY; 
 8006ebc:	4628      	mov	r0, r5
  default:
    break;
  }
  
  return error;
}
 8006ebe:	b002      	add	sp, #8
 8006ec0:	bd70      	pop	{r4, r5, r6, pc}
    error = USBH_MSC_BOT_Process(phost, lun);
 8006ec2:	f7ff fdb7 	bl	8006a34 <USBH_MSC_BOT_Process>
    break;
 8006ec6:	e7fa      	b.n	8006ebe <USBH_MSC_SCSI_Write+0x7e>

08006ec8 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8006ec8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006eca:	461e      	mov	r6, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ecc:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
{
 8006ed0:	9201      	str	r2, [sp, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ed2:	69dc      	ldr	r4, [r3, #28]
  
  switch(MSC_Handle->hbot.cmd_state)
 8006ed4:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8006ed8:	2d01      	cmp	r5, #1
 8006eda:	d003      	beq.n	8006ee4 <USBH_MSC_SCSI_Read+0x1c>
 8006edc:	2d02      	cmp	r5, #2
 8006ede:	d035      	beq.n	8006f4c <USBH_MSC_SCSI_Read+0x84>
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006ee0:	2002      	movs	r0, #2
 8006ee2:	e031      	b.n	8006f48 <USBH_MSC_SCSI_Read+0x80>
  {
  case BOT_CMD_SEND:  
    
    /*Prepare the CBW and relevent field*/
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 8006ee4:	9a06      	ldr	r2, [sp, #24]
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006ee6:	2380      	movs	r3, #128	; 0x80
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 8006ee8:	0252      	lsls	r2, r2, #9
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006eea:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006eee:	230a      	movs	r3, #10
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * 512;
 8006ef0:	65e2      	str	r2, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006ef2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
    
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006ef6:	2210      	movs	r2, #16
 8006ef8:	2100      	movs	r1, #0
 8006efa:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8006efe:	f002 fbc6 	bl	800968e <memset>
    MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10; 
 8006f02:	2328      	movs	r3, #40	; 0x28
 8006f04:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    
    /*logical block address*/
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)&address)[3]);
 8006f08:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006f0c:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)&address)[2]);
 8006f10:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006f14:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)&address)[1]);
 8006f18:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006f1c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)&address)[0]);
 8006f20:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006f24:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    
    
    /*Transfer length */
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)&length)[1]) ; 
 8006f28:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8006f2c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)&length)[0]) ; 
 8006f30:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8006f34:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b

    
    MSC_Handle->hbot.state = BOT_SEND_CBW;
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006f38:	2302      	movs	r3, #2
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006f3a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006f3e:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = pbuf;
 8006f42:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    error = USBH_BUSY; 
 8006f46:	4628      	mov	r0, r5
  default:
    break;
  }
  
  return error;
}
 8006f48:	b002      	add	sp, #8
 8006f4a:	bd70      	pop	{r4, r5, r6, pc}
    error = USBH_MSC_BOT_Process(phost, lun);
 8006f4c:	f7ff fd72 	bl	8006a34 <USBH_MSC_BOT_Process>
    break;
 8006f50:	e7fa      	b.n	8006f48 <USBH_MSC_SCSI_Read+0x80>

08006f52 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006f52:	f500 7353 	add.w	r3, r0, #844	; 0x34c
 8006f56:	f500 7262 	add.w	r2, r0, #904	; 0x388
  uint32_t i = 0;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0;
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d1fb      	bne.n	8006f5c <DeInitStateMachine+0xa>
 8006f64:	f100 021c 	add.w	r2, r0, #28
 8006f68:	f500 7107 	add.w	r1, r0, #540	; 0x21c
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 8006f72:	4291      	cmp	r1, r2
 8006f74:	d1fb      	bne.n	8006f6e <DeInitStateMachine+0x1c>
  }
  
  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8006f76:	2201      	movs	r2, #1
  phost->Timer = 0;  
  
  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8006f78:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 8006f7a:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 8006f7c:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 8006f7e:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0;  
 8006f80:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
  phost->Control.state = CTRL_SETUP;
 8006f84:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8006f86:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0;
 8006f88:	7643      	strb	r3, [r0, #25]
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f8a:	f880 321c 	strb.w	r3, [r0, #540]	; 0x21c
  phost->device.speed   = USBH_SPEED_FULL;
 8006f8e:	f880 221d 	strb.w	r2, [r0, #541]	; 0x21d
  
  return USBH_OK;
}
 8006f92:	2000      	movs	r0, #0
 8006f94:	4770      	bx	lr

08006f96 <USBH_Init>:
{
 8006f96:	b538      	push	{r3, r4, r5, lr}
 8006f98:	460d      	mov	r5, r1
  if(phost == NULL)
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	b180      	cbz	r0, 8006fc0 <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 8006f9e:	2300      	movs	r3, #0
  phost->id = id;
 8006fa0:	f880 238c 	strb.w	r2, [r0, #908]	; 0x38c
  phost->pActiveClass = NULL;
 8006fa4:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
  phost->ClassNumber = 0;
 8006fa8:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
  DeInitStateMachine(phost);
 8006fac:	f7ff ffd1 	bl	8006f52 <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8006fb0:	b10d      	cbz	r5, 8006fb6 <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 8006fb2:	f8c4 5394 	str.w	r5, [r4, #916]	; 0x394
  USBH_LL_Init(phost);
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f001 fbcc 	bl	8008754 <USBH_LL_Init>
  return USBH_OK;
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL; 
 8006fc0:	2002      	movs	r0, #2
}
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}

08006fc4 <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(pclass != 0)
 8006fc4:	b149      	cbz	r1, 8006fda <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006fc6:	f8d0 3348 	ldr.w	r3, [r0, #840]	; 0x348
 8006fca:	b933      	cbnz	r3, 8006fda <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
 8006fd2:	f8c0 1340 	str.w	r1, [r0, #832]	; 0x340
      status = USBH_OK;
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL; 
 8006fda:	2002      	movs	r0, #2
  }
  
  return status;
}
 8006fdc:	4770      	bx	lr

08006fde <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006fde:	f890 3236 	ldrb.w	r3, [r0, #566]	; 0x236
 8006fe2:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8006fe4:	bf86      	itte	hi
 8006fe6:	f880 121f 	strbhi.w	r1, [r0, #543]	; 0x21f
  USBH_StatusTypeDef   status = USBH_OK;
 8006fea:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL; 
 8006fec:	2002      	movls	r0, #2
  }
  return status;  
}
 8006fee:	4770      	bx	lr

08006ff0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006ff0:	b530      	push	{r4, r5, lr}
 8006ff2:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;  
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 8006ff4:	f890 5241 	ldrb.w	r5, [r0, #577]	; 0x241
 8006ff8:	428d      	cmp	r5, r1
 8006ffa:	d001      	beq.n	8007000 <USBH_FindInterface+0x10>
 8006ffc:	29ff      	cmp	r1, #255	; 0xff
 8006ffe:	d10d      	bne.n	800701c <USBH_FindInterface+0x2c>
 8007000:	f890 5242 	ldrb.w	r5, [r0, #578]	; 0x242
 8007004:	4295      	cmp	r5, r2
 8007006:	d001      	beq.n	800700c <USBH_FindInterface+0x1c>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8007008:	2aff      	cmp	r2, #255	; 0xff
 800700a:	d107      	bne.n	800701c <USBH_FindInterface+0x2c>
 800700c:	f890 5243 	ldrb.w	r5, [r0, #579]	; 0x243
 8007010:	429d      	cmp	r5, r3
 8007012:	d101      	bne.n	8007018 <USBH_FindInterface+0x28>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
    {
      return  if_ix;
 8007014:	b2e0      	uxtb	r0, r4
 8007016:	bd30      	pop	{r4, r5, pc}
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 8007018:	2bff      	cmp	r3, #255	; 0xff
 800701a:	d0fb      	beq.n	8007014 <USBH_FindInterface+0x24>
 800701c:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800701e:	2c0a      	cmp	r4, #10
 8007020:	f100 001a 	add.w	r0, r0, #26
 8007024:	d1e6      	bne.n	8006ff4 <USBH_FindInterface+0x4>
    }
    if_ix++;
  }
  return 0xFF;
 8007026:	20ff      	movs	r0, #255	; 0xff
}
 8007028:	bd30      	pop	{r4, r5, pc}

0800702a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800702a:	b510      	push	{r4, lr}
 800702c:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800702e:	f001 fbb9 	bl	80087a4 <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 8007032:	2101      	movs	r1, #1
 8007034:	4620      	mov	r0, r4
 8007036:	f001 fc0b 	bl	8008850 <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
}
 800703a:	2000      	movs	r0, #0
 800703c:	bd10      	pop	{r4, pc}

0800703e <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800703e:	b530      	push	{r4, r5, lr}
 8007040:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007042:	2302      	movs	r3, #2
 8007044:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0;
  
  switch (phost->gState)
 8007048:	7803      	ldrb	r3, [r0, #0]
{
 800704a:	4604      	mov	r4, r0
  switch (phost->gState)
 800704c:	2b0a      	cmp	r3, #10
 800704e:	d817      	bhi.n	8007080 <USBH_Process+0x42>
 8007050:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007054:	0016000b 	.word	0x0016000b
 8007058:	01010019 	.word	0x01010019
 800705c:	00490016 	.word	0x00490016
 8007060:	00b800e9 	.word	0x00b800e9
 8007064:	00ca00c1 	.word	0x00ca00c1
 8007068:	00f9      	.short	0x00f9
  {
  case HOST_IDLE :
    
    if (phost->device.is_connected)  
 800706a:	f890 321e 	ldrb.w	r3, [r0, #542]	; 0x21e
 800706e:	b13b      	cbz	r3, 8007080 <USBH_Process+0x42>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT; 
 8007070:	2301      	movs	r3, #1
 8007072:	7003      	strb	r3, [r0, #0]
      USBH_Delay(200); 
 8007074:	20c8      	movs	r0, #200	; 0xc8
 8007076:	f001 fc1b 	bl	80088b0 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800707a:	4620      	mov	r0, r4
 800707c:	f001 fbae 	bl	80087dc <USBH_LL_ResetPort>
  case HOST_ABORT_STATE:
  default :
    break;
  }
 return USBH_OK;  
}
 8007080:	2000      	movs	r0, #0
 8007082:	b007      	add	sp, #28
 8007084:	bd30      	pop	{r4, r5, pc}
    USBH_Delay(100); 
 8007086:	2064      	movs	r0, #100	; 0x64
 8007088:	f001 fc12 	bl	80088b0 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800708c:	4620      	mov	r0, r4
 800708e:	f001 fb97 	bl	80087c0 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 8007092:	2305      	movs	r3, #5
 8007094:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8007096:	f884 021d 	strb.w	r0, [r4, #541]	; 0x21d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 800709a:	2100      	movs	r1, #0
 800709c:	4620      	mov	r0, r4
 800709e:	f000 fbaf 	bl	8007800 <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 80070a2:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 80070a4:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 80070a6:	4620      	mov	r0, r4
 80070a8:	f000 fbaa 	bl	8007800 <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 80070ac:	79a2      	ldrb	r2, [r4, #6]
 80070ae:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 80070b2:	7120      	strb	r0, [r4, #4]
 80070b4:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 80070b6:	9202      	str	r2, [sp, #8]
 80070b8:	2500      	movs	r5, #0
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
      
      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 80070ba:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
 80070be:	9200      	str	r2, [sp, #0]
 80070c0:	9501      	str	r5, [sp, #4]
 80070c2:	2280      	movs	r2, #128	; 0x80
 80070c4:	4620      	mov	r0, r4
 80070c6:	f000 fb87 	bl	80077d8 <USBH_OpenPipe>
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80070ca:	79a2      	ldrb	r2, [r4, #6]
 80070cc:	9202      	str	r2, [sp, #8]
 80070ce:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
 80070d2:	9200      	str	r2, [sp, #0]
 80070d4:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 80070d8:	7961      	ldrb	r1, [r4, #5]
 80070da:	9501      	str	r5, [sp, #4]
 80070dc:	462a      	mov	r2, r5
 80070de:	4620      	mov	r0, r4
 80070e0:	f000 fb7a 	bl	80077d8 <USBH_OpenPipe>
 80070e4:	e7cc      	b.n	8007080 <USBH_Process+0x42>
  switch (phost->EnumState)
 80070e6:	7843      	ldrb	r3, [r0, #1]
 80070e8:	2b07      	cmp	r3, #7
 80070ea:	d8c9      	bhi.n	8007080 <USBH_Process+0x42>
 80070ec:	e8df f003 	tbb	[pc, r3]
 80070f0:	2d1c1404 	.word	0x2d1c1404
 80070f4:	55483c34 	.word	0x55483c34
    if ( USBH_Get_DevDesc(phost, 8) == USBH_OK)
 80070f8:	2108      	movs	r1, #8
 80070fa:	f000 f9d3 	bl	80074a4 <USBH_Get_DevDesc>
 80070fe:	4605      	mov	r5, r0
 8007100:	2800      	cmp	r0, #0
 8007102:	d1bd      	bne.n	8007080 <USBH_Process+0x42>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007104:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007106:	f894 2227 	ldrb.w	r2, [r4, #551]	; 0x227
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800710a:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 800710c:	7921      	ldrb	r1, [r4, #4]
 800710e:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007112:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 8007114:	9202      	str	r2, [sp, #8]
 8007116:	e7d0      	b.n	80070ba <USBH_Process+0x7c>
    }
    break;
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8007118:	2112      	movs	r1, #18
 800711a:	f000 f9c3 	bl	80074a4 <USBH_Get_DevDesc>
 800711e:	2800      	cmp	r0, #0
 8007120:	d1ae      	bne.n	8007080 <USBH_Process+0x42>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );  
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );  
      
      phost->EnumState = ENUM_SET_ADDR;
 8007122:	2302      	movs	r3, #2
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost, 
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 8007124:	7063      	strb	r3, [r4, #1]
 8007126:	e7ab      	b.n	8007080 <USBH_Process+0x42>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8007128:	2101      	movs	r1, #1
 800712a:	f000 facc 	bl	80076c6 <USBH_SetAddress>
 800712e:	4605      	mov	r5, r0
 8007130:	2800      	cmp	r0, #0
 8007132:	d1a5      	bne.n	8007080 <USBH_Process+0x42>
      USBH_Delay(2);
 8007134:	2002      	movs	r0, #2
 8007136:	f001 fbbb 	bl	80088b0 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 800713a:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 800713c:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 800713e:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007140:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
      USBH_OpenPipe (phost,
 8007144:	7921      	ldrb	r1, [r4, #4]
 8007146:	79a2      	ldrb	r2, [r4, #6]
 8007148:	e7e4      	b.n	8007114 <USBH_Process+0xd6>
    if ( USBH_Get_CfgDesc(phost, 
 800714a:	2109      	movs	r1, #9
 800714c:	f000 f9ff 	bl	800754e <USBH_Get_CfgDesc>
 8007150:	2800      	cmp	r0, #0
 8007152:	d195      	bne.n	8007080 <USBH_Process+0x42>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 8007154:	2304      	movs	r3, #4
 8007156:	e7e5      	b.n	8007124 <USBH_Process+0xe6>
    }
    break;
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost, 
 8007158:	f8b0 1234 	ldrh.w	r1, [r0, #564]	; 0x234
 800715c:	f000 f9f7 	bl	800754e <USBH_Get_CfgDesc>
 8007160:	2800      	cmp	r0, #0
 8007162:	d18d      	bne.n	8007080 <USBH_Process+0x42>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
 8007164:	2305      	movs	r3, #5
 8007166:	e7dd      	b.n	8007124 <USBH_Process+0xe6>
    }
    break;
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device.DevDesc.iManufacturer != 0)
 8007168:	f890 122e 	ldrb.w	r1, [r0, #558]	; 0x22e
 800716c:	b131      	cbz	r1, 800717c <USBH_Process+0x13e>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(phost,
 800716e:	23ff      	movs	r3, #255	; 0xff
 8007170:	f100 021c 	add.w	r2, r0, #28
 8007174:	f000 fa82 	bl	800767c <USBH_Get_StringDesc>
 8007178:	2800      	cmp	r0, #0
 800717a:	d181      	bne.n	8007080 <USBH_Process+0x42>
                                phost->device.Data , 
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800717c:	2306      	movs	r3, #6
 800717e:	e7d1      	b.n	8007124 <USBH_Process+0xe6>
#endif       
    }
    break;
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device.DevDesc.iProduct != 0)
 8007180:	f890 122f 	ldrb.w	r1, [r0, #559]	; 0x22f
 8007184:	b139      	cbz	r1, 8007196 <USBH_Process+0x158>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8007186:	23ff      	movs	r3, #255	; 0xff
 8007188:	f100 021c 	add.w	r2, r0, #28
 800718c:	f000 fa76 	bl	800767c <USBH_Get_StringDesc>
 8007190:	2800      	cmp	r0, #0
 8007192:	f47f af75 	bne.w	8007080 <USBH_Process+0x42>
                               phost->device.Data, 
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
 8007196:	2307      	movs	r3, #7
 8007198:	e7c4      	b.n	8007124 <USBH_Process+0xe6>
#endif        
    } 
    break;
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device.DevDesc.iSerialNumber != 0)
 800719a:	f890 1230 	ldrb.w	r1, [r0, #560]	; 0x230
 800719e:	b139      	cbz	r1, 80071b0 <USBH_Process+0x172>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(phost,
 80071a0:	23ff      	movs	r3, #255	; 0xff
 80071a2:	f100 021c 	add.w	r2, r0, #28
 80071a6:	f000 fa69 	bl	800767c <USBH_Get_StringDesc>
 80071aa:	2800      	cmp	r0, #0
 80071ac:	f47f af68 	bne.w	8007080 <USBH_Process+0x42>
      phost->device.current_interface = 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
      if(phost->device.DevDesc.bNumConfigurations == 1)
 80071b6:	f894 3231 	ldrb.w	r3, [r4, #561]	; 0x231
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d009      	beq.n	80071d2 <USBH_Process+0x194>
        phost->gState  = HOST_INPUT; 
 80071be:	2307      	movs	r3, #7
      phost->gState  = HOST_ABORT_STATE;
 80071c0:	7023      	strb	r3, [r4, #0]
 80071c2:	e75d      	b.n	8007080 <USBH_Process+0x42>
      if(phost->pUser != NULL)
 80071c4:	f8d0 3394 	ldr.w	r3, [r0, #916]	; 0x394
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f43f af59 	beq.w	8007080 <USBH_Process+0x42>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80071ce:	2101      	movs	r1, #1
 80071d0:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80071d2:	2308      	movs	r3, #8
 80071d4:	e7f4      	b.n	80071c0 <USBH_Process+0x182>
    if (USBH_SetCfg(phost, phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80071d6:	f890 1237 	ldrb.w	r1, [r0, #567]	; 0x237
 80071da:	f000 fa82 	bl	80076e2 <USBH_SetCfg>
 80071de:	2800      	cmp	r0, #0
 80071e0:	f47f af4e 	bne.w	8007080 <USBH_Process+0x42>
      phost->gState  = HOST_CHECK_CLASS;
 80071e4:	2309      	movs	r3, #9
 80071e6:	e7eb      	b.n	80071c0 <USBH_Process+0x182>
    if(phost->ClassNumber == 0)
 80071e8:	f8d0 3348 	ldr.w	r3, [r0, #840]	; 0x348
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f43f af47 	beq.w	8007080 <USBH_Process+0x42>
      phost->pActiveClass = NULL;
 80071f2:	2300      	movs	r3, #0
 80071f4:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80071f8:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 80071fc:	f890 2241 	ldrb.w	r2, [r0, #577]	; 0x241
 8007200:	7919      	ldrb	r1, [r3, #4]
 8007202:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 8007204:	bf08      	it	eq
 8007206:	f8c0 3344 	streq.w	r3, [r0, #836]	; 0x344
      if(phost->pActiveClass != NULL)
 800720a:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800720e:	b1c3      	cbz	r3, 8007242 <USBH_Process+0x204>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	4798      	blx	r3
 8007214:	b9a8      	cbnz	r0, 8007242 <USBH_Process+0x204>
          phost->gState  = HOST_CLASS_REQUEST; 
 8007216:	2306      	movs	r3, #6
 8007218:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 800721a:	2103      	movs	r1, #3
 800721c:	f8d4 3394 	ldr.w	r3, [r4, #916]	; 0x394
 8007220:	4620      	mov	r0, r4
 8007222:	4798      	blx	r3
 8007224:	e72c      	b.n	8007080 <USBH_Process+0x42>
    if(phost->pActiveClass != NULL)
 8007226:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800722a:	b153      	cbz	r3, 8007242 <USBH_Process+0x204>
      status = phost->pActiveClass->Requests(phost);
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	4798      	blx	r3
 8007230:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 8007234:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8007238:	2b00      	cmp	r3, #0
 800723a:	f47f af21 	bne.w	8007080 <USBH_Process+0x42>
        phost->gState  = HOST_CLASS;        
 800723e:	230a      	movs	r3, #10
 8007240:	e7be      	b.n	80071c0 <USBH_Process+0x182>
      phost->gState  = HOST_ABORT_STATE;
 8007242:	230c      	movs	r3, #12
 8007244:	e7bc      	b.n	80071c0 <USBH_Process+0x182>
    if(phost->pActiveClass != NULL)
 8007246:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800724a:	2b00      	cmp	r3, #0
 800724c:	f43f af18 	beq.w	8007080 <USBH_Process+0x42>
      phost->pActiveClass->BgndProcess(phost);
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	4798      	blx	r3
 8007254:	e714      	b.n	8007080 <USBH_Process+0x42>
    DeInitStateMachine(phost);  
 8007256:	f7ff fe7c 	bl	8006f52 <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 800725a:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 800725e:	2b00      	cmp	r3, #0
 8007260:	f43f af0e 	beq.w	8007080 <USBH_Process+0x42>
      phost->pActiveClass->DeInit(phost); 
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	4620      	mov	r0, r4
 8007268:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800726a:	2300      	movs	r3, #0
 800726c:	f8c4 3344 	str.w	r3, [r4, #836]	; 0x344
 return USBH_OK;  
 8007270:	e706      	b.n	8007080 <USBH_Process+0x42>

08007272 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 8007272:	f8c0 1388 	str.w	r1, [r0, #904]	; 0x388
 8007276:	4770      	bx	lr

08007278 <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
  phost->Timer ++;
 8007278:	f8d0 2388 	ldr.w	r2, [r0, #904]	; 0x388
 800727c:	3201      	adds	r2, #1
 800727e:	f8c0 2388 	str.w	r2, [r0, #904]	; 0x388
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8007282:	7802      	ldrb	r2, [r0, #0]
 8007284:	2a0a      	cmp	r2, #10
 8007286:	d104      	bne.n	8007292 <USBH_LL_IncTimer+0x1a>
 8007288:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800728c:	b10b      	cbz	r3, 8007292 <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	4718      	bx	r3
 8007292:	4770      	bx	lr

08007294 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 8007294:	7802      	ldrb	r2, [r0, #0]
{
 8007296:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 8007298:	b94a      	cbnz	r2, 80072ae <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1;
    
    if(phost->pUser != NULL)
 800729a:	f8d0 3394 	ldr.w	r3, [r0, #916]	; 0x394
    phost->device.is_connected = 1;
 800729e:	2201      	movs	r2, #1
 80072a0:	f880 221e 	strb.w	r2, [r0, #542]	; 0x21e
    if(phost->pUser != NULL)
 80072a4:	b10b      	cbz	r3, 80072aa <USBH_LL_Connect+0x16>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 80072a6:	2104      	movs	r1, #4
 80072a8:	4798      	blx	r3
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
}
 80072aa:	2000      	movs	r0, #0
 80072ac:	bd08      	pop	{r3, pc}
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 80072ae:	7802      	ldrb	r2, [r0, #0]
 80072b0:	2a01      	cmp	r2, #1
    phost->gState = HOST_DEV_ATTACHED ;
 80072b2:	bf04      	itt	eq
 80072b4:	2202      	moveq	r2, #2
 80072b6:	7002      	strbeq	r2, [r0, #0]
 80072b8:	e7f7      	b.n	80072aa <USBH_LL_Connect+0x16>

080072ba <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80072ba:	b510      	push	{r4, lr}
 80072bc:	4604      	mov	r4, r0
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 80072be:	f001 fa78 	bl	80087b2 <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80072c2:	7921      	ldrb	r1, [r4, #4]
 80072c4:	4620      	mov	r0, r4
 80072c6:	f000 fab3 	bl	8007830 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 80072ca:	7961      	ldrb	r1, [r4, #5]
 80072cc:	4620      	mov	r0, r4
 80072ce:	f000 faaf 	bl	8007830 <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 80072d2:	2300      	movs	r3, #0
 80072d4:	f884 321e 	strb.w	r3, [r4, #542]	; 0x21e
   
  if(phost->pUser != NULL)
 80072d8:	f8d4 3394 	ldr.w	r3, [r4, #916]	; 0x394
 80072dc:	b113      	cbz	r3, 80072e4 <USBH_LL_Disconnect+0x2a>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80072de:	2105      	movs	r1, #5
 80072e0:	4620      	mov	r0, r4
 80072e2:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80072e4:	4620      	mov	r0, r4
 80072e6:	f001 fa5d 	bl	80087a4 <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 80072ea:	2303      	movs	r3, #3
 80072ec:	7023      	strb	r3, [r4, #0]
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
}
 80072ee:	2000      	movs	r0, #0
 80072f0:	bd10      	pop	{r4, pc}

080072f2 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 80072f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072f4:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 80072f6:	7880      	ldrb	r0, [r0, #2]
 80072f8:	2801      	cmp	r0, #1
 80072fa:	d003      	beq.n	8007304 <USBH_CtlReq+0x12>
 80072fc:	2802      	cmp	r0, #2
 80072fe:	d008      	beq.n	8007312 <USBH_CtlReq+0x20>
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 8007300:	2001      	movs	r0, #1
 8007302:	e004      	b.n	800730e <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 8007304:	2302      	movs	r3, #2
    phost->Control.buff = buff; 
 8007306:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 8007308:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;  
 800730a:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 800730c:	70a3      	strb	r3, [r4, #2]
}
 800730e:	b003      	add	sp, #12
 8007310:	bd30      	pop	{r4, r5, pc}
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  
  switch (phost->Control.state)
 8007312:	7e23      	ldrb	r3, [r4, #24]
 8007314:	3b01      	subs	r3, #1
 8007316:	2b0a      	cmp	r3, #10
 8007318:	d8f2      	bhi.n	8007300 <USBH_CtlReq+0xe>
 800731a:	e8df f003 	tbb	[pc, r3]
 800731e:	0f06      	.short	0x0f06
 8007320:	4a3d3126 	.word	0x4a3d3126
 8007324:	897c6b60 	.word	0x897c6b60
 8007328:	92          	.byte	0x92
 8007329:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (phost, 
 800732a:	7962      	ldrb	r2, [r4, #5]
 800732c:	f104 0110 	add.w	r1, r4, #16
 8007330:	4620      	mov	r0, r4
 8007332:	f000 f9f2 	bl	800771a <USBH_CtlSendSetup>
	                   (uint8_t *)phost->Control.setup.d8 , 
	                   phost->Control.pipe_out); 
    
    phost->Control.state = CTRL_SETUP_WAIT; 
 8007336:	2302      	movs	r3, #2
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
    
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 8007338:	7623      	strb	r3, [r4, #24]
 800733a:	e7e1      	b.n	8007300 <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 800733c:	7961      	ldrb	r1, [r4, #5]
 800733e:	4620      	mov	r0, r4
 8007340:	f001 fa82 	bl	8008848 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8007344:	2801      	cmp	r0, #1
 8007346:	d123      	bne.n	8007390 <USBH_CtlReq+0x9e>
      if (phost->Control.setup.b.wLength.w != 0 )
 8007348:	8ae2      	ldrh	r2, [r4, #22]
 800734a:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800734e:	b132      	cbz	r2, 800735e <USBH_CtlReq+0x6c>
        if (direction == USB_D2H)
 8007350:	2b00      	cmp	r3, #0
 8007352:	da02      	bge.n	800735a <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_DATA_IN;
 8007354:	2303      	movs	r3, #3
 8007356:	7623      	strb	r3, [r4, #24]
 8007358:	e7d9      	b.n	800730e <USBH_CtlReq+0x1c>
          phost->Control.state = CTRL_DATA_OUT;
 800735a:	2305      	movs	r3, #5
 800735c:	e7ec      	b.n	8007338 <USBH_CtlReq+0x46>
        if (direction == USB_D2H)
 800735e:	2b00      	cmp	r3, #0
 8007360:	da01      	bge.n	8007366 <USBH_CtlReq+0x74>
      phost->Control.state = CTRL_STATUS_OUT;
 8007362:	2309      	movs	r3, #9
 8007364:	e7e8      	b.n	8007338 <USBH_CtlReq+0x46>
          phost->Control.state = CTRL_STATUS_IN;
 8007366:	2307      	movs	r3, #7
 8007368:	e7e6      	b.n	8007338 <USBH_CtlReq+0x46>
     phost->Control.timer = phost->Timer;
 800736a:	f8d4 3388 	ldr.w	r3, [r4, #904]	; 0x388
 800736e:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 8007370:	89a2      	ldrh	r2, [r4, #12]
 8007372:	7923      	ldrb	r3, [r4, #4]
 8007374:	68a1      	ldr	r1, [r4, #8]
 8007376:	4620      	mov	r0, r4
 8007378:	f000 f9f7 	bl	800776a <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 800737c:	2304      	movs	r3, #4
 800737e:	e7db      	b.n	8007338 <USBH_CtlReq+0x46>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8007380:	7921      	ldrb	r1, [r4, #4]
 8007382:	4620      	mov	r0, r4
 8007384:	f001 fa60 	bl	8008848 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8007388:	2801      	cmp	r0, #1
 800738a:	d0ea      	beq.n	8007362 <USBH_CtlReq+0x70>
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
   
    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL) 
 800738c:	2805      	cmp	r0, #5
 800738e:	d01a      	beq.n	80073c6 <USBH_CtlReq+0xd4>
    else if(URB_Status == USBH_URB_ERROR)
 8007390:	2804      	cmp	r0, #4
 8007392:	d1b5      	bne.n	8007300 <USBH_CtlReq+0xe>
      phost->Control.state = CTRL_ERROR;
 8007394:	230b      	movs	r3, #11
 8007396:	e7cf      	b.n	8007338 <USBH_CtlReq+0x46>
    }
    break;
    
  case CTRL_DATA_OUT:
    
    USBH_CtlSendData (phost,
 8007398:	2501      	movs	r5, #1
 800739a:	7963      	ldrb	r3, [r4, #5]
 800739c:	89a2      	ldrh	r2, [r4, #12]
 800739e:	9500      	str	r5, [sp, #0]
 80073a0:	68a1      	ldr	r1, [r4, #8]
 80073a2:	4620      	mov	r0, r4
 80073a4:	f000 f9ca 	bl	800773c <USBH_CtlSendData>
                      phost->Control.buff, 
                      phost->Control.length , 
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 80073a8:	f8d4 3388 	ldr.w	r3, [r4, #904]	; 0x388
 80073ac:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80073ae:	2306      	movs	r3, #6
 80073b0:	e7c2      	b.n	8007338 <USBH_CtlReq+0x46>
    break;
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 80073b2:	7961      	ldrb	r1, [r4, #5]
 80073b4:	4620      	mov	r0, r4
 80073b6:	f001 fa47 	bl	8008848 <USBH_LL_GetURBState>
    
    if  (URB_Status == USBH_URB_DONE)
 80073ba:	2801      	cmp	r0, #1
 80073bc:	d0d3      	beq.n	8007366 <USBH_CtlReq+0x74>
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    
    /* handle error cases */
    else if  (URB_Status == USBH_URB_STALL) 
 80073be:	2805      	cmp	r0, #5
 80073c0:	d103      	bne.n	80073ca <USBH_CtlReq+0xd8>
    { 
      /* In stall case, return to previous machine state*/
      phost->Control.state = CTRL_STALLED; 
 80073c2:	230c      	movs	r3, #12
 80073c4:	7623      	strb	r3, [r4, #24]
#endif      
    }
     else if(URB_Status == USBH_URB_STALL)
    {
      /* Control transfers completed, Exit the State Machine */
      status = USBH_NOT_SUPPORTED;
 80073c6:	2003      	movs	r0, #3
 80073c8:	e7a1      	b.n	800730e <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80073ca:	2802      	cmp	r0, #2
 80073cc:	d0c5      	beq.n	800735a <USBH_CtlReq+0x68>
    else if (URB_Status == USBH_URB_ERROR)
 80073ce:	2804      	cmp	r0, #4
 80073d0:	d196      	bne.n	8007300 <USBH_CtlReq+0xe>
      phost->Control.state = CTRL_ERROR;  
 80073d2:	230b      	movs	r3, #11
 80073d4:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 80073d6:	2301      	movs	r3, #1
 80073d8:	70a3      	strb	r3, [r4, #2]
      status = USBH_FAIL;
 80073da:	2002      	movs	r0, #2
  return status;
 80073dc:	e797      	b.n	800730e <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 80073de:	2200      	movs	r2, #0
 80073e0:	7923      	ldrb	r3, [r4, #4]
 80073e2:	4611      	mov	r1, r2
 80073e4:	4620      	mov	r0, r4
 80073e6:	f000 f9c0 	bl	800776a <USBH_CtlReceiveData>
    phost->Control.timer = phost->Timer;
 80073ea:	f8d4 3388 	ldr.w	r3, [r4, #904]	; 0x388
 80073ee:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80073f0:	2308      	movs	r3, #8
 80073f2:	e7a1      	b.n	8007338 <USBH_CtlReq+0x46>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 80073f4:	7921      	ldrb	r1, [r4, #4]
 80073f6:	4620      	mov	r0, r4
 80073f8:	f001 fa26 	bl	8008848 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 80073fc:	2801      	cmp	r0, #1
 80073fe:	d104      	bne.n	800740a <USBH_CtlReq+0x118>
      phost->RequestState = CMD_SEND;
 8007400:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;  
 8007402:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8007404:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;  
 8007406:	7620      	strb	r0, [r4, #24]
 8007408:	e781      	b.n	800730e <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 800740a:	2804      	cmp	r0, #4
 800740c:	d0c2      	beq.n	8007394 <USBH_CtlReq+0xa2>
     else if(URB_Status == USBH_URB_STALL)
 800740e:	2805      	cmp	r0, #5
 8007410:	f47f af76 	bne.w	8007300 <USBH_CtlReq+0xe>
 8007414:	e7d7      	b.n	80073c6 <USBH_CtlReq+0xd4>
#endif      
    }
    break;
    
  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007416:	2200      	movs	r2, #0
 8007418:	2501      	movs	r5, #1
 800741a:	7963      	ldrb	r3, [r4, #5]
 800741c:	9500      	str	r5, [sp, #0]
 800741e:	4611      	mov	r1, r2
 8007420:	4620      	mov	r0, r4
 8007422:	f000 f98b 	bl	800773c <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 8007426:	f8d4 3388 	ldr.w	r3, [r4, #904]	; 0x388
 800742a:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800742c:	230a      	movs	r3, #10
 800742e:	e783      	b.n	8007338 <USBH_CtlReq+0x46>
    break;
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 8007430:	7961      	ldrb	r1, [r4, #5]
 8007432:	4620      	mov	r0, r4
 8007434:	f001 fa08 	bl	8008848 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8007438:	2801      	cmp	r0, #1
 800743a:	d0e1      	beq.n	8007400 <USBH_CtlReq+0x10e>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    else if  (URB_Status == USBH_URB_NOTREADY)
 800743c:	2802      	cmp	r0, #2
 800743e:	d1a7      	bne.n	8007390 <USBH_CtlReq+0x9e>
 8007440:	e78f      	b.n	8007362 <USBH_CtlReq+0x70>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007442:	7e63      	ldrb	r3, [r4, #25]
 8007444:	3301      	adds	r3, #1
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b02      	cmp	r3, #2
 800744a:	7663      	strb	r3, [r4, #25]
 800744c:	d806      	bhi.n	800745c <USBH_CtlReq+0x16a>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800744e:	4620      	mov	r0, r4
 8007450:	f001 f9af 	bl	80087b2 <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 8007454:	2001      	movs	r0, #1
 8007456:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_SEND;
 8007458:	70a0      	strb	r0, [r4, #2]
 800745a:	e758      	b.n	800730e <USBH_CtlReq+0x1c>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800745c:	f8d4 3394 	ldr.w	r3, [r4, #916]	; 0x394
 8007460:	2106      	movs	r1, #6
 8007462:	4620      	mov	r0, r4
 8007464:	4798      	blx	r3
      phost->Control.errorcount = 0;
 8007466:	2300      	movs	r3, #0
 8007468:	7663      	strb	r3, [r4, #25]
 800746a:	e7b4      	b.n	80073d6 <USBH_CtlReq+0xe4>

0800746c <USBH_GetDescriptor>:
{ 
 800746c:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 800746e:	7884      	ldrb	r4, [r0, #2]
{ 
 8007470:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 8007474:	2c01      	cmp	r4, #1
 8007476:	d110      	bne.n	800749a <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007478:	f061 047f 	orn	r4, r1, #127	; 0x7f
 800747c:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 800747e:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 8007482:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 8007486:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007488:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409;
 800748c:	bf0c      	ite	eq
 800748e:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0;
 8007492:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007494:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0;
 8007496:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length; 
 8007498:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff , length );     
 800749a:	462a      	mov	r2, r5
 800749c:	4619      	mov	r1, r3
}
 800749e:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff , length );     
 80074a0:	f7ff bf27 	b.w	80072f2 <USBH_CtlReq>

080074a4 <USBH_Get_DevDesc>:
{
 80074a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 80074a6:	f100 031c 	add.w	r3, r0, #28
 80074aa:	460d      	mov	r5, r1
 80074ac:	9100      	str	r1, [sp, #0]
 80074ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074b2:	2100      	movs	r1, #0
{
 80074b4:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 80074b6:	f7ff ffd9 	bl	800746c <USBH_GetDescriptor>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d145      	bne.n	800754a <USBH_Get_DevDesc+0xa6>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80074be:	7f23      	ldrb	r3, [r4, #28]
 80074c0:	f884 3220 	strb.w	r3, [r4, #544]	; 0x220
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80074c4:	7f63      	ldrb	r3, [r4, #29]
 80074c6:	f884 3221 	strb.w	r3, [r4, #545]	; 0x221
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80074ca:	7fe2      	ldrb	r2, [r4, #31]
 80074cc:	7fa3      	ldrb	r3, [r4, #30]
 80074ce:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80074d2:	f8a4 3222 	strh.w	r3, [r4, #546]	; 0x222
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80074d6:	f894 3020 	ldrb.w	r3, [r4, #32]
 80074da:	f884 3224 	strb.w	r3, [r4, #548]	; 0x224
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80074de:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80074e2:	f884 3225 	strb.w	r3, [r4, #549]	; 0x225
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80074e6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80074ea:	f884 3226 	strb.w	r3, [r4, #550]	; 0x226
  if (length > 8)
 80074ee:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80074f0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80074f4:	f884 3227 	strb.w	r3, [r4, #551]	; 0x227
  if (length > 8)
 80074f8:	d927      	bls.n	800754a <USBH_Get_DevDesc+0xa6>
    dev_desc->idVendor           = LE16 (buf +  8);
 80074fa:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80074fe:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007502:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007506:	f8a4 3228 	strh.w	r3, [r4, #552]	; 0x228
    dev_desc->idProduct          = LE16 (buf + 10);
 800750a:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 800750e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8007512:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007516:	f8a4 322a 	strh.w	r3, [r4, #554]	; 0x22a
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800751a:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 800751e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8007522:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007526:	f8a4 322c 	strh.w	r3, [r4, #556]	; 0x22c
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800752a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800752e:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8007532:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8007536:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800753a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800753e:	f884 3230 	strb.w	r3, [r4, #560]	; 0x230
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007542:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8007546:	f884 3231 	strb.w	r3, [r4, #561]	; 0x231
}
 800754a:	b003      	add	sp, #12
 800754c:	bd30      	pop	{r4, r5, pc}

0800754e <USBH_Get_CfgDesc>:
{
 800754e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  pData = phost->device.Data;
 8007552:	f100 051c 	add.w	r5, r0, #28
{
 8007556:	460f      	mov	r7, r1
  if((status = USBH_GetDescriptor(phost,
 8007558:	9100      	str	r1, [sp, #0]
 800755a:	462b      	mov	r3, r5
 800755c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007560:	2100      	movs	r1, #0
{
 8007562:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8007564:	f7ff ff82 	bl	800746c <USBH_GetDescriptor>
 8007568:	bb68      	cbnz	r0, 80075c6 <USBH_Get_CfgDesc+0x78>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800756a:	7f23      	ldrb	r3, [r4, #28]
 800756c:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8007570:	7f63      	ldrb	r3, [r4, #29]
 8007572:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8007576:	7fa6      	ldrb	r6, [r4, #30]
 8007578:	7fe3      	ldrb	r3, [r4, #31]
 800757a:	eb06 2603 	add.w	r6, r6, r3, lsl #8
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800757e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8007582:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8007586:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 800758a:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800758e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8007592:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8007596:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 800759a:	f884 3239 	strb.w	r3, [r4, #569]	; 0x239
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800759e:	b2b6      	uxth	r6, r6
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 80075a0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80075a4:	f8a4 6234 	strh.w	r6, [r4, #564]	; 0x234
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80075a8:	2f09      	cmp	r7, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 80075aa:	f884 323a 	strb.w	r3, [r4, #570]	; 0x23a
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80075ae:	d90a      	bls.n	80075c6 <USBH_Get_CfgDesc+0x78>
 80075b0:	4622      	mov	r2, r4
 80075b2:	462b      	mov	r3, r5
 80075b4:	4686      	mov	lr, r0
 80075b6:	2109      	movs	r1, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80075b8:	f04f 081a 	mov.w	r8, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 80075bc:	f1be 0f0a 	cmp.w	lr, #10
 80075c0:	d001      	beq.n	80075c6 <USBH_Get_CfgDesc+0x78>
 80075c2:	428e      	cmp	r6, r1
 80075c4:	d802      	bhi.n	80075cc <USBH_Get_CfgDesc+0x7e>
}
 80075c6:	b002      	add	sp, #8
 80075c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80075cc:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 80075ce:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80075d0:	4429      	add	r1, r5
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 80075d2:	785d      	ldrb	r5, [r3, #1]
 80075d4:	2d04      	cmp	r5, #4
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80075d6:	b289      	uxth	r1, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 80075d8:	d1f0      	bne.n	80075bc <USBH_Get_CfgDesc+0x6e>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80075da:	781d      	ldrb	r5, [r3, #0]
 80075dc:	f882 523c 	strb.w	r5, [r2, #572]	; 0x23c
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80075e0:	785d      	ldrb	r5, [r3, #1]
 80075e2:	f882 523d 	strb.w	r5, [r2, #573]	; 0x23d
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80075e6:	789d      	ldrb	r5, [r3, #2]
 80075e8:	f882 523e 	strb.w	r5, [r2, #574]	; 0x23e
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80075ec:	78dd      	ldrb	r5, [r3, #3]
 80075ee:	f882 523f 	strb.w	r5, [r2, #575]	; 0x23f
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80075f2:	791d      	ldrb	r5, [r3, #4]
 80075f4:	f882 5240 	strb.w	r5, [r2, #576]	; 0x240
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80075f8:	795d      	ldrb	r5, [r3, #5]
 80075fa:	f882 5241 	strb.w	r5, [r2, #577]	; 0x241
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80075fe:	799d      	ldrb	r5, [r3, #6]
 8007600:	f882 5242 	strb.w	r5, [r2, #578]	; 0x242
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8007604:	79dd      	ldrb	r5, [r3, #7]
 8007606:	f882 5243 	strb.w	r5, [r2, #579]	; 0x243
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800760a:	7a1d      	ldrb	r5, [r3, #8]
 800760c:	f882 5244 	strb.w	r5, [r2, #580]	; 0x244
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8007610:	fb08 f90e 	mul.w	r9, r8, lr
        ep_ix = 0;
 8007614:	2500      	movs	r5, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007616:	f892 7240 	ldrb.w	r7, [r2, #576]	; 0x240
 800761a:	42bd      	cmp	r5, r7
 800761c:	db03      	blt.n	8007626 <USBH_Get_CfgDesc+0xd8>
 800761e:	f10e 0e01 	add.w	lr, lr, #1
 8007622:	321a      	adds	r2, #26
 8007624:	e7ca      	b.n	80075bc <USBH_Get_CfgDesc+0x6e>
 8007626:	428e      	cmp	r6, r1
 8007628:	d9f9      	bls.n	800761e <USBH_Get_CfgDesc+0xd0>
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 800762a:	781f      	ldrb	r7, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 800762c:	443b      	add	r3, r7
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 800762e:	4439      	add	r1, r7
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 8007630:	785f      	ldrb	r7, [r3, #1]
 8007632:	2f05      	cmp	r7, #5
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8007634:	b289      	uxth	r1, r1
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 8007636:	d1ee      	bne.n	8007616 <USBH_Get_CfgDesc+0xc8>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8007638:	1c6f      	adds	r7, r5, #1
 800763a:	eb09 05c7 	add.w	r5, r9, r7, lsl #3
 800763e:	4425      	add	r5, r4
 8007640:	f893 c000 	ldrb.w	ip, [r3]
 8007644:	f885 c23e 	strb.w	ip, [r5, #574]	; 0x23e
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8007648:	f893 c001 	ldrb.w	ip, [r3, #1]
 800764c:	f885 c23f 	strb.w	ip, [r5, #575]	; 0x23f
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8007650:	f893 c002 	ldrb.w	ip, [r3, #2]
 8007654:	f885 c240 	strb.w	ip, [r5, #576]	; 0x240
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8007658:	f893 c003 	ldrb.w	ip, [r3, #3]
 800765c:	f885 c241 	strb.w	ip, [r5, #577]	; 0x241
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8007660:	f893 a005 	ldrb.w	sl, [r3, #5]
 8007664:	f893 c004 	ldrb.w	ip, [r3, #4]
 8007668:	eb0c 2c0a 	add.w	ip, ip, sl, lsl #8
 800766c:	f8a5 c242 	strh.w	ip, [r5, #578]	; 0x242
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007670:	f893 c006 	ldrb.w	ip, [r3, #6]
 8007674:	f885 c244 	strb.w	ip, [r5, #580]	; 0x244
            ep_ix++;
 8007678:	b27d      	sxtb	r5, r7
 800767a:	e7cc      	b.n	8007616 <USBH_Get_CfgDesc+0xc8>

0800767c <USBH_Get_StringDesc>:
{
 800767c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 800767e:	f100 051c 	add.w	r5, r0, #28
{
 8007682:	4614      	mov	r4, r2
 8007684:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 800768c:	462b      	mov	r3, r5
 800768e:	2100      	movs	r1, #0
{
 8007690:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8007692:	f7ff feeb 	bl	800746c <USBH_GetDescriptor>
 8007696:	b968      	cbnz	r0, 80076b4 <USBH_Get_StringDesc+0x38>
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 8007698:	7f73      	ldrb	r3, [r6, #29]
 800769a:	2b03      	cmp	r3, #3
 800769c:	d10a      	bne.n	80076b4 <USBH_Get_StringDesc+0x38>
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 800769e:	7f33      	ldrb	r3, [r6, #28]
 80076a0:	3b02      	subs	r3, #2
 80076a2:	42bb      	cmp	r3, r7
 80076a4:	bfa8      	it	ge
 80076a6:	463b      	movge	r3, r7
 80076a8:	b29b      	uxth	r3, r3
    for (idx = 0; idx < strlength; idx+=2 )
 80076aa:	4602      	mov	r2, r0
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d803      	bhi.n	80076b8 <USBH_Get_StringDesc+0x3c>
    *pdest = 0; /* mark end of string */  
 80076b0:	2300      	movs	r3, #0
 80076b2:	7023      	strb	r3, [r4, #0]
}
 80076b4:	b003      	add	sp, #12
 80076b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 80076b8:	18a9      	adds	r1, r5, r2
    for (idx = 0; idx < strlength; idx+=2 )
 80076ba:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 80076bc:	7889      	ldrb	r1, [r1, #2]
 80076be:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0; idx < strlength; idx+=2 )
 80076c2:	b292      	uxth	r2, r2
 80076c4:	e7f2      	b.n	80076ac <USBH_Get_StringDesc+0x30>

080076c6 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 80076c6:	7883      	ldrb	r3, [r0, #2]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d106      	bne.n	80076da <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80076cc:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80076ce:	2205      	movs	r2, #5
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80076d0:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80076d2:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80076d4:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0;
 80076d6:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0;
 80076d8:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );
 80076da:	2200      	movs	r2, #0
 80076dc:	4611      	mov	r1, r2
 80076de:	f7ff be08 	b.w	80072f2 <USBH_CtlReq>

080076e2 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 80076e2:	7883      	ldrb	r3, [r0, #2]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d106      	bne.n	80076f6 <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 80076e8:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80076ea:	2209      	movs	r2, #9
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 80076ec:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80076ee:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80076f0:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0;
 80076f2:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0; 
 80076f4:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );      
 80076f6:	2200      	movs	r2, #0
 80076f8:	4611      	mov	r1, r2
 80076fa:	f7ff bdfa 	b.w	80072f2 <USBH_CtlReq>

080076fe <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 80076fe:	7883      	ldrb	r3, [r0, #2]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d106      	bne.n	8007712 <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 8007704:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007706:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007708:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 800770a:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800770c:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800770e:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0;           
 8007710:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );   
 8007712:	2200      	movs	r2, #0
 8007714:	4611      	mov	r1, r2
 8007716:	f7ff bdec 	b.w	80072f2 <USBH_CtlReq>

0800771a <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 800771a:	b530      	push	{r4, r5, lr}
 800771c:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800771e:	2400      	movs	r4, #0
{
 8007720:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007722:	2308      	movs	r3, #8
 8007724:	9302      	str	r3, [sp, #8]
 8007726:	9101      	str	r1, [sp, #4]
 8007728:	9403      	str	r4, [sp, #12]
 800772a:	9400      	str	r4, [sp, #0]
 800772c:	4623      	mov	r3, r4
 800772e:	4622      	mov	r2, r4
 8007730:	4629      	mov	r1, r5
 8007732:	f001 f876 	bl	8008822 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
}
 8007736:	4620      	mov	r0, r4
 8007738:	b005      	add	sp, #20
 800773a:	bd30      	pop	{r4, r5, pc}

0800773c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800773c:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 800773e:	f890 521d 	ldrb.w	r5, [r0, #541]	; 0x21d
{
 8007742:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007744:	2d00      	cmp	r5, #0
{
 8007746:	461c      	mov	r4, r3
 8007748:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800774c:	9202      	str	r2, [sp, #8]
    do_ping = 0;
 800774e:	bf18      	it	ne
 8007750:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007752:	9303      	str	r3, [sp, #12]
 8007754:	2301      	movs	r3, #1
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	2300      	movs	r3, #0
 800775a:	9101      	str	r1, [sp, #4]
 800775c:	461a      	mov	r2, r3
 800775e:	4621      	mov	r1, r4
 8007760:	f001 f85f 	bl	8008822 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
}
 8007764:	2000      	movs	r0, #0
 8007766:	b005      	add	sp, #20
 8007768:	bd30      	pop	{r4, r5, pc}

0800776a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 800776a:	b530      	push	{r4, r5, lr}
 800776c:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800776e:	2400      	movs	r4, #0
{
 8007770:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007772:	9202      	str	r2, [sp, #8]
 8007774:	2201      	movs	r2, #1
 8007776:	9101      	str	r1, [sp, #4]
 8007778:	9403      	str	r4, [sp, #12]
 800777a:	9200      	str	r2, [sp, #0]
 800777c:	4623      	mov	r3, r4
 800777e:	4629      	mov	r1, r5
 8007780:	f001 f84f 	bl	8008822 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
  
}
 8007784:	4620      	mov	r0, r4
 8007786:	b005      	add	sp, #20
 8007788:	bd30      	pop	{r4, r5, pc}

0800778a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{ 
 800778a:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 800778c:	f890 521d 	ldrb.w	r5, [r0, #541]	; 0x21d
{ 
 8007790:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007792:	2d00      	cmp	r5, #0
{ 
 8007794:	461c      	mov	r4, r3
 8007796:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800779a:	9202      	str	r2, [sp, #8]
    do_ping = 0;
 800779c:	bf18      	it	ne
 800779e:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80077a0:	9303      	str	r3, [sp, #12]
 80077a2:	2301      	movs	r3, #1
 80077a4:	9101      	str	r1, [sp, #4]
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	2200      	movs	r2, #0
 80077aa:	2302      	movs	r3, #2
 80077ac:	4621      	mov	r1, r4
 80077ae:	f001 f838 	bl	8008822 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 80077b2:	2000      	movs	r0, #0
 80077b4:	b005      	add	sp, #20
 80077b6:	bd30      	pop	{r4, r5, pc}

080077b8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 80077b8:	b530      	push	{r4, r5, lr}
 80077ba:	b085      	sub	sp, #20
 80077bc:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80077be:	2400      	movs	r4, #0
 80077c0:	9202      	str	r2, [sp, #8]
 80077c2:	2201      	movs	r2, #1
 80077c4:	9101      	str	r1, [sp, #4]
 80077c6:	9403      	str	r4, [sp, #12]
 80077c8:	9200      	str	r2, [sp, #0]
 80077ca:	2302      	movs	r3, #2
 80077cc:	4629      	mov	r1, r5
 80077ce:	f001 f828 	bl	8008822 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0);
  return USBH_OK;
}
 80077d2:	4620      	mov	r0, r4
 80077d4:	b005      	add	sp, #20
 80077d6:	bd30      	pop	{r4, r5, pc}

080077d8 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80077d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 80077da:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80077de:	9402      	str	r4, [sp, #8]
 80077e0:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80077e4:	9401      	str	r4, [sp, #4]
 80077e6:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80077ea:	9400      	str	r4, [sp, #0]
 80077ec:	f001 f801 	bl	80087f2 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);
  
  return USBH_OK; 

}
 80077f0:	2000      	movs	r0, #0
 80077f2:	b004      	add	sp, #16
 80077f4:	bd10      	pop	{r4, pc}

080077f6 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 80077f6:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 80077f8:	f001 f80c 	bl	8008814 <USBH_LL_ClosePipe>
  
  return USBH_OK; 

}
 80077fc:	2000      	movs	r0, #0
 80077fe:	bd08      	pop	{r3, pc}

08007800 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007800:	b530      	push	{r4, r5, lr}
 8007802:	2300      	movs	r3, #0
 8007804:	f500 7453 	add.w	r4, r0, #844	; 0x34c
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < 11 ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 8007808:	f854 5b04 	ldr.w	r5, [r4], #4
 800780c:	042d      	lsls	r5, r5, #16
 800780e:	b2da      	uxtb	r2, r3
 8007810:	d408      	bmi.n	8007824 <USBH_AllocPipe+0x24>
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 8007812:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007816:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
	{
	   return idx;
 800781a:	b292      	uxth	r2, r2
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 800781c:	f8c0 134c 	str.w	r1, [r0, #844]	; 0x34c
}
 8007820:	b2d0      	uxtb	r0, r2
 8007822:	bd30      	pop	{r4, r5, pc}
 8007824:	3301      	adds	r3, #1
  for (idx = 0 ; idx < 11 ; idx++)
 8007826:	2b0b      	cmp	r3, #11
 8007828:	d1ee      	bne.n	8007808 <USBH_AllocPipe+0x8>
	} 
  }
  return 0xFFFF;
 800782a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800782e:	e7f7      	b.n	8007820 <USBH_AllocPipe+0x20>

08007830 <USBH_FreePipe>:
   if(idx < 11)
 8007830:	290a      	cmp	r1, #10
 8007832:	bf9f      	itttt	ls
 8007834:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFF;
 8007838:	f8d0 334c 	ldrls.w	r3, [r0, #844]	; 0x34c
 800783c:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8007840:	f8c0 334c 	strls.w	r3, [r0, #844]	; 0x34c
}
 8007844:	2000      	movs	r0, #0
 8007846:	4770      	bx	lr

08007848 <USBH_UserProcess>:
  * @param  id: Host Library user message ID
  * @retval None
  */
static void USBH_UserProcess (USBH_HandleTypeDef *pHost, uint8_t vId)
{
  switch (vId)
 8007848:	2902      	cmp	r1, #2
{
 800784a:	b508      	push	{r3, lr}
  switch (vId)
 800784c:	d00c      	beq.n	8007868 <USBH_UserProcess+0x20>
 800784e:	2905      	cmp	r1, #5
 8007850:	d10d      	bne.n	800786e <USBH_UserProcess+0x26>
  {
  case HOST_USER_SELECT_CONFIGURATION:
    break;

  case HOST_USER_DISCONNECTION:
    WavePlayer_CallBack();
 8007852:	f001 fa0f 	bl	8008c74 <WavePlayer_CallBack>
    AppliState = APPLICATION_IDLE;
 8007856:	4b06      	ldr	r3, [pc, #24]	; (8007870 <USBH_UserProcess+0x28>)
    f_mount(NULL, (TCHAR const*)"", 0);
 8007858:	4906      	ldr	r1, [pc, #24]	; (8007874 <USBH_UserProcess+0x2c>)
    AppliState = APPLICATION_IDLE;
 800785a:	2200      	movs	r2, #0
 800785c:	701a      	strb	r2, [r3, #0]
    f_mount(NULL, (TCHAR const*)"", 0);
 800785e:	4610      	mov	r0, r2
    break;

  default:
    break;
  }
}
 8007860:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f_mount(NULL, (TCHAR const*)"", 0);
 8007864:	f7fe b912 	b.w	8005a8c <f_mount>
    AppliState = APPLICATION_START;
 8007868:	4b01      	ldr	r3, [pc, #4]	; (8007870 <USBH_UserProcess+0x28>)
 800786a:	2201      	movs	r2, #1
 800786c:	701a      	strb	r2, [r3, #0]
 800786e:	bd08      	pop	{r3, pc}
 8007870:	20000698 	.word	0x20000698
 8007874:	0800b07d 	.word	0x0800b07d

08007878 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8007878:	b508      	push	{r3, lr}
  /* Turn LED3 on */
  BSP_LED_On(LED3);
 800787a:	2001      	movs	r0, #1
 800787c:	f000 fa84 	bl	8007d88 <BSP_LED_On>
 8007880:	e7fe      	b.n	8007880 <Error_Handler+0x8>
	...

08007884 <main>:
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 8007888:	f7f9 fc06 	bl	8001098 <HAL_Init>
  BSP_LED_Init(LED3);
 800788c:	2001      	movs	r0, #1
 800788e:	f000 fa21 	bl	8007cd4 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8007892:	2000      	movs	r0, #0
 8007894:	f000 fa1e 	bl	8007cd4 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8007898:	2002      	movs	r0, #2
 800789a:	f000 fa1b 	bl	8007cd4 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 800789e:	2003      	movs	r0, #3
 80078a0:	f000 fa18 	bl	8007cd4 <BSP_LED_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 80078a4:	4c6a      	ldr	r4, [pc, #424]	; (8007a50 <main+0x1cc>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	9200      	str	r2, [sp, #0]
 80078aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078b0:	6423      	str	r3, [r4, #64]	; 0x40
 80078b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80078bc:	9201      	str	r2, [sp, #4]
 80078be:	4a65      	ldr	r2, [pc, #404]	; (8007a54 <main+0x1d0>)
 80078c0:	6813      	ldr	r3, [r2, #0]
 80078c2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80078c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	6813      	ldr	r3, [r2, #0]
 80078ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80078d2:	9301      	str	r3, [sp, #4]
 80078d4:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80078d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80078da:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80078dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80078e0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80078e2:	2308      	movs	r3, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80078e4:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80078e6:	f04f 0802 	mov.w	r8, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 80078ea:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80078ec:	2704      	movs	r7, #4
  RCC_OscInitStruct.PLL.PLLN = 336;
 80078ee:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80078f2:	2507      	movs	r5, #7
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80078f4:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80078f6:	9608      	str	r6, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80078f8:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 80078fc:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80078fe:	9712      	str	r7, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007900:	9513      	str	r5, [sp, #76]	; 0x4c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007902:	f7fb fba1 	bl	8003048 <HAL_RCC_OscConfig>
 8007906:	b108      	cbz	r0, 800790c <main+0x88>
    Error_Handler();
 8007908:	f7ff ffb6 	bl	8007878 <Error_Handler>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800790c:	230f      	movs	r3, #15
 800790e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007910:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007916:	9007      	str	r0, [sp, #28]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007918:	4641      	mov	r1, r8
 800791a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800791c:	f8cd 8010 	str.w	r8, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007920:	9306      	str	r3, [sp, #24]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007922:	f7fb fd5f 	bl	80033e4 <HAL_RCC_ClockConfig>
 8007926:	2800      	cmp	r0, #0
 8007928:	d1ee      	bne.n	8007908 <main+0x84>
  if(BSP_ACCELERO_Init() != ACCELERO_OK)
 800792a:	f000 fb17 	bl	8007f5c <BSP_ACCELERO_Init>
 800792e:	4680      	mov	r8, r0
 8007930:	2800      	cmp	r0, #0
 8007932:	d1e9      	bne.n	8007908 <main+0x84>
  BSP_ACCELERO_Click_ITConfig();
 8007934:	f000 fb2a 	bl	8007f8c <BSP_ACCELERO_Click_ITConfig>
  BSP_LED_On(LED4);
 8007938:	4640      	mov	r0, r8
 800793a:	f000 fa25 	bl	8007d88 <BSP_LED_On>
  __HAL_RCC_TIM4_CLK_ENABLE();
 800793e:	f8cd 8008 	str.w	r8, [sp, #8]
 8007942:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007944:	f043 0304 	orr.w	r3, r3, #4
 8007948:	6423      	str	r3, [r4, #64]	; 0x40
 800794a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  hTimLed.Instance = TIM4;
 800794c:	4c42      	ldr	r4, [pc, #264]	; (8007a58 <main+0x1d4>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 800794e:	f003 0304 	and.w	r3, r3, #4
  HAL_NVIC_SetPriority(TIM4_IRQn, 7, 0);
 8007952:	4642      	mov	r2, r8
 8007954:	4629      	mov	r1, r5
  __HAL_RCC_TIM4_CLK_ENABLE();
 8007956:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(TIM4_IRQn, 7, 0);
 8007958:	201e      	movs	r0, #30
  __HAL_RCC_TIM4_CLK_ENABLE();
 800795a:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(TIM4_IRQn, 7, 0);
 800795c:	f7f9 fbe6 	bl	800112c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007960:	201e      	movs	r0, #30
 8007962:	f7f9 fc17 	bl	8001194 <HAL_NVIC_EnableIRQ>
  tmpvalue = HAL_RCC_GetPCLK1Freq();
 8007966:	f7fb fdf3 	bl	8003550 <HAL_RCC_GetPCLK1Freq>
  hTimLed.Instance = TIM4;
 800796a:	4b3c      	ldr	r3, [pc, #240]	; (8007a5c <main+0x1d8>)
 800796c:	6023      	str	r3, [r4, #0]
  hTimLed.Init.Period = 65535;
 800796e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007972:	60e3      	str	r3, [r4, #12]
  prescalervalue = (uint16_t) ((tmpvalue * 2) / 550000) - 1;
 8007974:	0040      	lsls	r0, r0, #1
 8007976:	4b3a      	ldr	r3, [pc, #232]	; (8007a60 <main+0x1dc>)
 8007978:	fbb0 f0f3 	udiv	r0, r0, r3
 800797c:	3801      	subs	r0, #1
  hTimLed.Init.Prescaler = prescalervalue;
 800797e:	b280      	uxth	r0, r0
 8007980:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_OC_Init(&hTimLed) != HAL_OK)
 8007982:	4620      	mov	r0, r4
  hTimLed.Init.ClockDivision = 0;
 8007984:	f8c4 8010 	str.w	r8, [r4, #16]
  hTimLed.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007988:	f8c4 8008 	str.w	r8, [r4, #8]
  if(HAL_TIM_OC_Init(&hTimLed) != HAL_OK)
 800798c:	f7fc f890 	bl	8003ab0 <HAL_TIM_OC_Init>
 8007990:	4602      	mov	r2, r0
 8007992:	2800      	cmp	r0, #0
 8007994:	d1b8      	bne.n	8007908 <main+0x84>
  sConfigLed.OCMode = TIM_OCMODE_TIMING;
 8007996:	4933      	ldr	r1, [pc, #204]	; (8007a64 <main+0x1e0>)
  sConfigLed.OCIdleState = TIM_OCIDLESTATE_SET;
 8007998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800799c:	614b      	str	r3, [r1, #20]
  sConfigLed.Pulse = CCR1Val;
 800799e:	4b32      	ldr	r3, [pc, #200]	; (8007a68 <main+0x1e4>)
  sConfigLed.OCMode = TIM_OCMODE_TIMING;
 80079a0:	6008      	str	r0, [r1, #0]
  sConfigLed.Pulse = CCR1Val;
 80079a2:	881b      	ldrh	r3, [r3, #0]
  sConfigLed.OCPolarity = TIM_OCPOLARITY_HIGH;
 80079a4:	6088      	str	r0, [r1, #8]
  sConfigLed.Pulse = CCR1Val;
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	604b      	str	r3, [r1, #4]
  sConfigLed.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80079aa:	60c8      	str	r0, [r1, #12]
  sConfigLed.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80079ac:	f44f 7300 	mov.w	r3, #512	; 0x200
  if(HAL_TIM_OC_ConfigChannel(&hTimLed, &sConfigLed, TIM_CHANNEL_1) != HAL_OK)
 80079b0:	4620      	mov	r0, r4
  sConfigLed.OCFastMode = TIM_OCFAST_ENABLE;
 80079b2:	610f      	str	r7, [r1, #16]
  sConfigLed.OCNIdleState = TIM_OCNIDLESTATE_SET;
 80079b4:	618b      	str	r3, [r1, #24]
  if(HAL_TIM_OC_ConfigChannel(&hTimLed, &sConfigLed, TIM_CHANNEL_1) != HAL_OK)
 80079b6:	f7fc f8c1 	bl	8003b3c <HAL_TIM_OC_ConfigChannel>
 80079ba:	4601      	mov	r1, r0
 80079bc:	2800      	cmp	r0, #0
 80079be:	d1a3      	bne.n	8007908 <main+0x84>
  if(HAL_TIM_OC_Start_IT(&hTimLed, TIM_CHANNEL_1) != HAL_OK)
 80079c0:	4620      	mov	r0, r4
 80079c2:	f7fc f92b 	bl	8003c1c <HAL_TIM_OC_Start_IT>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	d19e      	bne.n	8007908 <main+0x84>
  LEDsState = LEDS_OFF;
 80079ca:	4b28      	ldr	r3, [pc, #160]	; (8007a6c <main+0x1e8>)
  RepeatState = REPEAT_ON;
 80079cc:	4c28      	ldr	r4, [pc, #160]	; (8007a70 <main+0x1ec>)
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80079ce:	4631      	mov	r1, r6
  RepeatState = REPEAT_ON;
 80079d0:	6020      	str	r0, [r4, #0]
  LEDsState = LEDS_OFF;
 80079d2:	601d      	str	r5, [r3, #0]
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80079d4:	f000 fa00 	bl	8007dd8 <BSP_PB_Init>
  if(FATFS_LinkDriver(&USBH_Driver, USBDISKPath) == 0)
 80079d8:	4926      	ldr	r1, [pc, #152]	; (8007a74 <main+0x1f0>)
 80079da:	4827      	ldr	r0, [pc, #156]	; (8007a78 <main+0x1f4>)
 80079dc:	f7fe fd26 	bl	800642c <FATFS_LinkDriver>
 80079e0:	4602      	mov	r2, r0
 80079e2:	2800      	cmp	r0, #0
 80079e4:	d132      	bne.n	8007a4c <main+0x1c8>
    USBH_Init(&hUSBHost, USBH_UserProcess, 0);
 80079e6:	4925      	ldr	r1, [pc, #148]	; (8007a7c <main+0x1f8>)
 80079e8:	4825      	ldr	r0, [pc, #148]	; (8007a80 <main+0x1fc>)
      switch(AppliState)
 80079ea:	4f26      	ldr	r7, [pc, #152]	; (8007a84 <main+0x200>)
  switch(USBH_USR_ApplicationState)
 80079ec:	4d26      	ldr	r5, [pc, #152]	; (8007a88 <main+0x204>)
    USBH_Init(&hUSBHost, USBH_UserProcess, 0);
 80079ee:	f7ff fad2 	bl	8006f96 <USBH_Init>
    USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
 80079f2:	4926      	ldr	r1, [pc, #152]	; (8007a8c <main+0x208>)
 80079f4:	4822      	ldr	r0, [pc, #136]	; (8007a80 <main+0x1fc>)
 80079f6:	f7ff fae5 	bl	8006fc4 <USBH_RegisterClass>
    USBH_Start(&hUSBHost);
 80079fa:	4821      	ldr	r0, [pc, #132]	; (8007a80 <main+0x1fc>)
 80079fc:	f7ff fb15 	bl	800702a <USBH_Start>
      switch(AppliState)
 8007a00:	783e      	ldrb	r6, [r7, #0]
 8007a02:	2e01      	cmp	r6, #1
 8007a04:	d10a      	bne.n	8007a1c <main+0x198>
  switch(USBH_USR_ApplicationState)
 8007a06:	782a      	ldrb	r2, [r5, #0]
 8007a08:	b1ba      	cbz	r2, 8007a3a <main+0x1b6>
 8007a0a:	2a01      	cmp	r2, #1
 8007a0c:	d106      	bne.n	8007a1c <main+0x198>
  switch(CmdIndex)
 8007a0e:	4b20      	ldr	r3, [pc, #128]	; (8007a90 <main+0x20c>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	b13b      	cbz	r3, 8007a24 <main+0x1a0>
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d00b      	beq.n	8007a30 <main+0x1ac>
    USBH_USR_ApplicationState = USBH_USR_FS_INIT;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	702b      	strb	r3, [r5, #0]
      USBH_Process(&hUSBHost);
 8007a1c:	4818      	ldr	r0, [pc, #96]	; (8007a80 <main+0x1fc>)
 8007a1e:	f7ff fb0e 	bl	800703e <USBH_Process>
      switch(AppliState)
 8007a22:	e7ed      	b.n	8007a00 <main+0x17c>
    if(RepeatState == REPEAT_ON)
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1f6      	bne.n	8007a18 <main+0x194>
      WavePlayerStart();
 8007a2a:	f001 f8ad 	bl	8008b88 <WavePlayerStart>
 8007a2e:	e7f3      	b.n	8007a18 <main+0x194>
    RepeatState = REPEAT_ON;
 8007a30:	2300      	movs	r3, #0
 8007a32:	6023      	str	r3, [r4, #0]
    WaveRecorderProcess();
 8007a34:	f001 f956 	bl	8008ce4 <WaveRecorderProcess>
 8007a38:	e7ee      	b.n	8007a18 <main+0x194>
    if(f_mount(&USBDISKFatFs, (TCHAR const*)USBDISKPath, 0 ) != FR_OK )
 8007a3a:	490e      	ldr	r1, [pc, #56]	; (8007a74 <main+0x1f0>)
 8007a3c:	4815      	ldr	r0, [pc, #84]	; (8007a94 <main+0x210>)
 8007a3e:	f7fe f825 	bl	8005a8c <f_mount>
 8007a42:	2800      	cmp	r0, #0
 8007a44:	f47f af60 	bne.w	8007908 <main+0x84>
    USBH_USR_ApplicationState = USBH_USR_AUDIO;
 8007a48:	702e      	strb	r6, [r5, #0]
 8007a4a:	e7e7      	b.n	8007a1c <main+0x198>
 8007a4c:	e7fe      	b.n	8007a4c <main+0x1c8>
 8007a4e:	bf00      	nop
 8007a50:	40023800 	.word	0x40023800
 8007a54:	40007000 	.word	0x40007000
 8007a58:	20000cfc 	.word	0x20000cfc
 8007a5c:	40000800 	.word	0x40000800
 8007a60:	00086470 	.word	0x00086470
 8007a64:	20000cdc 	.word	0x20000cdc
 8007a68:	20000088 	.word	0x20000088
 8007a6c:	20007fb8 	.word	0x20007fb8
 8007a70:	200006a4 	.word	0x200006a4
 8007a74:	20000cf8 	.word	0x20000cf8
 8007a78:	0800ab08 	.word	0x0800ab08
 8007a7c:	08007849 	.word	0x08007849
 8007a80:	20000944 	.word	0x20000944
 8007a84:	20000698 	.word	0x20000698
 8007a88:	200006a8 	.word	0x200006a8
 8007a8c:	20000068 	.word	0x20000068
 8007a90:	2000069c 	.word	0x2000069c
 8007a94:	20000d38 	.word	0x20000d38

08007a98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode
  * @param  htim: TIM OC handle
  * @retval None
  */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a98:	b538      	push	{r3, r4, r5, lr}
  uint32_t capture = 0;

  if(LEDsState == LED3_TOGGLE)
 8007a9a:	4b22      	ldr	r3, [pc, #136]	; (8007b24 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8007a9c:	681d      	ldr	r5, [r3, #0]
 8007a9e:	2d03      	cmp	r5, #3
{
 8007aa0:	4604      	mov	r4, r0
  if(LEDsState == LED3_TOGGLE)
 8007aa2:	d109      	bne.n	8007ab8 <HAL_TIM_OC_DelayElapsedCallback+0x20>
  {
    /* Toggling LED3 */
    BSP_LED_Toggle(LED3);
 8007aa4:	2001      	movs	r0, #1
 8007aa6:	f000 f98b 	bl	8007dc0 <BSP_LED_Toggle>
    BSP_LED_Off(LED6);
 8007aaa:	4628      	mov	r0, r5
 8007aac:	f000 f97a 	bl	8007da4 <BSP_LED_Off>
    BSP_LED_Off(LED4);
 8007ab0:	2000      	movs	r0, #0
  {
    /* Turn OFF all LEDs */
    BSP_LED_Off(LED3);
    BSP_LED_Off(LED4);
    BSP_LED_Off(LED5);
    BSP_LED_Off(LED6);
 8007ab2:	f000 f977 	bl	8007da4 <BSP_LED_Off>
 8007ab6:	e016      	b.n	8007ae6 <HAL_TIM_OC_DelayElapsedCallback+0x4e>
  else if(LEDsState == LED4_TOGGLE)
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	2a04      	cmp	r2, #4
 8007abc:	d107      	bne.n	8007ace <HAL_TIM_OC_DelayElapsedCallback+0x36>
    BSP_LED_Toggle(LED4);
 8007abe:	2000      	movs	r0, #0
 8007ac0:	f000 f97e 	bl	8007dc0 <BSP_LED_Toggle>
    BSP_LED_Off(LED6);
 8007ac4:	2003      	movs	r0, #3
 8007ac6:	f000 f96d 	bl	8007da4 <BSP_LED_Off>
    BSP_LED_Off(LED3);
 8007aca:	2001      	movs	r0, #1
 8007acc:	e7f1      	b.n	8007ab2 <HAL_TIM_OC_DelayElapsedCallback+0x1a>
  else if(LEDsState == LED6_TOGGLE)
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	2a06      	cmp	r2, #6
 8007ad2:	d113      	bne.n	8007afc <HAL_TIM_OC_DelayElapsedCallback+0x64>
    BSP_LED_Off(LED3);
 8007ad4:	2001      	movs	r0, #1
 8007ad6:	f000 f965 	bl	8007da4 <BSP_LED_Off>
    BSP_LED_Off(LED4);
 8007ada:	2000      	movs	r0, #0
 8007adc:	f000 f962 	bl	8007da4 <BSP_LED_Off>
    BSP_LED_Toggle(LED6);
 8007ae0:	2003      	movs	r0, #3
 8007ae2:	f000 f96d 	bl	8007dc0 <BSP_LED_Toggle>
  }
  /* Get the TIM4 Input Capture 1 value */
  capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f7fb fecc 	bl	8003886 <HAL_TIM_ReadCapturedValue>

  /* Set the TIM4 Capture Compare1 Register value */
  __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (CCR1Val + capture));
 8007aee:	4b0e      	ldr	r3, [pc, #56]	; (8007b28 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8007af0:	6822      	ldr	r2, [r4, #0]
 8007af2:	881b      	ldrh	r3, [r3, #0]
 8007af4:	fa10 f083 	uxtah	r0, r0, r3
 8007af8:	6350      	str	r0, [r2, #52]	; 0x34
 8007afa:	bd38      	pop	{r3, r4, r5, pc}
  else if(LEDsState == STOP_TOGGLE)
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	b91a      	cbnz	r2, 8007b08 <HAL_TIM_OC_DelayElapsedCallback+0x70>
    BSP_LED_On(LED6);
 8007b00:	2003      	movs	r0, #3
 8007b02:	f000 f941 	bl	8007d88 <BSP_LED_On>
 8007b06:	e7ee      	b.n	8007ae6 <HAL_TIM_OC_DelayElapsedCallback+0x4e>
  else if(LEDsState == LEDS_OFF)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b07      	cmp	r3, #7
 8007b0c:	d1eb      	bne.n	8007ae6 <HAL_TIM_OC_DelayElapsedCallback+0x4e>
    BSP_LED_Off(LED3);
 8007b0e:	2001      	movs	r0, #1
 8007b10:	f000 f948 	bl	8007da4 <BSP_LED_Off>
    BSP_LED_Off(LED4);
 8007b14:	2000      	movs	r0, #0
 8007b16:	f000 f945 	bl	8007da4 <BSP_LED_Off>
    BSP_LED_Off(LED5);
 8007b1a:	2002      	movs	r0, #2
 8007b1c:	f000 f942 	bl	8007da4 <BSP_LED_Off>
    BSP_LED_Off(LED6);
 8007b20:	2003      	movs	r0, #3
 8007b22:	e7c6      	b.n	8007ab2 <HAL_TIM_OC_DelayElapsedCallback+0x1a>
 8007b24:	20007fb8 	.word	0x20007fb8
 8007b28:	20000088 	.word	0x20000088

08007b2c <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if(GPIO_Pin == GPIO_PIN_0)
 8007b2c:	2801      	cmp	r0, #1
{
 8007b2e:	b570      	push	{r4, r5, r6, lr}
 8007b30:	4605      	mov	r5, r0
  if(GPIO_Pin == GPIO_PIN_0)
 8007b32:	d118      	bne.n	8007b66 <HAL_GPIO_EXTI_Callback+0x3a>
  {
    if(PbPressCheck == 0)
 8007b34:	4b13      	ldr	r3, [pc, #76]	; (8007b84 <HAL_GPIO_EXTI_Callback+0x58>)
 8007b36:	681c      	ldr	r4, [r3, #0]
 8007b38:	461e      	mov	r6, r3
 8007b3a:	b98c      	cbnz	r4, 8007b60 <HAL_GPIO_EXTI_Callback+0x34>
    {
      HAL_Delay(10);
 8007b3c:	200a      	movs	r0, #10
 8007b3e:	f7f9 fad3 	bl	80010e8 <HAL_Delay>
      /* Test on the command: Recording */
      if(CmdIndex == CMD_RECORD)
 8007b42:	4b11      	ldr	r3, [pc, #68]	; (8007b88 <HAL_GPIO_EXTI_Callback+0x5c>)
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	2a01      	cmp	r2, #1
 8007b48:	d103      	bne.n	8007b52 <HAL_GPIO_EXTI_Callback+0x26>
        /* Switch to Record command */
        CmdIndex = CMD_RECORD;
      }
      else
      {
        RepeatState = REPEAT_ON;
 8007b4a:	4a10      	ldr	r2, [pc, #64]	; (8007b8c <HAL_GPIO_EXTI_Callback+0x60>)
 8007b4c:	6014      	str	r4, [r2, #0]
        /* Default Command Index: Play command */
        CmdIndex = CMD_PLAY;
 8007b4e:	601c      	str	r4, [r3, #0]
 8007b50:	e003      	b.n	8007b5a <HAL_GPIO_EXTI_Callback+0x2e>
      else if(CmdIndex == CMD_PLAY)
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	2a00      	cmp	r2, #0
 8007b56:	d1f8      	bne.n	8007b4a <HAL_GPIO_EXTI_Callback+0x1e>
        CmdIndex = CMD_RECORD;
 8007b58:	601d      	str	r5, [r3, #0]
      }
      PbPressCheck = 1;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	6033      	str	r3, [r6, #0]
 8007b5e:	bd70      	pop	{r4, r5, r6, pc}
    }
    else
    {
      PbPressCheck = 0;
 8007b60:	2200      	movs	r2, #0
    }
    else
    {
      /* Pause playing Wave status */
      PauseResumeStatus = PAUSE_STATUS;
      PressCount = 1;
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	bd70      	pop	{r4, r5, r6, pc}
  if(GPIO_Pin == ACCELERO_INT1_PIN)
 8007b66:	2810      	cmp	r0, #16
 8007b68:	d1fc      	bne.n	8007b64 <HAL_GPIO_EXTI_Callback+0x38>
    if(PressCount == 1)
 8007b6a:	4b09      	ldr	r3, [pc, #36]	; (8007b90 <HAL_GPIO_EXTI_Callback+0x64>)
 8007b6c:	4a09      	ldr	r2, [pc, #36]	; (8007b94 <HAL_GPIO_EXTI_Callback+0x68>)
 8007b6e:	6818      	ldr	r0, [r3, #0]
 8007b70:	2801      	cmp	r0, #1
 8007b72:	f04f 0100 	mov.w	r1, #0
 8007b76:	d102      	bne.n	8007b7e <HAL_GPIO_EXTI_Callback+0x52>
      PauseResumeStatus = RESUME_STATUS;
 8007b78:	6010      	str	r0, [r2, #0]
      PressCount = 0;
 8007b7a:	6019      	str	r1, [r3, #0]
 8007b7c:	bd70      	pop	{r4, r5, r6, pc}
      PauseResumeStatus = PAUSE_STATUS;
 8007b7e:	6011      	str	r1, [r2, #0]
      PressCount = 1;
 8007b80:	2201      	movs	r2, #1
 8007b82:	e7ee      	b.n	8007b62 <HAL_GPIO_EXTI_Callback+0x36>
 8007b84:	200006a0 	.word	0x200006a0
 8007b88:	2000069c 	.word	0x2000069c
 8007b8c:	200006a4 	.word	0x200006a4
 8007b90:	20000090 	.word	0x20000090
 8007b94:	2000008c 	.word	0x2000008c

08007b98 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8007b98:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8007b9a:	4c2b      	ldr	r4, [pc, #172]	; (8007c48 <I2Cx_Init+0xb0>)
{
 8007b9c:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f7fa fe40 	bl	8002824 <HAL_I2C_GetState>
 8007ba4:	4605      	mov	r5, r0
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	d14b      	bne.n	8007c42 <I2Cx_Init+0xaa>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8007baa:	4b28      	ldr	r3, [pc, #160]	; (8007c4c <I2Cx_Init+0xb4>)
 8007bac:	6023      	str	r3, [r4, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8007bae:	2343      	movs	r3, #67	; 0x43
 8007bb0:	60e3      	str	r3, [r4, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8007bb2:	4b27      	ldr	r3, [pc, #156]	; (8007c50 <I2Cx_Init+0xb8>)
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8007bb4:	4e27      	ldr	r6, [pc, #156]	; (8007c54 <I2Cx_Init+0xbc>)
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8007bb6:	6063      	str	r3, [r4, #4]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007bb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8007bbc:	9001      	str	r0, [sp, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007bbe:	60a0      	str	r0, [r4, #8]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8007bc0:	6160      	str	r0, [r4, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8007bc2:	61a0      	str	r0, [r4, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8007bc4:	61e0      	str	r0, [r4, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 8007bc6:	6220      	str	r0, [r4, #32]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007bc8:	6123      	str	r3, [r4, #16]
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8007bca:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8007bcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bd0:	6433      	str	r3, [r6, #64]	; 0x40
 8007bd2:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8007bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bd8:	9301      	str	r3, [sp, #4]
 8007bda:	9b01      	ldr	r3, [sp, #4]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8007bdc:	9002      	str	r0, [sp, #8]
 8007bde:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8007be0:	f043 0302 	orr.w	r3, r3, #2
 8007be4:	6333      	str	r3, [r6, #48]	; 0x30
 8007be6:	6b33      	ldr	r3, [r6, #48]	; 0x30

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8007be8:	9005      	str	r0, [sp, #20]
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8007bea:	f003 0302 	and.w	r3, r3, #2
 8007bee:	9302      	str	r3, [sp, #8]
 8007bf0:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8007bf2:	4819      	ldr	r0, [pc, #100]	; (8007c58 <I2Cx_Init+0xc0>)
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8007bf4:	f44f 7310 	mov.w	r3, #576	; 0x240
 8007bf8:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8007bfa:	2312      	movs	r3, #18
 8007bfc:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8007bfe:	2302      	movs	r3, #2
 8007c00:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8007c02:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8007c04:	2304      	movs	r3, #4
 8007c06:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8007c08:	f7f9 fcde 	bl	80015c8 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8007c0c:	6a33      	ldr	r3, [r6, #32]
 8007c0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c12:	6233      	str	r3, [r6, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8007c14:	6a33      	ldr	r3, [r6, #32]
 8007c16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c1a:	6233      	str	r3, [r6, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8007c1c:	462a      	mov	r2, r5
 8007c1e:	210f      	movs	r1, #15
 8007c20:	201f      	movs	r0, #31
 8007c22:	f7f9 fa83 	bl	800112c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8007c26:	201f      	movs	r0, #31
 8007c28:	f7f9 fab4 	bl	8001194 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8007c2c:	462a      	mov	r2, r5
 8007c2e:	210f      	movs	r1, #15
 8007c30:	2020      	movs	r0, #32
 8007c32:	f7f9 fa7b 	bl	800112c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8007c36:	2020      	movs	r0, #32
 8007c38:	f7f9 faac 	bl	8001194 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f7fa fbc3 	bl	80023c8 <HAL_I2C_Init>
}
 8007c42:	b008      	add	sp, #32
 8007c44:	bd70      	pop	{r4, r5, r6, pc}
 8007c46:	bf00      	nop
 8007c48:	200006ac 	.word	0x200006ac
 8007c4c:	40005400 	.word	0x40005400
 8007c50:	000186a0 	.word	0x000186a0
 8007c54:	40023800 	.word	0x40023800
 8007c58:	40020400 	.word	0x40020400

08007c5c <I2Cx_ReadData>:
{
 8007c5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 8007c5e:	aa06      	add	r2, sp, #24
 8007c60:	2300      	movs	r3, #0
 8007c62:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8007c66:	4b0b      	ldr	r3, [pc, #44]	; (8007c94 <I2Cx_ReadData+0x38>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	9302      	str	r3, [sp, #8]
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8007c72:	460a      	mov	r2, r1
 8007c74:	4601      	mov	r1, r0
 8007c76:	4808      	ldr	r0, [pc, #32]	; (8007c98 <I2Cx_ReadData+0x3c>)
 8007c78:	f7fa fcc4 	bl	8002604 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8007c7c:	b120      	cbz	r0, 8007c88 <I2Cx_ReadData+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 8007c7e:	4806      	ldr	r0, [pc, #24]	; (8007c98 <I2Cx_ReadData+0x3c>)
 8007c80:	f7fa fc11 	bl	80024a6 <HAL_I2C_DeInit>
  I2Cx_Init();
 8007c84:	f7ff ff88 	bl	8007b98 <I2Cx_Init>
}
 8007c88:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8007c8c:	b007      	add	sp, #28
 8007c8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c92:	bf00      	nop
 8007c94:	200000a8 	.word	0x200000a8
 8007c98:	200006ac 	.word	0x200006ac

08007c9c <I2Cx_WriteData>:
{
 8007c9c:	b510      	push	{r4, lr}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8007ca2:	4b0a      	ldr	r3, [pc, #40]	; (8007ccc <I2Cx_WriteData+0x30>)
{
 8007ca4:	f804 2d01 	strb.w	r2, [r4, #-1]!
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	9302      	str	r3, [sp, #8]
 8007cac:	2301      	movs	r3, #1
 8007cae:	460a      	mov	r2, r1
 8007cb0:	9301      	str	r3, [sp, #4]
 8007cb2:	4601      	mov	r1, r0
 8007cb4:	9400      	str	r4, [sp, #0]
 8007cb6:	4806      	ldr	r0, [pc, #24]	; (8007cd0 <I2Cx_WriteData+0x34>)
 8007cb8:	f7fa fc0e 	bl	80024d8 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8007cbc:	b120      	cbz	r0, 8007cc8 <I2Cx_WriteData+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 8007cbe:	4804      	ldr	r0, [pc, #16]	; (8007cd0 <I2Cx_WriteData+0x34>)
 8007cc0:	f7fa fbf1 	bl	80024a6 <HAL_I2C_DeInit>
  I2Cx_Init();
 8007cc4:	f7ff ff68 	bl	8007b98 <I2Cx_Init>
}
 8007cc8:	b006      	add	sp, #24
 8007cca:	bd10      	pop	{r4, pc}
 8007ccc:	200000a8 	.word	0x200000a8
 8007cd0:	200006ac 	.word	0x200006ac

08007cd4 <BSP_LED_Init>:
{
 8007cd4:	b570      	push	{r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 8007cd6:	4604      	mov	r4, r0
{
 8007cd8:	b08a      	sub	sp, #40	; 0x28
  LEDx_GPIO_CLK_ENABLE(Led);
 8007cda:	bb08      	cbnz	r0, 8007d20 <BSP_LED_Init+0x4c>
 8007cdc:	4b27      	ldr	r3, [pc, #156]	; (8007d7c <BSP_LED_Init+0xa8>)
 8007cde:	9001      	str	r0, [sp, #4]
 8007ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ce2:	f042 0208 	orr.w	r2, r2, #8
 8007ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8007ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cea:	f003 0308 	and.w	r3, r3, #8
 8007cee:	9301      	str	r3, [sp, #4]
 8007cf0:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8007cf2:	4b23      	ldr	r3, [pc, #140]	; (8007d80 <BSP_LED_Init+0xac>)
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8007cf4:	4d23      	ldr	r5, [pc, #140]	; (8007d84 <BSP_LED_Init+0xb0>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8007cf6:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8007cfa:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8007cfe:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d00:	2301      	movs	r3, #1
 8007d02:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d04:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8007d06:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8007d08:	2302      	movs	r3, #2
 8007d0a:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8007d0c:	f7f9 fc5c 	bl	80015c8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8007d10:	2200      	movs	r2, #0
 8007d12:	4631      	mov	r1, r6
 8007d14:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8007d18:	f7f9 fd2c 	bl	8001774 <HAL_GPIO_WritePin>
}
 8007d1c:	b00a      	add	sp, #40	; 0x28
 8007d1e:	bd70      	pop	{r4, r5, r6, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8007d20:	2801      	cmp	r0, #1
 8007d22:	d10c      	bne.n	8007d3e <BSP_LED_Init+0x6a>
 8007d24:	2300      	movs	r3, #0
 8007d26:	9302      	str	r3, [sp, #8]
 8007d28:	4b14      	ldr	r3, [pc, #80]	; (8007d7c <BSP_LED_Init+0xa8>)
 8007d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d2c:	f042 0208 	orr.w	r2, r2, #8
 8007d30:	631a      	str	r2, [r3, #48]	; 0x30
 8007d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d34:	f003 0308 	and.w	r3, r3, #8
 8007d38:	9302      	str	r3, [sp, #8]
 8007d3a:	9b02      	ldr	r3, [sp, #8]
 8007d3c:	e7d9      	b.n	8007cf2 <BSP_LED_Init+0x1e>
 8007d3e:	2802      	cmp	r0, #2
 8007d40:	d10c      	bne.n	8007d5c <BSP_LED_Init+0x88>
 8007d42:	2300      	movs	r3, #0
 8007d44:	9303      	str	r3, [sp, #12]
 8007d46:	4b0d      	ldr	r3, [pc, #52]	; (8007d7c <BSP_LED_Init+0xa8>)
 8007d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d4a:	f042 0208 	orr.w	r2, r2, #8
 8007d4e:	631a      	str	r2, [r3, #48]	; 0x30
 8007d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d52:	f003 0308 	and.w	r3, r3, #8
 8007d56:	9303      	str	r3, [sp, #12]
 8007d58:	9b03      	ldr	r3, [sp, #12]
 8007d5a:	e7ca      	b.n	8007cf2 <BSP_LED_Init+0x1e>
 8007d5c:	2803      	cmp	r0, #3
 8007d5e:	d1c8      	bne.n	8007cf2 <BSP_LED_Init+0x1e>
 8007d60:	2300      	movs	r3, #0
 8007d62:	9304      	str	r3, [sp, #16]
 8007d64:	4b05      	ldr	r3, [pc, #20]	; (8007d7c <BSP_LED_Init+0xa8>)
 8007d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d68:	f042 0208 	orr.w	r2, r2, #8
 8007d6c:	631a      	str	r2, [r3, #48]	; 0x30
 8007d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d70:	f003 0308 	and.w	r3, r3, #8
 8007d74:	9304      	str	r3, [sp, #16]
 8007d76:	9b04      	ldr	r3, [sp, #16]
 8007d78:	e7bb      	b.n	8007cf2 <BSP_LED_Init+0x1e>
 8007d7a:	bf00      	nop
 8007d7c:	40023800 	.word	0x40023800
 8007d80:	0800b07e 	.word	0x0800b07e
 8007d84:	20000098 	.word	0x20000098

08007d88 <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8007d88:	4b04      	ldr	r3, [pc, #16]	; (8007d9c <BSP_LED_On+0x14>)
 8007d8a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8007d8e:	4b04      	ldr	r3, [pc, #16]	; (8007da0 <BSP_LED_On+0x18>)
 8007d90:	2201      	movs	r2, #1
 8007d92:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007d96:	f7f9 bced 	b.w	8001774 <HAL_GPIO_WritePin>
 8007d9a:	bf00      	nop
 8007d9c:	0800b07e 	.word	0x0800b07e
 8007da0:	20000098 	.word	0x20000098

08007da4 <BSP_LED_Off>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8007da4:	4b04      	ldr	r3, [pc, #16]	; (8007db8 <BSP_LED_Off+0x14>)
 8007da6:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8007daa:	4b04      	ldr	r3, [pc, #16]	; (8007dbc <BSP_LED_Off+0x18>)
 8007dac:	2200      	movs	r2, #0
 8007dae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007db2:	f7f9 bcdf 	b.w	8001774 <HAL_GPIO_WritePin>
 8007db6:	bf00      	nop
 8007db8:	0800b07e 	.word	0x0800b07e
 8007dbc:	20000098 	.word	0x20000098

08007dc0 <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8007dc0:	4b03      	ldr	r3, [pc, #12]	; (8007dd0 <BSP_LED_Toggle+0x10>)
 8007dc2:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8007dc6:	4b03      	ldr	r3, [pc, #12]	; (8007dd4 <BSP_LED_Toggle+0x14>)
 8007dc8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007dcc:	f7f9 bcd7 	b.w	800177e <HAL_GPIO_TogglePin>
 8007dd0:	0800b07e 	.word	0x0800b07e
 8007dd4:	20000098 	.word	0x20000098

08007dd8 <BSP_PB_Init>:
{
 8007dd8:	b510      	push	{r4, lr}
 8007dda:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8007ddc:	b950      	cbnz	r0, 8007df4 <BSP_PB_Init+0x1c>
 8007dde:	4b18      	ldr	r3, [pc, #96]	; (8007e40 <BSP_PB_Init+0x68>)
 8007de0:	9000      	str	r0, [sp, #0]
 8007de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007de4:	f042 0201 	orr.w	r2, r2, #1
 8007de8:	631a      	str	r2, [r3, #48]	; 0x30
 8007dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dec:	f003 0301 	and.w	r3, r3, #1
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	9b00      	ldr	r3, [sp, #0]
  if(ButtonMode == BUTTON_MODE_GPIO)
 8007df4:	b969      	cbnz	r1, 8007e12 <BSP_PB_Init+0x3a>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8007df6:	2301      	movs	r3, #1
 8007df8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007dfa:	2302      	movs	r3, #2
 8007dfc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8007dfe:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8007e00:	4b10      	ldr	r3, [pc, #64]	; (8007e44 <BSP_PB_Init+0x6c>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e02:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8007e04:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007e08:	a901      	add	r1, sp, #4
 8007e0a:	f7f9 fbdd 	bl	80015c8 <HAL_GPIO_Init>
}
 8007e0e:	b006      	add	sp, #24
 8007e10:	bd10      	pop	{r4, pc}
  if(ButtonMode == BUTTON_MODE_EXTI)
 8007e12:	2901      	cmp	r1, #1
 8007e14:	d1fb      	bne.n	8007e0e <BSP_PB_Init+0x36>
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8007e16:	4b0c      	ldr	r3, [pc, #48]	; (8007e48 <BSP_PB_Init+0x70>)
 8007e18:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8007e1a:	4b0a      	ldr	r3, [pc, #40]	; (8007e44 <BSP_PB_Init+0x6c>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8007e1c:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8007e1e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e22:	2400      	movs	r4, #0
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8007e24:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e26:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8007e28:	f7f9 fbce 	bl	80015c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8007e2c:	4622      	mov	r2, r4
 8007e2e:	210f      	movs	r1, #15
 8007e30:	2006      	movs	r0, #6
 8007e32:	f7f9 f97b 	bl	800112c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8007e36:	2006      	movs	r0, #6
 8007e38:	f7f9 f9ac 	bl	8001194 <HAL_NVIC_EnableIRQ>
}
 8007e3c:	e7e7      	b.n	8007e0e <BSP_PB_Init+0x36>
 8007e3e:	bf00      	nop
 8007e40:	40023800 	.word	0x40023800
 8007e44:	20000094 	.word	0x20000094
 8007e48:	10110000 	.word	0x10110000

08007e4c <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8007e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e4e:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8007e50:	2600      	movs	r6, #0
 8007e52:	4b15      	ldr	r3, [pc, #84]	; (8007ea8 <AUDIO_IO_Init+0x5c>)
 8007e54:	9600      	str	r6, [sp, #0]
 8007e56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8007e58:	4c14      	ldr	r4, [pc, #80]	; (8007eac <AUDIO_IO_Init+0x60>)
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8007e5a:	f042 0208 	orr.w	r2, r2, #8
 8007e5e:	631a      	str	r2, [r3, #48]	; 0x30
 8007e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8007e62:	9603      	str	r6, [sp, #12]
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8007e64:	f003 0308 	and.w	r3, r3, #8
 8007e68:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
 8007e6a:	2510      	movs	r5, #16
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8007e6c:	a901      	add	r1, sp, #4
 8007e6e:	4620      	mov	r0, r4
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8007e70:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
 8007e72:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8007e74:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e76:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8007e78:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e7a:	9702      	str	r7, [sp, #8]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8007e7c:	f7f9 fba4 	bl	80015c8 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8007e80:	f7ff fe8a 	bl	8007b98 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8007e84:	4632      	mov	r2, r6
 8007e86:	4629      	mov	r1, r5
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f7f9 fc73 	bl	8001774 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8007e8e:	2005      	movs	r0, #5
 8007e90:	f7f9 f92a 	bl	80010e8 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8007e94:	463a      	mov	r2, r7
 8007e96:	4629      	mov	r1, r5
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f7f9 fc6b 	bl	8001774 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8007e9e:	2005      	movs	r0, #5
 8007ea0:	f7f9 f922 	bl	80010e8 <HAL_Delay>
}
 8007ea4:	b007      	add	sp, #28
 8007ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ea8:	40023800 	.word	0x40023800
 8007eac:	40020c00 	.word	0x40020c00

08007eb0 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8007eb0:	4770      	bx	lr

08007eb2 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  I2Cx_WriteData(Addr, Reg, Value);
 8007eb2:	f7ff bef3 	b.w	8007c9c <I2Cx_WriteData>

08007eb6 <AUDIO_IO_Read>:
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
  return I2Cx_ReadData(Addr, Reg);
 8007eb6:	f7ff bed1 	b.w	8007c5c <I2Cx_ReadData>
	...

08007ebc <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 8007ebc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	4a0d      	ldr	r2, [pc, #52]	; (8007ef8 <COMPASSACCELERO_IO_Init+0x3c>)
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	6b11      	ldr	r1, [r2, #48]	; 0x30
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8007ec6:	480d      	ldr	r0, [pc, #52]	; (8007efc <COMPASSACCELERO_IO_Init+0x40>)
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8007ec8:	f041 0110 	orr.w	r1, r1, #16
 8007ecc:	6311      	str	r1, [r2, #48]	; 0x30
 8007ece:	6b12      	ldr	r2, [r2, #48]	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8007ed0:	9302      	str	r3, [sp, #8]
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8007ed2:	f002 0210 	and.w	r2, r2, #16
 8007ed6:	9200      	str	r2, [sp, #0]
 8007ed8:	9a00      	ldr	r2, [sp, #0]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8007eda:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8007edc:	2204      	movs	r2, #4
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8007ede:	2302      	movs	r3, #2
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8007ee0:	eb0d 0102 	add.w	r1, sp, r2
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8007ee4:	9201      	str	r2, [sp, #4]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8007ee6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8007ee8:	f7f9 fb6e 	bl	80015c8 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8007eec:	f7ff fe54 	bl	8007b98 <I2Cx_Init>
}
 8007ef0:	b007      	add	sp, #28
 8007ef2:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ef6:	bf00      	nop
 8007ef8:	40023800 	.word	0x40023800
 8007efc:	40021000 	.word	0x40021000

08007f00 <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8007f00:	b510      	push	{r4, lr}
 8007f02:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8007f04:	2400      	movs	r4, #0
 8007f06:	4b10      	ldr	r3, [pc, #64]	; (8007f48 <COMPASSACCELERO_IO_ITConfig+0x48>)
 8007f08:	9400      	str	r4, [sp, #0]
 8007f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8007f0c:	480f      	ldr	r0, [pc, #60]	; (8007f4c <COMPASSACCELERO_IO_ITConfig+0x4c>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8007f0e:	f042 0210 	orr.w	r2, r2, #16
 8007f12:	631a      	str	r2, [r3, #48]	; 0x30
 8007f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8007f16:	9403      	str	r4, [sp, #12]
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8007f18:	f003 0310 	and.w	r3, r3, #16
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8007f20:	2330      	movs	r3, #48	; 0x30
 8007f22:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8007f24:	4b0a      	ldr	r3, [pc, #40]	; (8007f50 <COMPASSACCELERO_IO_ITConfig+0x50>)
 8007f26:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8007f28:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8007f2e:	f7f9 fb4b 	bl	80015c8 <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 8007f32:	4622      	mov	r2, r4
 8007f34:	210f      	movs	r1, #15
 8007f36:	200a      	movs	r0, #10
 8007f38:	f7f9 f8f8 	bl	800112c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8007f3c:	200a      	movs	r0, #10
 8007f3e:	f7f9 f929 	bl	8001194 <HAL_NVIC_EnableIRQ>
}
 8007f42:	b006      	add	sp, #24
 8007f44:	bd10      	pop	{r4, pc}
 8007f46:	bf00      	nop
 8007f48:	40023800 	.word	0x40023800
 8007f4c:	40021000 	.word	0x40021000
 8007f50:	10110000 	.word	0x10110000

08007f54 <COMPASSACCELERO_IO_Write>:
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8007f54:	f7ff bea2 	b.w	8007c9c <I2Cx_WriteData>

08007f58 <COMPASSACCELERO_IO_Read>:
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8007f58:	f7ff be80 	b.w	8007c5c <I2Cx_ReadData>

08007f5c <BSP_ACCELERO_Init>:
/**
  * @brief  Set Accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8007f5c:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = ACCELERO_ERROR;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef         LSM303DLHC_InitStructure;
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure = {0,0,0,0};
  
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8007f5e:	4c09      	ldr	r4, [pc, #36]	; (8007f84 <BSP_ACCELERO_Init+0x28>)
 8007f60:	68a3      	ldr	r3, [r4, #8]
 8007f62:	4798      	blx	r3
 8007f64:	2833      	cmp	r0, #51	; 0x33
 8007f66:	d10b      	bne.n	8007f80 <BSP_ACCELERO_Init+0x24>
  {
    /* Initialize the Accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8007f68:	4d07      	ldr	r5, [pc, #28]	; (8007f88 <BSP_ACCELERO_Init+0x2c>)
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
    
    /* Configure the Accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8007f6a:	6823      	ldr	r3, [r4, #0]
    AccelerometerDrv = &Lsm303dlhcDrv;
 8007f6c:	602c      	str	r4, [r5, #0]
    AccelerometerDrv->Init(ctrl);
 8007f6e:	f640 0047 	movw	r0, #2119	; 0x847
 8007f72:	4798      	blx	r3
                      LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI1|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI2);

    /* Configure the Accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8007f74:	682b      	ldr	r3, [r5, #0]
 8007f76:	2090      	movs	r0, #144	; 0x90
 8007f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7a:	4798      	blx	r3

    ret = ACCELERO_OK;
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    ret = ACCELERO_ERROR;
 8007f80:	2001      	movs	r0, #1
  }

  return ret;
}
 8007f82:	bd38      	pop	{r3, r4, r5, pc}
 8007f84:	20000034 	.word	0x20000034
 8007f88:	20000700 	.word	0x20000700

08007f8c <BSP_ACCELERO_Click_ITConfig>:
/**
  * @brief  Configure Accelerometer click IT. 
  */
void BSP_ACCELERO_Click_ITConfig(void)
{
  if(AccelerometerDrv->ConfigIT!= NULL)
 8007f8c:	4b02      	ldr	r3, [pc, #8]	; (8007f98 <BSP_ACCELERO_Click_ITConfig+0xc>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	b103      	cbz	r3, 8007f96 <BSP_ACCELERO_Click_ITConfig+0xa>
  {
    AccelerometerDrv->ConfigIT();
 8007f94:	4718      	bx	r3
 8007f96:	4770      	bx	lr
 8007f98:	20000700 	.word	0x20000700

08007f9c <I2S3_Init>:
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8007f9c:	4a0d      	ldr	r2, [pc, #52]	; (8007fd4 <I2S3_Init+0x38>)
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8007f9e:	69d1      	ldr	r1, [r2, #28]
 8007fa0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
{
 8007fa4:	b508      	push	{r3, lr}
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8007fa6:	0409      	lsls	r1, r1, #16
  hAudioOutI2s.Instance         = I2S3;
 8007fa8:	4b0b      	ldr	r3, [pc, #44]	; (8007fd8 <I2S3_Init+0x3c>)
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8007faa:	0c09      	lsrs	r1, r1, #16
  hAudioOutI2s.Instance         = I2S3;
 8007fac:	601a      	str	r2, [r3, #0]
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8007fae:	61d1      	str	r1, [r2, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8007fb0:	2200      	movs	r2, #0
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8007fb2:	f44f 7100 	mov.w	r1, #512	; 0x200
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 8007fb6:	6158      	str	r0, [r3, #20]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8007fb8:	4618      	mov	r0, r3
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8007fba:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 8007fbc:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8007fbe:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8007fc0:	6119      	str	r1, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 8007fc2:	6059      	str	r1, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8007fc4:	609a      	str	r2, [r3, #8]
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8007fc6:	f7fa fde5 	bl	8002b94 <HAL_I2S_Init>
  }
  else
  {
    return AUDIO_OK;
  }
}
 8007fca:	3000      	adds	r0, #0
 8007fcc:	bf18      	it	ne
 8007fce:	2001      	movne	r0, #1
 8007fd0:	bd08      	pop	{r3, pc}
 8007fd2:	bf00      	nop
 8007fd4:	40003c00 	.word	0x40003c00
 8007fd8:	20000f9c 	.word	0x20000f9c

08007fdc <BSP_AUDIO_OUT_Play>:
{
 8007fdc:	b538      	push	{r3, r4, r5, lr}
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8007fde:	4b0c      	ldr	r3, [pc, #48]	; (8008010 <BSP_AUDIO_OUT_Play+0x34>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
{
 8007fe2:	4605      	mov	r5, r0
 8007fe4:	460c      	mov	r4, r1
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8007fe6:	b28a      	uxth	r2, r1
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	4601      	mov	r1, r0
 8007fec:	2094      	movs	r0, #148	; 0x94
 8007fee:	4798      	blx	r3
 8007ff0:	b960      	cbnz	r0, 800800c <BSP_AUDIO_OUT_Play+0x30>
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8007ff2:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 8007ff6:	bf34      	ite	cc
 8007ff8:	0862      	lsrcc	r2, r4, #1
 8007ffa:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
 8007ffe:	b292      	uxth	r2, r2
 8008000:	4629      	mov	r1, r5
 8008002:	4804      	ldr	r0, [pc, #16]	; (8008014 <BSP_AUDIO_OUT_Play+0x38>)
 8008004:	f7fa fc12 	bl	800282c <HAL_I2S_Transmit_DMA>
    return AUDIO_OK;
 8008008:	2000      	movs	r0, #0
 800800a:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 800800c:	2001      	movs	r0, #1
}
 800800e:	bd38      	pop	{r3, r4, r5, pc}
 8008010:	200007c4 	.word	0x200007c4
 8008014:	20000f9c 	.word	0x20000f9c

08008018 <BSP_AUDIO_OUT_ChangeBuffer>:
  HAL_I2S_Transmit_DMA(&hAudioOutI2s, pData, Size); 
 8008018:	460a      	mov	r2, r1
 800801a:	4601      	mov	r1, r0
 800801c:	4801      	ldr	r0, [pc, #4]	; (8008024 <BSP_AUDIO_OUT_ChangeBuffer+0xc>)
 800801e:	f7fa bc05 	b.w	800282c <HAL_I2S_Transmit_DMA>
 8008022:	bf00      	nop
 8008024:	20000f9c 	.word	0x20000f9c

08008028 <BSP_AUDIO_OUT_Pause>:
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8008028:	4b07      	ldr	r3, [pc, #28]	; (8008048 <BSP_AUDIO_OUT_Pause+0x20>)
 800802a:	681b      	ldr	r3, [r3, #0]
{    
 800802c:	b510      	push	{r4, lr}
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	2094      	movs	r0, #148	; 0x94
 8008032:	4798      	blx	r3
 8008034:	4604      	mov	r4, r0
 8008036:	b920      	cbnz	r0, 8008042 <BSP_AUDIO_OUT_Pause+0x1a>
    HAL_I2S_DMAPause(&hAudioOutI2s);
 8008038:	4804      	ldr	r0, [pc, #16]	; (800804c <BSP_AUDIO_OUT_Pause+0x24>)
 800803a:	f7fa fca7 	bl	800298c <HAL_I2S_DMAPause>
    return AUDIO_OK;
 800803e:	4620      	mov	r0, r4
 8008040:	bd10      	pop	{r4, pc}
    return AUDIO_ERROR;
 8008042:	2001      	movs	r0, #1
}
 8008044:	bd10      	pop	{r4, pc}
 8008046:	bf00      	nop
 8008048:	200007c4 	.word	0x200007c4
 800804c:	20000f9c 	.word	0x20000f9c

08008050 <BSP_AUDIO_OUT_Resume>:
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8008050:	4b07      	ldr	r3, [pc, #28]	; (8008070 <BSP_AUDIO_OUT_Resume+0x20>)
 8008052:	681b      	ldr	r3, [r3, #0]
{    
 8008054:	b510      	push	{r4, lr}
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	2094      	movs	r0, #148	; 0x94
 800805a:	4798      	blx	r3
 800805c:	4604      	mov	r4, r0
 800805e:	b920      	cbnz	r0, 800806a <BSP_AUDIO_OUT_Resume+0x1a>
    HAL_I2S_DMAResume(&hAudioOutI2s);
 8008060:	4804      	ldr	r0, [pc, #16]	; (8008074 <BSP_AUDIO_OUT_Resume+0x24>)
 8008062:	f7fa fccb 	bl	80029fc <HAL_I2S_DMAResume>
    return AUDIO_OK;
 8008066:	4620      	mov	r0, r4
 8008068:	bd10      	pop	{r4, pc}
    return AUDIO_ERROR;
 800806a:	2001      	movs	r0, #1
}
 800806c:	bd10      	pop	{r4, pc}
 800806e:	bf00      	nop
 8008070:	200007c4 	.word	0x200007c4
 8008074:	20000f9c 	.word	0x20000f9c

08008078 <BSP_AUDIO_OUT_Stop>:
{
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	4605      	mov	r5, r0
  HAL_I2S_DMAStop(&hAudioOutI2s);
 800807c:	480c      	ldr	r0, [pc, #48]	; (80080b0 <BSP_AUDIO_OUT_Stop+0x38>)
 800807e:	f7fa fd01 	bl	8002a84 <HAL_I2S_DMAStop>
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8008082:	4b0c      	ldr	r3, [pc, #48]	; (80080b4 <BSP_AUDIO_OUT_Stop+0x3c>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4629      	mov	r1, r5
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	2094      	movs	r0, #148	; 0x94
 800808c:	4798      	blx	r3
 800808e:	4604      	mov	r4, r0
 8008090:	b958      	cbnz	r0, 80080aa <BSP_AUDIO_OUT_Stop+0x32>
    if(Option == CODEC_PDWN_HW)
 8008092:	2d01      	cmp	r5, #1
 8008094:	d107      	bne.n	80080a6 <BSP_AUDIO_OUT_Stop+0x2e>
      HAL_Delay(1);
 8008096:	4628      	mov	r0, r5
 8008098:	f7f9 f826 	bl	80010e8 <HAL_Delay>
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 800809c:	4622      	mov	r2, r4
 800809e:	2110      	movs	r1, #16
 80080a0:	4805      	ldr	r0, [pc, #20]	; (80080b8 <BSP_AUDIO_OUT_Stop+0x40>)
 80080a2:	f7f9 fb67 	bl	8001774 <HAL_GPIO_WritePin>
    return AUDIO_OK;
 80080a6:	4620      	mov	r0, r4
}
 80080a8:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 80080aa:	2001      	movs	r0, #1
 80080ac:	bd38      	pop	{r3, r4, r5, pc}
 80080ae:	bf00      	nop
 80080b0:	20000f9c 	.word	0x20000f9c
 80080b4:	200007c4 	.word	0x200007c4
 80080b8:	40020c00 	.word	0x40020c00

080080bc <BSP_AUDIO_OUT_ClockConfig>:
{ 
 80080bc:	b530      	push	{r4, r5, lr}
    if(I2SFreq[index] == AudioFreq)
 80080be:	4814      	ldr	r0, [pc, #80]	; (8008110 <BSP_AUDIO_OUT_ClockConfig+0x54>)
{ 
 80080c0:	b087      	sub	sp, #28
 80080c2:	2400      	movs	r4, #0
  uint8_t index = 0, freqindex = 0xFF;
 80080c4:	25ff      	movs	r5, #255	; 0xff
    if(I2SFreq[index] == AudioFreq)
 80080c6:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
 80080ca:	b2e3      	uxtb	r3, r4
 80080cc:	3401      	adds	r4, #1
 80080ce:	428a      	cmp	r2, r1
 80080d0:	bf08      	it	eq
 80080d2:	461d      	moveq	r5, r3
  for(index = 0; index < 8; index++)
 80080d4:	2c08      	cmp	r4, #8
 80080d6:	d1f6      	bne.n	80080c6 <BSP_AUDIO_OUT_ClockConfig+0xa>
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80080d8:	4668      	mov	r0, sp
 80080da:	f7fb faff 	bl	80036dc <HAL_RCCEx_GetPeriphCLKConfig>
 80080de:	2301      	movs	r3, #1
  if ((freqindex & 0x7) == 0)
 80080e0:	f015 0f07 	tst.w	r5, #7
    rccclkinit.PLLI2S.PLLI2SM = 8;
 80080e4:	e88d 0018 	stmia.w	sp, {r3, r4}
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80080e8:	bf01      	itttt	eq
 80080ea:	4b0a      	ldreq	r3, [pc, #40]	; (8008114 <BSP_AUDIO_OUT_ClockConfig+0x58>)
 80080ec:	f853 3025 	ldreq.w	r3, [r3, r5, lsl #2]
 80080f0:	9302      	streq	r3, [sp, #8]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80080f2:	4b09      	ldreq	r3, [pc, #36]	; (8008118 <BSP_AUDIO_OUT_ClockConfig+0x5c>)
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80080f4:	bf16      	itet	ne
 80080f6:	f44f 7381 	movne.w	r3, #258	; 0x102
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80080fa:	f853 3025 	ldreq.w	r3, [r3, r5, lsl #2]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80080fe:	9302      	strne	r3, [sp, #8]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8008100:	4668      	mov	r0, sp
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8008102:	bf18      	it	ne
 8008104:	2303      	movne	r3, #3
 8008106:	9303      	str	r3, [sp, #12]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8008108:	f7fb fa3a 	bl	8003580 <HAL_RCCEx_PeriphCLKConfig>
}
 800810c:	b007      	add	sp, #28
 800810e:	bd30      	pop	{r4, r5, pc}
 8008110:	0800b088 	.word	0x0800b088
 8008114:	0800b0a8 	.word	0x0800b0a8
 8008118:	0800b0c8 	.word	0x0800b0c8

0800811c <BSP_AUDIO_OUT_MspInit>:
{
 800811c:	b570      	push	{r4, r5, r6, lr}
 800811e:	b08a      	sub	sp, #40	; 0x28
  I2S3_CLK_ENABLE();
 8008120:	4c3e      	ldr	r4, [pc, #248]	; (800821c <BSP_AUDIO_OUT_MspInit+0x100>)
 8008122:	2500      	movs	r5, #0
 8008124:	9500      	str	r5, [sp, #0]
 8008126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800812c:	6423      	str	r3, [r4, #64]	; 0x40
 800812e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	9b00      	ldr	r3, [sp, #0]
  I2S3_SCK_SD_CLK_ENABLE();
 8008138:	9501      	str	r5, [sp, #4]
 800813a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800813c:	f043 0304 	orr.w	r3, r3, #4
 8008140:	6323      	str	r3, [r4, #48]	; 0x30
 8008142:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008144:	f003 0304 	and.w	r3, r3, #4
 8008148:	9301      	str	r3, [sp, #4]
 800814a:	9b01      	ldr	r3, [sp, #4]
  I2S3_WS_CLK_ENABLE();
 800814c:	9502      	str	r5, [sp, #8]
 800814e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008150:	f043 0301 	orr.w	r3, r3, #1
 8008154:	6323      	str	r3, [r4, #48]	; 0x30
 8008156:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 8008158:	9507      	str	r5, [sp, #28]
  I2S3_WS_CLK_ENABLE();
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	9302      	str	r3, [sp, #8]
 8008160:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 8008162:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008166:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8008168:	2302      	movs	r3, #2
{
 800816a:	4606      	mov	r6, r0
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 800816c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 800816e:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8008170:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8008172:	2306      	movs	r3, #6
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8008174:	482a      	ldr	r0, [pc, #168]	; (8008220 <BSP_AUDIO_OUT_MspInit+0x104>)
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8008176:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8008178:	f7f9 fa26 	bl	80015c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 800817c:	2310      	movs	r3, #16
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 800817e:	a905      	add	r1, sp, #20
 8008180:	4828      	ldr	r0, [pc, #160]	; (8008224 <BSP_AUDIO_OUT_MspInit+0x108>)
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8008182:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8008184:	f7f9 fa20 	bl	80015c8 <HAL_GPIO_Init>
  I2S3_MCK_CLK_ENABLE();
 8008188:	9503      	str	r5, [sp, #12]
 800818a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 800818c:	4824      	ldr	r0, [pc, #144]	; (8008220 <BSP_AUDIO_OUT_MspInit+0x104>)
  I2S3_MCK_CLK_ENABLE();
 800818e:	f043 0304 	orr.w	r3, r3, #4
 8008192:	6323      	str	r3, [r4, #48]	; 0x30
 8008194:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008196:	f003 0304 	and.w	r3, r3, #4
 800819a:	9303      	str	r3, [sp, #12]
 800819c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 800819e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 80081a0:	2380      	movs	r3, #128	; 0x80
 80081a2:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 80081a4:	f7f9 fa10 	bl	80015c8 <HAL_GPIO_Init>
  I2S3_DMAx_CLK_ENABLE(); 
 80081a8:	9504      	str	r5, [sp, #16]
 80081aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hi2s->Instance == I2S3)
 80081ac:	6832      	ldr	r2, [r6, #0]
  I2S3_DMAx_CLK_ENABLE(); 
 80081ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80081b2:	6323      	str	r3, [r4, #48]	; 0x30
 80081b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80081b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081ba:	9304      	str	r3, [sp, #16]
 80081bc:	9b04      	ldr	r3, [sp, #16]
  if(hi2s->Instance == I2S3)
 80081be:	4b1a      	ldr	r3, [pc, #104]	; (8008228 <BSP_AUDIO_OUT_MspInit+0x10c>)
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d121      	bne.n	8008208 <BSP_AUDIO_OUT_MspInit+0xec>
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 80081c4:	4c19      	ldr	r4, [pc, #100]	; (800822c <BSP_AUDIO_OUT_MspInit+0x110>)
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80081c6:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80081c8:	2340      	movs	r3, #64	; 0x40
 80081ca:	60a3      	str	r3, [r4, #8]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 80081cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081d0:	6123      	str	r3, [r4, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 80081d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081d6:	6163      	str	r3, [r4, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 80081d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80081dc:	61a3      	str	r3, [r4, #24]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 80081de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80081e2:	6223      	str	r3, [r4, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80081e4:	2304      	movs	r3, #4
 80081e6:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80081e8:	2303      	movs	r3, #3
 80081ea:	62a3      	str	r3, [r4, #40]	; 0x28
    HAL_DMA_DeInit(&hdma_i2sTx);
 80081ec:	4620      	mov	r0, r4
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80081ee:	4b10      	ldr	r3, [pc, #64]	; (8008230 <BSP_AUDIO_OUT_MspInit+0x114>)
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 80081f0:	6065      	str	r5, [r4, #4]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80081f2:	60e5      	str	r5, [r4, #12]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 80081f4:	61e5      	str	r5, [r4, #28]
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80081f6:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80081f8:	6325      	str	r5, [r4, #48]	; 0x30
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80081fa:	6023      	str	r3, [r4, #0]
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80081fc:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_DMA_DeInit(&hdma_i2sTx);
 80081fe:	f7f9 f87f 	bl	8001300 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_i2sTx);
 8008202:	4620      	mov	r0, r4
 8008204:	f7f8 fffe 	bl	8001204 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8008208:	2200      	movs	r2, #0
 800820a:	210e      	movs	r1, #14
 800820c:	202f      	movs	r0, #47	; 0x2f
 800820e:	f7f8 ff8d 	bl	800112c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 8008212:	202f      	movs	r0, #47	; 0x2f
 8008214:	f7f8 ffbe 	bl	8001194 <HAL_NVIC_EnableIRQ>
}
 8008218:	b00a      	add	sp, #40	; 0x28
 800821a:	bd70      	pop	{r4, r5, r6, pc}
 800821c:	40023800 	.word	0x40023800
 8008220:	40020800 	.word	0x40020800
 8008224:	40020000 	.word	0x40020000
 8008228:	40003c00 	.word	0x40003c00
 800822c:	20000764 	.word	0x20000764
 8008230:	400260b8 	.word	0x400260b8

08008234 <BSP_AUDIO_OUT_Init>:
{    
 8008234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8008238:	4c16      	ldr	r4, [pc, #88]	; (8008294 <BSP_AUDIO_OUT_Init+0x60>)
{    
 800823a:	4615      	mov	r5, r2
 800823c:	4607      	mov	r7, r0
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 800823e:	2200      	movs	r2, #0
 8008240:	4620      	mov	r0, r4
{    
 8008242:	4688      	mov	r8, r1
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8008244:	4629      	mov	r1, r5
 8008246:	f7ff ff39 	bl	80080bc <BSP_AUDIO_OUT_ClockConfig>
  hAudioOutI2s.Instance = I2S3;
 800824a:	4b13      	ldr	r3, [pc, #76]	; (8008298 <BSP_AUDIO_OUT_Init+0x64>)
 800824c:	6023      	str	r3, [r4, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 800824e:	4620      	mov	r0, r4
 8008250:	f7fa fdc9 	bl	8002de6 <HAL_I2S_GetState>
 8008254:	4601      	mov	r1, r0
 8008256:	b910      	cbnz	r0, 800825e <BSP_AUDIO_OUT_Init+0x2a>
    BSP_AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8008258:	4620      	mov	r0, r4
 800825a:	f7ff ff5f 	bl	800811c <BSP_AUDIO_OUT_MspInit>
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 800825e:	4628      	mov	r0, r5
 8008260:	f7ff fe9c 	bl	8007f9c <I2S3_Init>
 8008264:	4604      	mov	r4, r0
 8008266:	b118      	cbz	r0, 8008270 <BSP_AUDIO_OUT_Init+0x3c>
{    
 8008268:	2401      	movs	r4, #1
}
 800826a:	4620      	mov	r0, r4
 800826c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8008270:	4e0a      	ldr	r6, [pc, #40]	; (800829c <BSP_AUDIO_OUT_Init+0x68>)
 8008272:	2094      	movs	r0, #148	; 0x94
 8008274:	68b3      	ldr	r3, [r6, #8]
 8008276:	4798      	blx	r3
 8008278:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800827c:	28e0      	cmp	r0, #224	; 0xe0
 800827e:	d1f3      	bne.n	8008268 <BSP_AUDIO_OUT_Init+0x34>
      pAudioDrv = &cs43l22_drv; 
 8008280:	4b07      	ldr	r3, [pc, #28]	; (80082a0 <BSP_AUDIO_OUT_Init+0x6c>)
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8008282:	4642      	mov	r2, r8
      pAudioDrv = &cs43l22_drv; 
 8008284:	601e      	str	r6, [r3, #0]
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8008286:	4639      	mov	r1, r7
 8008288:	6836      	ldr	r6, [r6, #0]
 800828a:	462b      	mov	r3, r5
 800828c:	2094      	movs	r0, #148	; 0x94
 800828e:	47b0      	blx	r6
  return ret;
 8008290:	e7eb      	b.n	800826a <BSP_AUDIO_OUT_Init+0x36>
 8008292:	bf00      	nop
 8008294:	20000f9c 	.word	0x20000f9c
 8008298:	40003c00 	.word	0x40003c00
 800829c:	20000004 	.word	0x20000004
 80082a0:	200007c4 	.word	0x200007c4

080082a4 <HAL_I2S_TxCpltCallback>:
{
 80082a4:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 80082a6:	6802      	ldr	r2, [r0, #0]
 80082a8:	4b02      	ldr	r3, [pc, #8]	; (80082b4 <HAL_I2S_TxCpltCallback+0x10>)
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d101      	bne.n	80082b2 <HAL_I2S_TxCpltCallback+0xe>
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 80082ae:	f000 fc5d 	bl	8008b6c <BSP_AUDIO_OUT_TransferComplete_CallBack>
 80082b2:	bd08      	pop	{r3, pc}
 80082b4:	40003c00 	.word	0x40003c00

080082b8 <HAL_I2S_TxHalfCpltCallback>:
{
 80082b8:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 80082ba:	6802      	ldr	r2, [r0, #0]
 80082bc:	4b02      	ldr	r3, [pc, #8]	; (80082c8 <HAL_I2S_TxHalfCpltCallback+0x10>)
 80082be:	429a      	cmp	r2, r3
 80082c0:	d101      	bne.n	80082c6 <HAL_I2S_TxHalfCpltCallback+0xe>
    BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80082c2:	f000 fc4d 	bl	8008b60 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
 80082c6:	bd08      	pop	{r3, pc}
 80082c8:	40003c00 	.word	0x40003c00

080082cc <BSP_AUDIO_IN_Record>:
  * @param  pbuf: Main buffer pointer for the recorded data storing  
  * @param  size: Current size of the recorded buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 80082cc:	b508      	push	{r3, lr}
  uint32_t ret = AUDIO_ERROR;
  
  /* Start the process receive DMA */
  HAL_I2S_Receive_DMA(&hAudioInI2s, pbuf, size);
 80082ce:	b28a      	uxth	r2, r1
 80082d0:	4601      	mov	r1, r0
 80082d2:	4802      	ldr	r0, [pc, #8]	; (80082dc <BSP_AUDIO_IN_Record+0x10>)
 80082d4:	f7fa fafc 	bl	80028d0 <HAL_I2S_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
  
  return ret;
}
 80082d8:	2000      	movs	r0, #0
 80082da:	bd08      	pop	{r3, pc}
 80082dc:	20000fe4 	.word	0x20000fe4

080082e0 <BSP_AUDIO_IN_Stop>:

/**
  * @brief  Stops audio recording.
  */
uint8_t BSP_AUDIO_IN_Stop(void)
{
 80082e0:	b508      	push	{r3, lr}
  uint32_t ret = AUDIO_ERROR;
  
  /* Call the Media layer pause function */
  HAL_I2S_DMAStop(&hAudioInI2s);  
 80082e2:	4802      	ldr	r0, [pc, #8]	; (80082ec <BSP_AUDIO_IN_Stop+0xc>)
 80082e4:	f7fa fbce 	bl	8002a84 <HAL_I2S_DMAStop>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
  
  return ret;
}
 80082e8:	2000      	movs	r0, #0
 80082ea:	bd08      	pop	{r3, pc}
 80082ec:	20000fe4 	.word	0x20000fe4

080082f0 <BSP_AUDIO_IN_PDMToPCM>:
  * @param  PDMBuf: Pointer to data PDM buffer
  * @param  PCMBuf: Pointer to data PCM buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_PDMToPCM(uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 80082f0:	b510      	push	{r4, lr}
  uint16_t AppPDM[INTERNAL_BUFF_SIZE/2];
  uint32_t index = 0; 
  
  /* PDM Demux */
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 80082f2:	2300      	movs	r3, #0
{
 80082f4:	b0a0      	sub	sp, #128	; 0x80
 80082f6:	460c      	mov	r4, r1
  {
    AppPDM[index] = HTONS(PDMBuf[index]);
 80082f8:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 80082fc:	020a      	lsls	r2, r1, #8
 80082fe:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
 8008302:	f82d 2013 	strh.w	r2, [sp, r3, lsl #1]
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 8008306:	3301      	adds	r3, #1
 8008308:	2b40      	cmp	r3, #64	; 0x40
 800830a:	d1f5      	bne.n	80082f8 <BSP_AUDIO_IN_PDMToPCM+0x8>
  }
  
  for(index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++)
  {
    /* PDM to PCM filter */
    PDM_Filter_64_LSB((uint8_t*)&AppPDM[index], (uint16_t*)&(PCMBuf[index]), AudioInVolume , (PDMFilter_InitStruct *)&Filter[index]);
 800830c:	4b08      	ldr	r3, [pc, #32]	; (8008330 <BSP_AUDIO_IN_PDMToPCM+0x40>)
 800830e:	881a      	ldrh	r2, [r3, #0]
 8008310:	4b08      	ldr	r3, [pc, #32]	; (8008334 <BSP_AUDIO_IN_PDMToPCM+0x44>)
 8008312:	b292      	uxth	r2, r2
 8008314:	4621      	mov	r1, r4
 8008316:	4668      	mov	r0, sp
 8008318:	f000 ffd2 	bl	80092c0 <PDM_Filter_64_LSB>
 800831c:	2300      	movs	r3, #0
  }
  
  /* Duplicate samples since a single microphone in mounted on STM32F4-Discovery */
  for(index = 0; index < PCM_OUT_SIZE; index++)
  {
    PCMBuf[(index<<1)+1] = PCMBuf[index<<1];
 800831e:	5ae1      	ldrh	r1, [r4, r3]
 8008320:	18e2      	adds	r2, r4, r3
 8008322:	3304      	adds	r3, #4
  for(index = 0; index < PCM_OUT_SIZE; index++)
 8008324:	2b40      	cmp	r3, #64	; 0x40
    PCMBuf[(index<<1)+1] = PCMBuf[index<<1];
 8008326:	8051      	strh	r1, [r2, #2]
  for(index = 0; index < PCM_OUT_SIZE; index++)
 8008328:	d1f9      	bne.n	800831e <BSP_AUDIO_IN_PDMToPCM+0x2e>
  }
	
  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK; 
}
 800832a:	2000      	movs	r0, #0
 800832c:	b020      	add	sp, #128	; 0x80
 800832e:	bd10      	pop	{r4, pc}
 8008330:	200000ac 	.word	0x200000ac
 8008334:	20000f68 	.word	0x20000f68

08008338 <BSP_AUDIO_IN_ClockConfig>:
  * @param  Params : pointer on additional configuration parameters, can be NULL.   
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application
  */
__weak void BSP_AUDIO_IN_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{
 8008338:	b510      	push	{r4, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	460c      	mov	r4, r1
  RCC_PeriphCLKInitTypeDef rccclkinit;
  
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 800833e:	4668      	mov	r0, sp
 8008340:	f7fb f9cc 	bl	80036dc <HAL_RCCEx_GetPeriphCLKConfig>
  {
    /* Audio frequency multiple of 8 (8/16/32/48/96/192)*/
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 192 Mhz */
    /* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 192/6 = 32 Mhz */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8008344:	2308      	movs	r3, #8
  if ((AudioFreq & 0x7) == 0)
 8008346:	f014 0f07 	tst.w	r4, #7
    rccclkinit.PLLI2S.PLLI2SM = 8;
 800834a:	f04f 0201 	mov.w	r2, #1
 800834e:	e88d 000c 	stmia.w	sp, {r2, r3}
    rccclkinit.PLLI2S.PLLI2SN = 192;
 8008352:	bf0b      	itete	eq
 8008354:	23c0      	moveq	r3, #192	; 0xc0
    /* Other Frequency (11.025/22.500/44.100) */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 290 Mhz */
    /* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 290/2 = 145 Mhz */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 290;
 8008356:	f44f 7391 	movne.w	r3, #290	; 0x122
    rccclkinit.PLLI2S.PLLI2SN = 192;
 800835a:	9302      	streq	r3, [sp, #8]
    rccclkinit.PLLI2S.PLLI2SN = 290;
 800835c:	9302      	strne	r3, [sp, #8]
    rccclkinit.PLLI2S.PLLI2SR = 6;
 800835e:	bf0c      	ite	eq
 8008360:	2306      	moveq	r3, #6
    rccclkinit.PLLI2S.PLLI2SR = 2;
 8008362:	2302      	movne	r3, #2
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8008364:	4668      	mov	r0, sp
    rccclkinit.PLLI2S.PLLI2SR = 2;
 8008366:	9303      	str	r3, [sp, #12]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8008368:	f7fb f90a 	bl	8003580 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 800836c:	b006      	add	sp, #24
 800836e:	bd10      	pop	{r4, pc}

08008370 <BSP_AUDIO_IN_MspInit>:
  * @brief  BSP AUDIO IN MSP Init.
  * @param  hi2s: I2S handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_IN_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8008370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008374:	b08a      	sub	sp, #40	; 0x28
  static DMA_HandleTypeDef hdma_i2sRx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the I2S2 peripheral clock */
  I2S2_CLK_ENABLE();
 8008376:	4c38      	ldr	r4, [pc, #224]	; (8008458 <BSP_AUDIO_IN_MspInit+0xe8>)
 8008378:	2500      	movs	r5, #0
 800837a:	9501      	str	r5, [sp, #4]
 800837c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800837e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008382:	6423      	str	r3, [r4, #64]	; 0x40
 8008384:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800838a:	9301      	str	r3, [sp, #4]
 800838c:	9b01      	ldr	r3, [sp, #4]

  /* Enable I2S GPIO clocks */
  I2S2_SCK_GPIO_CLK_ENABLE();
 800838e:	9502      	str	r5, [sp, #8]
 8008390:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008392:	f043 0302 	orr.w	r3, r3, #2
 8008396:	6323      	str	r3, [r4, #48]	; 0x30
 8008398:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800839a:	f003 0302 	and.w	r3, r3, #2
 800839e:	9302      	str	r3, [sp, #8]
 80083a0:	9b02      	ldr	r3, [sp, #8]
  I2S2_MOSI_GPIO_CLK_ENABLE();
 80083a2:	9503      	str	r5, [sp, #12]
 80083a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80083a6:	f043 0304 	orr.w	r3, r3, #4
 80083aa:	6323      	str	r3, [r4, #48]	; 0x30
 80083ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
  
  /* I2S2 pins configuration: SCK and MOSI pins ------------------------------*/
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ae:	9507      	str	r5, [sp, #28]
  I2S2_MOSI_GPIO_CLK_ENABLE();
 80083b0:	f003 0304 	and.w	r3, r3, #4
 80083b4:	9303      	str	r3, [sp, #12]
{
 80083b6:	4606      	mov	r6, r0
  I2S2_MOSI_GPIO_CLK_ENABLE();
 80083b8:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;

  GPIO_InitStruct.Pin = I2S2_SCK_PIN; 
  GPIO_InitStruct.Alternate  = I2S2_SCK_AF;
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 80083ba:	4828      	ldr	r0, [pc, #160]	; (800845c <BSP_AUDIO_IN_MspInit+0xec>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083bc:	2302      	movs	r3, #2
  GPIO_InitStruct.Alternate  = I2S2_SCK_AF;
 80083be:	f04f 0805 	mov.w	r8, #5
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 80083c2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = I2S2_SCK_PIN; 
 80083c4:	f44f 6780 	mov.w	r7, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083c8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80083ca:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin = I2S2_SCK_PIN; 
 80083cc:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Alternate  = I2S2_SCK_AF;
 80083ce:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 80083d2:	f7f9 f8f9 	bl	80015c8 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = I2S2_MOSI_PIN ;
 80083d6:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate  = I2S2_MOSI_AF;
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 80083d8:	a905      	add	r1, sp, #20
 80083da:	4821      	ldr	r0, [pc, #132]	; (8008460 <BSP_AUDIO_IN_MspInit+0xf0>)
  GPIO_InitStruct.Pin = I2S2_MOSI_PIN ;
 80083dc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate  = I2S2_MOSI_AF;
 80083de:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 80083e2:	f7f9 f8f1 	bl	80015c8 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  I2S2_DMAx_CLK_ENABLE();
 80083e6:	9504      	str	r5, [sp, #16]
 80083e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    
  if(hi2s->Instance == I2S2)
 80083ea:	6832      	ldr	r2, [r6, #0]
  I2S2_DMAx_CLK_ENABLE();
 80083ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083f0:	6323      	str	r3, [r4, #48]	; 0x30
 80083f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80083f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083f8:	9304      	str	r3, [sp, #16]
 80083fa:	9b04      	ldr	r3, [sp, #16]
  if(hi2s->Instance == I2S2)
 80083fc:	4b19      	ldr	r3, [pc, #100]	; (8008464 <BSP_AUDIO_IN_MspInit+0xf4>)
 80083fe:	429a      	cmp	r2, r3
 8008400:	d11f      	bne.n	8008442 <BSP_AUDIO_IN_MspInit+0xd2>
  {
    /* Configure the hdma_i2sRx handle parameters */   
    hdma_i2sRx.Init.Channel             = I2S2_DMAx_CHANNEL;
 8008402:	4c19      	ldr	r4, [pc, #100]	; (8008468 <BSP_AUDIO_IN_MspInit+0xf8>)
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE; 
    
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 8008404:	63f4      	str	r4, [r6, #60]	; 0x3c
    hdma_i2sRx.Init.PeriphDataAlignment = I2S2_DMAx_PERIPH_DATA_SIZE;
 8008406:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800840a:	6163      	str	r3, [r4, #20]
    hdma_i2sRx.Init.MemDataAlignment    = I2S2_DMAx_MEM_DATA_SIZE;
 800840c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008410:	61a3      	str	r3, [r4, #24]
    hdma_i2sRx.Init.Mode                = DMA_CIRCULAR;
 8008412:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008416:	61e3      	str	r3, [r4, #28]
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 8008418:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800841c:	6223      	str	r3, [r4, #32]
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800841e:	2303      	movs	r3, #3
 8008420:	62a3      	str	r3, [r4, #40]	; 0x28
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sRx);
 8008422:	4620      	mov	r0, r4
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 8008424:	4b11      	ldr	r3, [pc, #68]	; (800846c <BSP_AUDIO_IN_MspInit+0xfc>)
    hdma_i2sRx.Init.Channel             = I2S2_DMAx_CHANNEL;
 8008426:	6065      	str	r5, [r4, #4]
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8008428:	60a5      	str	r5, [r4, #8]
    hdma_i2sRx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800842a:	60e5      	str	r5, [r4, #12]
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
 800842c:	6127      	str	r7, [r4, #16]
    hdma_i2sRx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800842e:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_i2sRx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8008430:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE; 
 8008432:	6325      	str	r5, [r4, #48]	; 0x30
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 8008434:	6023      	str	r3, [r4, #0]
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 8008436:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_DMA_DeInit(&hdma_i2sRx);
 8008438:	f7f8 ff62 	bl	8001300 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sRx);      
 800843c:	4620      	mov	r0, r4
 800843e:	f7f8 fee1 	bl	8001204 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S2_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8008442:	2200      	movs	r2, #0
 8008444:	210f      	movs	r1, #15
 8008446:	200e      	movs	r0, #14
 8008448:	f7f8 fe70 	bl	800112c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S2_DMAx_IRQ); 
 800844c:	200e      	movs	r0, #14
 800844e:	f7f8 fea1 	bl	8001194 <HAL_NVIC_EnableIRQ>
}
 8008452:	b00a      	add	sp, #40	; 0x28
 8008454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008458:	40023800 	.word	0x40023800
 800845c:	40020400 	.word	0x40020400
 8008460:	40020800 	.word	0x40020800
 8008464:	40003800 	.word	0x40003800
 8008468:	20000704 	.word	0x20000704
 800846c:	40026058 	.word	0x40026058

08008470 <BSP_AUDIO_IN_Init>:
{  
 8008470:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008472:	4606      	mov	r6, r0
  BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 8008474:	4601      	mov	r1, r0
{  
 8008476:	4614      	mov	r4, r2
  BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 8008478:	4822      	ldr	r0, [pc, #136]	; (8008504 <BSP_AUDIO_IN_Init+0x94>)
 800847a:	2200      	movs	r2, #0
 800847c:	f7ff ff5c 	bl	8008338 <BSP_AUDIO_IN_ClockConfig>
static void PDMDecoder_Init(uint32_t AudioFreq, uint32_t ChnlNbr)
{ 
  uint32_t i = 0;
  
  /* Enable CRC peripheral to unlock the PDM library */
  __CRC_CLK_ENABLE();
 8008480:	2300      	movs	r3, #0
 8008482:	9301      	str	r3, [sp, #4]
 8008484:	4b20      	ldr	r3, [pc, #128]	; (8008508 <BSP_AUDIO_IN_Init+0x98>)
 8008486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008488:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800848c:	631a      	str	r2, [r3, #48]	; 0x30
 800848e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008494:	9301      	str	r3, [sp, #4]
 8008496:	9b01      	ldr	r3, [sp, #4]
  
  for(i = 0; i < ChnlNbr; i++)
  {
    /* Filter LP and HP Init */
    Filter[i].LP_HZ = AudioFreq / 2;
 8008498:	0873      	lsrs	r3, r6, #1
 800849a:	ee07 3a90 	vmov	s15, r3
  for(i = 0; i < ChnlNbr; i++)
 800849e:	b164      	cbz	r4, 80084ba <BSP_AUDIO_IN_Init+0x4a>
    Filter[i].LP_HZ = AudioFreq / 2;
 80084a0:	481a      	ldr	r0, [pc, #104]	; (800850c <BSP_AUDIO_IN_Init+0x9c>)
    Filter[i].HP_HZ = 10;
 80084a2:	4b1b      	ldr	r3, [pc, #108]	; (8008510 <BSP_AUDIO_IN_Init+0xa0>)
 80084a4:	6083      	str	r3, [r0, #8]
    Filter[i].LP_HZ = AudioFreq / 2;
 80084a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    Filter[i].Fs = AudioFreq;
	/* On STM32F411E-Discovery a single microphone is mounted, samples are duplicated
       to make stereo audio streams */
    Filter[i].Out_MicChannels = 2;
 80084aa:	2302      	movs	r3, #2
    Filter[i].LP_HZ = AudioFreq / 2;
 80084ac:	edc0 7a01 	vstr	s15, [r0, #4]
    Filter[i].Fs = AudioFreq;
 80084b0:	8006      	strh	r6, [r0, #0]
    Filter[i].Out_MicChannels = 2;
 80084b2:	81c3      	strh	r3, [r0, #14]
    Filter[i].In_MicChannels = ChnlNbr; 
 80084b4:	8184      	strh	r4, [r0, #12]
    PDM_Filter_Init((PDMFilter_InitStruct *)&Filter[i]);
 80084b6:	f000 fdff 	bl	80090b8 <PDM_Filter_Init>
  hAudioInI2s.Instance = I2S2;
 80084ba:	4c12      	ldr	r4, [pc, #72]	; (8008504 <BSP_AUDIO_IN_Init+0x94>)
 80084bc:	4d15      	ldr	r5, [pc, #84]	; (8008514 <BSP_AUDIO_IN_Init+0xa4>)
 80084be:	6025      	str	r5, [r4, #0]
  if(HAL_I2S_GetState(&hAudioInI2s) == HAL_I2S_STATE_RESET)
 80084c0:	4620      	mov	r0, r4
 80084c2:	f7fa fc90 	bl	8002de6 <HAL_I2S_GetState>
 80084c6:	4601      	mov	r1, r0
 80084c8:	b910      	cbnz	r0, 80084d0 <BSP_AUDIO_IN_Init+0x60>
    BSP_AUDIO_IN_MspInit(&hAudioInI2s, NULL);
 80084ca:	4620      	mov	r0, r4
 80084cc:	f7ff ff50 	bl	8008370 <BSP_AUDIO_IN_MspInit>
{
  /* Initialize the hAudioInI2s Instance parameter */
  hAudioInI2s.Instance          = I2S2;
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioInI2s);
 80084d0:	69eb      	ldr	r3, [r5, #28]
  hAudioInI2s.Instance          = I2S2;
 80084d2:	6025      	str	r5, [r4, #0]
  __HAL_I2S_DISABLE(&hAudioInI2s);
 80084d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084d8:	041b      	lsls	r3, r3, #16
 80084da:	0c1b      	lsrs	r3, r3, #16
 80084dc:	61eb      	str	r3, [r5, #28]
  
  /* I2S2 peripheral configuration */
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
  hAudioInI2s.Init.ClockSource  = I2S_CLOCK_PLL;
  hAudioInI2s.Init.CPOL         = I2S_CPOL_HIGH;
 80084de:	2308      	movs	r3, #8
 80084e0:	61a3      	str	r3, [r4, #24]
  hAudioInI2s.Init.DataFormat   = I2S_DATAFORMAT_16B;
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
  hAudioInI2s.Init.Mode         = I2S_MODE_MASTER_RX;
 80084e2:	f44f 7340 	mov.w	r3, #768	; 0x300
  hAudioInI2s.Init.ClockSource  = I2S_CLOCK_PLL;
 80084e6:	2500      	movs	r5, #0
  hAudioInI2s.Init.Mode         = I2S_MODE_MASTER_RX;
 80084e8:	6063      	str	r3, [r4, #4]
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
 80084ea:	0076      	lsls	r6, r6, #1
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 80084ec:	2320      	movs	r3, #32
  
  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 80084ee:	4805      	ldr	r0, [pc, #20]	; (8008504 <BSP_AUDIO_IN_Init+0x94>)
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
 80084f0:	6166      	str	r6, [r4, #20]
  hAudioInI2s.Init.ClockSource  = I2S_CLOCK_PLL;
 80084f2:	61e5      	str	r5, [r4, #28]
  hAudioInI2s.Init.DataFormat   = I2S_DATAFORMAT_16B;
 80084f4:	60e5      	str	r5, [r4, #12]
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
 80084f6:	6125      	str	r5, [r4, #16]
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 80084f8:	60a3      	str	r3, [r4, #8]
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 80084fa:	f7fa fb4b 	bl	8002b94 <HAL_I2S_Init>
}
 80084fe:	4628      	mov	r0, r5
 8008500:	b002      	add	sp, #8
 8008502:	bd70      	pop	{r4, r5, r6, pc}
 8008504:	20000fe4 	.word	0x20000fe4
 8008508:	40023800 	.word	0x40023800
 800850c:	20000f68 	.word	0x20000f68
 8008510:	41200000 	.word	0x41200000
 8008514:	40003800 	.word	0x40003800

08008518 <HAL_I2S_RxCpltCallback>:
{
 8008518:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
 800851a:	f000 fd25 	bl	8008f68 <BSP_AUDIO_IN_TransferComplete_CallBack>
 800851e:	bd08      	pop	{r3, pc}

08008520 <HAL_I2S_RxHalfCpltCallback>:
{
 8008520:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8008522:	f000 fd5f 	bl	8008fe4 <BSP_AUDIO_IN_HalfTransfer_CallBack>
 8008526:	bd08      	pop	{r3, pc}

08008528 <BSP_AUDIO_IN_Error_Callback>:
{   
 8008528:	4770      	bx	lr
	...

0800852c <HAL_I2S_ErrorCallback>:
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 800852c:	6802      	ldr	r2, [r0, #0]
 800852e:	4b07      	ldr	r3, [pc, #28]	; (800854c <HAL_I2S_ErrorCallback+0x20>)
 8008530:	429a      	cmp	r2, r3
{
 8008532:	b510      	push	{r4, lr}
 8008534:	4604      	mov	r4, r0
  if(hi2s->Instance == I2S3)
 8008536:	d101      	bne.n	800853c <HAL_I2S_ErrorCallback+0x10>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8008538:	f000 fb24 	bl	8008b84 <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 800853c:	6822      	ldr	r2, [r4, #0]
 800853e:	4b04      	ldr	r3, [pc, #16]	; (8008550 <HAL_I2S_ErrorCallback+0x24>)
 8008540:	429a      	cmp	r2, r3
 8008542:	d101      	bne.n	8008548 <HAL_I2S_ErrorCallback+0x1c>
  {
    BSP_AUDIO_IN_Error_Callback();
 8008544:	f7ff fff0 	bl	8008528 <BSP_AUDIO_IN_Error_Callback>
 8008548:	bd10      	pop	{r4, pc}
 800854a:	bf00      	nop
 800854c:	40003c00 	.word	0x40003c00
 8008550:	40003800 	.word	0x40003800

08008554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008554:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008556:	2003      	movs	r0, #3
 8008558:	f7f8 fdd6 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800855c:	2200      	movs	r2, #0
 800855e:	4611      	mov	r1, r2
 8008560:	f06f 000b 	mvn.w	r0, #11
 8008564:	f7f8 fde2 	bl	800112c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8008568:	2200      	movs	r2, #0
 800856a:	4611      	mov	r1, r2
 800856c:	f06f 000a 	mvn.w	r0, #10
 8008570:	f7f8 fddc 	bl	800112c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8008574:	2200      	movs	r2, #0
 8008576:	4611      	mov	r1, r2
 8008578:	f06f 0009 	mvn.w	r0, #9
 800857c:	f7f8 fdd6 	bl	800112c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8008580:	2200      	movs	r2, #0
 8008582:	4611      	mov	r1, r2
 8008584:	f06f 0004 	mvn.w	r0, #4
 8008588:	f7f8 fdd0 	bl	800112c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800858c:	2200      	movs	r2, #0
 800858e:	4611      	mov	r1, r2
 8008590:	f06f 0003 	mvn.w	r0, #3
 8008594:	f7f8 fdca 	bl	800112c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8008598:	2200      	movs	r2, #0
 800859a:	4611      	mov	r1, r2
 800859c:	f06f 0001 	mvn.w	r0, #1
 80085a0:	f7f8 fdc4 	bl	800112c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80085a4:	2200      	movs	r2, #0
 80085a6:	4611      	mov	r1, r2
 80085a8:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80085ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80085b0:	f7f8 bdbc 	b.w	800112c <HAL_NVIC_SetPriority>

080085b4 <NMI_Handler>:
 80085b4:	4770      	bx	lr

080085b6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80085b6:	e7fe      	b.n	80085b6 <HardFault_Handler>

080085b8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80085b8:	e7fe      	b.n	80085b8 <MemManage_Handler>

080085ba <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80085ba:	e7fe      	b.n	80085ba <BusFault_Handler>

080085bc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80085bc:	e7fe      	b.n	80085bc <UsageFault_Handler>

080085be <SVC_Handler>:
 80085be:	4770      	bx	lr

080085c0 <DebugMon_Handler>:
 80085c0:	4770      	bx	lr

080085c2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80085c2:	4770      	bx	lr

080085c4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80085c4:	b508      	push	{r3, lr}
  HAL_IncTick();
 80085c6:	f7f8 fd81 	bl	80010cc <HAL_IncTick>

  /* Test on the command: Recording */
  if (CmdIndex == CMD_RECORD)
 80085ca:	4b04      	ldr	r3, [pc, #16]	; (80085dc <SysTick_Handler+0x18>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b01      	cmp	r3, #1
  {
    /* Increment the time recording base variable */
    TimeRecBase ++;
 80085d0:	bf01      	itttt	eq
 80085d2:	4a03      	ldreq	r2, [pc, #12]	; (80085e0 <SysTick_Handler+0x1c>)
 80085d4:	6813      	ldreq	r3, [r2, #0]
 80085d6:	3301      	addeq	r3, #1
 80085d8:	6013      	streq	r3, [r2, #0]
 80085da:	bd08      	pop	{r3, pc}
 80085dc:	2000069c 	.word	0x2000069c
 80085e0:	200007c8 	.word	0x200007c8

080085e4 <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80085e4:	2001      	movs	r0, #1
 80085e6:	f7f9 b8cf 	b.w	8001788 <HAL_GPIO_EXTI_IRQHandler>

080085ea <EXTI4_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI4_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(ACCELERO_INT1_PIN);
 80085ea:	2010      	movs	r0, #16
 80085ec:	f7f9 b8cc 	b.w	8001788 <HAL_GPIO_EXTI_IRQHandler>

080085f0 <DMA1_Stream7_IRQHandler>:
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void I2S3_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hAudioOutI2s.hdmatx);
 80085f0:	4b01      	ldr	r3, [pc, #4]	; (80085f8 <DMA1_Stream7_IRQHandler+0x8>)
 80085f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80085f4:	f7f8 bf2a 	b.w	800144c <HAL_DMA_IRQHandler>
 80085f8:	20000f9c 	.word	0x20000f9c

080085fc <DMA1_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void I2S2_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 80085fc:	4b01      	ldr	r3, [pc, #4]	; (8008604 <DMA1_Stream3_IRQHandler+0x8>)
 80085fe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008600:	f7f8 bf24 	b.w	800144c <HAL_DMA_IRQHandler>
 8008604:	20000fe4 	.word	0x20000fe4

08008608 <TIM4_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&hTimLed);
 8008608:	4801      	ldr	r0, [pc, #4]	; (8008610 <TIM4_IRQHandler+0x8>)
 800860a:	f7fb b963 	b.w	80038d4 <HAL_TIM_IRQHandler>
 800860e:	bf00      	nop
 8008610:	20000cfc 	.word	0x20000cfc

08008614 <OTG_FS_IRQHandler>:
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
   HAL_HCD_IRQHandler(&hHCD);
 8008614:	4801      	ldr	r0, [pc, #4]	; (800861c <OTG_FS_IRQHandler+0x8>)
 8008616:	f7f9 b9c3 	b.w	80019a0 <HAL_HCD_IRQHandler>
 800861a:	bf00      	nop
 800861c:	2000102c 	.word	0x2000102c

08008620 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008620:	490f      	ldr	r1, [pc, #60]	; (8008660 <SystemInit+0x40>)
 8008622:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8008626:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800862a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800862e:	4b0d      	ldr	r3, [pc, #52]	; (8008664 <SystemInit+0x44>)
 8008630:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008632:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8008634:	f042 0201 	orr.w	r2, r2, #1
 8008638:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800863a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8008642:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008646:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008648:	4a07      	ldr	r2, [pc, #28]	; (8008668 <SystemInit+0x48>)
 800864a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008652:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008654:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008656:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800865a:	608b      	str	r3, [r1, #8]
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	e000ed00 	.word	0xe000ed00
 8008664:	40023800 	.word	0x40023800
 8008668:	24003010 	.word	0x24003010

0800866c <HAL_HCD_MspInit>:
  * @brief  Initializes the HCD MSP.
  * @param  hHCD: HCD handle
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef *hHCD)
{
 800866c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Note: On STM32F401-Discovery board only USB OTG FS core is supported. */
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hHCD->Instance == USB_OTG_FS)
 8008670:	6803      	ldr	r3, [r0, #0]
 8008672:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8008676:	b089      	sub	sp, #36	; 0x24
  if(hHCD->Instance == USB_OTG_FS)
 8008678:	d154      	bne.n	8008724 <HAL_HCD_MspInit+0xb8>
  {
    /* Configure USB FS GPIOs */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800867a:	4c2c      	ldr	r4, [pc, #176]	; (800872c <HAL_HCD_MspInit+0xc0>)
    
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 800867c:	482c      	ldr	r0, [pc, #176]	; (8008730 <HAL_HCD_MspInit+0xc4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800867e:	2500      	movs	r5, #0
 8008680:	9500      	str	r5, [sp, #0]
 8008682:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008684:	f043 0301 	orr.w	r3, r3, #1
 8008688:	6323      	str	r3, [r4, #48]	; 0x30
 800868a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800868c:	f003 0301 	and.w	r3, r3, #1
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	9b00      	ldr	r3, [sp, #0]
    HOST_POWERSW_CLK_ENABLE();
 8008694:	9501      	str	r5, [sp, #4]
 8008696:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008698:	f043 0304 	orr.w	r3, r3, #4
 800869c:	6323      	str	r3, [r4, #48]	; 0x30
 800869e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086a0:	9505      	str	r5, [sp, #20]
    HOST_POWERSW_CLK_ENABLE();
 80086a2:	f003 0304 	and.w	r3, r3, #4
 80086a6:	9301      	str	r3, [sp, #4]
 80086a8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80086aa:	f04f 0903 	mov.w	r9, #3
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 80086ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086b2:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80086b4:	f04f 080a 	mov.w	r8, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 80086b8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 80086ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80086bc:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086c0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80086c2:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 80086c6:	f7f8 ff7f 	bl	80015c8 <HAL_GPIO_Init>
    
    /* This for ID line debug */
    GPIO_InitStruct.Pin =  GPIO_PIN_10;
 80086ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;  
 80086ce:	2601      	movs	r6, #1
    GPIO_InitStruct.Pin =  GPIO_PIN_10;
 80086d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 80086d2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80086d4:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 80086d6:	4816      	ldr	r0, [pc, #88]	; (8008730 <HAL_HCD_MspInit+0xc4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80086d8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;  
 80086da:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80086dc:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80086e0:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 80086e4:	f7f8 ff70 	bl	80015c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HOST_POWERSW_VBUS;
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;  
    
    HAL_GPIO_Init(HOST_POWERSW_PORT, &GPIO_InitStruct);
 80086e8:	a903      	add	r1, sp, #12
 80086ea:	4812      	ldr	r0, [pc, #72]	; (8008734 <HAL_HCD_MspInit+0xc8>)
    GPIO_InitStruct.Pin = HOST_POWERSW_VBUS;
 80086ec:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80086ee:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086f0:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;  
 80086f2:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(HOST_POWERSW_PORT, &GPIO_InitStruct);
 80086f4:	f7f8 ff68 	bl	80015c8 <HAL_GPIO_Init>
    
    /* Enable USB FS Clocks */ 
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80086f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086fe:	6363      	str	r3, [r4, #52]	; 0x34
 8008700:	9502      	str	r5, [sp, #8]
 8008702:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008708:	6463      	str	r3, [r4, #68]	; 0x44
 800870a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800870c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008710:	9302      	str	r3, [sp, #8]
    
    /* Set USBFS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8008712:	2043      	movs	r0, #67	; 0x43
 8008714:	462a      	mov	r2, r5
 8008716:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008718:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 800871a:	f7f8 fd07 	bl	800112c <HAL_NVIC_SetPriority>
    
    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800871e:	2043      	movs	r0, #67	; 0x43
 8008720:	f7f8 fd38 	bl	8001194 <HAL_NVIC_EnableIRQ>
  } 
}
 8008724:	b009      	add	sp, #36	; 0x24
 8008726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800872a:	bf00      	nop
 800872c:	40023800 	.word	0x40023800
 8008730:	40020000 	.word	0x40020000
 8008734:	40020800 	.word	0x40020800

08008738 <HAL_HCD_SOF_Callback>:
  * @param  hHCD: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hHCD)
{
  USBH_LL_IncTimer (hHCD->pData);
 8008738:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 800873c:	f7fe bd9c 	b.w	8007278 <USBH_LL_IncTimer>

08008740 <HAL_HCD_Connect_Callback>:
  * @param  hHCD: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hHCD)
{
  USBH_LL_Connect(hHCD->pData);
 8008740:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8008744:	f7fe bda6 	b.w	8007294 <USBH_LL_Connect>

08008748 <HAL_HCD_Disconnect_Callback>:
  * @param  hHCD: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hHCD)
{
  USBH_LL_Disconnect(hHCD->pData);
 8008748:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 800874c:	f7fe bdb5 	b.w	80072ba <USBH_LL_Disconnect>

08008750 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @brief  Notify URB state change callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hHCD, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008750:	4770      	bx	lr
	...

08008754 <USBH_LL_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Init (USBH_HandleTypeDef *phost)
{
  /* Change Systick prioity */
  HAL_NVIC_SetPriority (SysTick_IRQn, 0, 0);
 8008754:	2200      	movs	r2, #0
{
 8008756:	b570      	push	{r4, r5, r6, lr}
  HAL_NVIC_SetPriority (SysTick_IRQn, 0, 0);
 8008758:	4611      	mov	r1, r2
  
  /*Set LL Driver parameters */
  hHCD.Instance = USB_OTG_FS;
 800875a:	4c11      	ldr	r4, [pc, #68]	; (80087a0 <USBH_LL_Init+0x4c>)
{
 800875c:	4606      	mov	r6, r0
  HAL_NVIC_SetPriority (SysTick_IRQn, 0, 0);
 800875e:	f04f 30ff 	mov.w	r0, #4294967295
 8008762:	f7f8 fce3 	bl	800112c <HAL_NVIC_SetPriority>
  hHCD.Instance = USB_OTG_FS;
 8008766:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800876a:	6023      	str	r3, [r4, #0]
  hHCD.Init.Host_channels = 11; 
 800876c:	230b      	movs	r3, #11
 800876e:	60a3      	str	r3, [r4, #8]
  hHCD.Init.dma_enable = 0;
  hHCD.Init.low_power_enable = 0;
  hHCD.Init.phy_itface = HCD_PHY_EMBEDDED; 
 8008770:	2302      	movs	r3, #2
  hHCD.Init.dma_enable = 0;
 8008772:	2500      	movs	r5, #0
  hHCD.Init.phy_itface = HCD_PHY_EMBEDDED; 
 8008774:	61a3      	str	r3, [r4, #24]
  hHCD.Init.Sof_enable = 0;
  hHCD.Init.speed = HCD_SPEED_FULL;
  /* Link The driver to the stack */
  hHCD.pData = phost;
  phost->pData = &hHCD;
 8008776:	f8c6 4390 	str.w	r4, [r6, #912]	; 0x390
  hHCD.Init.speed = HCD_SPEED_FULL;
 800877a:	2303      	movs	r3, #3
  /* Initialize LL Driver */
  HAL_HCD_Init(&hHCD);
 800877c:	4620      	mov	r0, r4
  hHCD.Init.speed = HCD_SPEED_FULL;
 800877e:	60e3      	str	r3, [r4, #12]
  hHCD.Init.dma_enable = 0;
 8008780:	6125      	str	r5, [r4, #16]
  hHCD.Init.low_power_enable = 0;
 8008782:	6225      	str	r5, [r4, #32]
  hHCD.Init.Sof_enable = 0;
 8008784:	61e5      	str	r5, [r4, #28]
  hHCD.pData = phost;
 8008786:	f8c4 6294 	str.w	r6, [r4, #660]	; 0x294
  HAL_HCD_Init(&hHCD);
 800878a:	f7f9 f84c 	bl	8001826 <HAL_HCD_Init>

  USBH_LL_SetTimer (phost, HAL_HCD_GetCurrentFrame(&hHCD));
 800878e:	4620      	mov	r0, r4
 8008790:	f7f9 fc4a 	bl	8002028 <HAL_HCD_GetCurrentFrame>
 8008794:	4601      	mov	r1, r0
 8008796:	4630      	mov	r0, r6
 8008798:	f7fe fd6b 	bl	8007272 <USBH_LL_SetTimer>
  
  return USBH_OK;
}
 800879c:	4628      	mov	r0, r5
 800879e:	bd70      	pop	{r4, r5, r6, pc}
 80087a0:	2000102c 	.word	0x2000102c

080087a4 <USBH_LL_Start>:
  *         Start the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80087a4:	b508      	push	{r3, lr}
  HAL_HCD_Start(phost->pData);
 80087a6:	f8d0 0390 	ldr.w	r0, [r0, #912]	; 0x390
 80087aa:	f7f9 fc07 	bl	8001fbc <HAL_HCD_Start>
  return USBH_OK; 
}
 80087ae:	2000      	movs	r0, #0
 80087b0:	bd08      	pop	{r3, pc}

080087b2 <USBH_LL_Stop>:
  *         Stop the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Stop (USBH_HandleTypeDef *phost)
{
 80087b2:	b508      	push	{r3, lr}
  HAL_HCD_Stop(phost->pData);
 80087b4:	f8d0 0390 	ldr.w	r0, [r0, #912]	; 0x390
 80087b8:	f7f9 fc16 	bl	8001fe8 <HAL_HCD_Stop>
  return USBH_OK; 
}
 80087bc:	2000      	movs	r0, #0
 80087be:	bd08      	pop	{r3, pc}

080087c0 <USBH_LL_GetSpeed>:
  *         Return the USB Host Speed from the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed  (USBH_HandleTypeDef *phost)
{
 80087c0:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
    
  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80087c2:	f8d0 0390 	ldr.w	r0, [r0, #912]	; 0x390
 80087c6:	f7f9 fc32 	bl	800202e <HAL_HCD_GetCurrentSpeed>
 80087ca:	2802      	cmp	r0, #2
 80087cc:	bf9a      	itte	ls
 80087ce:	4b02      	ldrls	r3, [pc, #8]	; (80087d8 <USBH_LL_GetSpeed+0x18>)
 80087d0:	5c18      	ldrbls	r0, [r3, r0]
 80087d2:	2001      	movhi	r0, #1
   default:  
    speed = USBH_SPEED_FULL;    
    break;    
  }
  return speed;
}
 80087d4:	bd08      	pop	{r3, pc}
 80087d6:	bf00      	nop
 80087d8:	0800b100 	.word	0x0800b100

080087dc <USBH_LL_ResetPort>:
  *         Reset the Host Port of the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ResetPort (USBH_HandleTypeDef *phost) 
{
 80087dc:	b508      	push	{r3, lr}
  HAL_HCD_ResetPort(phost->pData);
 80087de:	f8d0 0390 	ldr.w	r0, [r0, #912]	; 0x390
 80087e2:	f7f9 fc13 	bl	800200c <HAL_HCD_ResetPort>
  return USBH_OK; 
}
 80087e6:	2000      	movs	r0, #0
 80087e8:	bd08      	pop	{r3, pc}

080087ea <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index   
  * @retval Packet Size
  */
uint32_t USBH_LL_GetLastXferSize  (USBH_HandleTypeDef *phost, uint8_t pipe)  
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80087ea:	f8d0 0390 	ldr.w	r0, [r0, #912]	; 0x390
 80087ee:	f7f9 bc16 	b.w	800201e <HAL_HCD_HC_GetXferCount>

080087f2 <USBH_LL_OpenPipe>:
                                      uint8_t epnum,                                      
                                      uint8_t dev_address,
                                      uint8_t speed,
                                      uint8_t ep_type,
                                      uint16_t mps)
{
 80087f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_HCD_HC_Init(phost->pData,
 80087f4:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80087f8:	9402      	str	r4, [sp, #8]
 80087fa:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80087fe:	9401      	str	r4, [sp, #4]
 8008800:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8008804:	9400      	str	r4, [sp, #0]
 8008806:	f8d0 0390 	ldr.w	r0, [r0, #912]	; 0x390
 800880a:	f7f8 ffc9 	bl	80017a0 <HAL_HCD_HC_Init>
                  dev_address,
                  speed,
                  ep_type,
                  mps);
  return USBH_OK; 
}
 800880e:	2000      	movs	r0, #0
 8008810:	b004      	add	sp, #16
 8008812:	bd10      	pop	{r4, pc}

08008814 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe_num: Pipe index               
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)   
{
 8008814:	b508      	push	{r3, lr}
  HAL_HCD_HC_Halt(phost->pData, pipe); 
 8008816:	f8d0 0390 	ldr.w	r0, [r0, #912]	; 0x390
 800881a:	f7f8 fff2 	bl	8001802 <HAL_HCD_HC_Halt>
  return USBH_OK; 
}
 800881e:	2000      	movs	r0, #0
 8008820:	bd08      	pop	{r3, pc}

08008822 <USBH_LL_SubmitURB>:
                                            uint8_t ep_type,  
                                            uint8_t token, 
                                            uint8_t* pbuff, 
                                            uint16_t length,
                                            uint8_t do_ping ) 
{
 8008822:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  HAL_HCD_HC_SubmitRequest (phost->pData,pipe, 
 8008824:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8008828:	9403      	str	r4, [sp, #12]
 800882a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800882e:	9402      	str	r4, [sp, #8]
 8008830:	9c07      	ldr	r4, [sp, #28]
 8008832:	9401      	str	r4, [sp, #4]
 8008834:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8008838:	9400      	str	r4, [sp, #0]
 800883a:	f8d0 0390 	ldr.w	r0, [r0, #912]	; 0x390
 800883e:	f7f9 f82f 	bl	80018a0 <HAL_HCD_HC_SubmitRequest>
                            token, 
                            pbuff, 
                            length,
                            do_ping);
  return USBH_OK;   
}
 8008842:	2000      	movs	r0, #0
 8008844:	b004      	add	sp, #16
 8008846:	bd10      	pop	{r4, pc}

08008848 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR  
  *            @arg URB_STALL      
  */
USBH_URBStateTypeDef  USBH_LL_GetURBState (USBH_HandleTypeDef *phost, uint8_t pipe) 
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008848:	f8d0 0390 	ldr.w	r0, [r0, #912]	; 0x390
 800884c:	f7f9 bbe1 	b.w	8002012 <HAL_HCD_HC_GetURBState>

08008850 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef  USBH_LL_DriverVBUS (USBH_HandleTypeDef *phost, uint8_t state)
{
 8008850:	b508      	push	{r3, lr}

  Bit 12 PPWR: Port power
  The application uses this field to control power to this port, and the core 
  clears this bit on an overcurrent condition.
  */
  if (0 == state)
 8008852:	b949      	cbnz	r1, 8008868 <USBH_LL_DriverVBUS+0x18>
  {
    /* DISABLE is needed on output of the Power Switch */
    HAL_GPIO_WritePin(HOST_POWERSW_PORT, HOST_POWERSW_VBUS, GPIO_PIN_SET);
 8008854:	2201      	movs	r2, #1
  }
  else
  {
    /*ENABLE the Power Switch by driving the Enable LOW */
    HAL_GPIO_WritePin(HOST_POWERSW_PORT, HOST_POWERSW_VBUS, GPIO_PIN_RESET);
 8008856:	2101      	movs	r1, #1
 8008858:	4804      	ldr	r0, [pc, #16]	; (800886c <USBH_LL_DriverVBUS+0x1c>)
 800885a:	f7f8 ff8b 	bl	8001774 <HAL_GPIO_WritePin>
  }
  
  HAL_Delay(200);
 800885e:	20c8      	movs	r0, #200	; 0xc8
 8008860:	f7f8 fc42 	bl	80010e8 <HAL_Delay>
  return USBH_OK;  
}
 8008864:	2000      	movs	r0, #0
 8008866:	bd08      	pop	{r3, pc}
    HAL_GPIO_WritePin(HOST_POWERSW_PORT, HOST_POWERSW_VBUS, GPIO_PIN_RESET);
 8008868:	2200      	movs	r2, #0
 800886a:	e7f4      	b.n	8008856 <USBH_LL_DriverVBUS+0x6>
 800886c:	40020800 	.word	0x40020800

08008870 <USBH_LL_SetToggle>:
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef   USBH_LL_SetToggle   (USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)   
{
  if(hHCD.hc[pipe].ep_is_in)
 8008870:	4806      	ldr	r0, [pc, #24]	; (800888c <USBH_LL_SetToggle+0x1c>)
 8008872:	2328      	movs	r3, #40	; 0x28
 8008874:	fb03 0101 	mla	r1, r3, r1, r0
 8008878:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800887c:	b11b      	cbz	r3, 8008886 <USBH_LL_SetToggle+0x16>
  {
    hHCD.hc[pipe].toggle_in = toggle;
 800887e:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  else
  {
    hHCD.hc[pipe].toggle_out = toggle;
  }
  return USBH_OK; 
}
 8008882:	2000      	movs	r0, #0
 8008884:	4770      	bx	lr
    hHCD.hc[pipe].toggle_out = toggle;
 8008886:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 800888a:	e7fa      	b.n	8008882 <USBH_LL_SetToggle+0x12>
 800888c:	2000102c 	.word	0x2000102c

08008890 <USBH_LL_GetToggle>:
  */
uint8_t  USBH_LL_GetToggle   (USBH_HandleTypeDef *phost, uint8_t pipe)   
{
  uint8_t toggle = 0;
  
  if(hHCD.hc[pipe].ep_is_in)
 8008890:	4a06      	ldr	r2, [pc, #24]	; (80088ac <USBH_LL_GetToggle+0x1c>)
 8008892:	2328      	movs	r3, #40	; 0x28
 8008894:	fb03 2101 	mla	r1, r3, r1, r2
 8008898:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800889c:	b113      	cbz	r3, 80088a4 <USBH_LL_GetToggle+0x14>
  {
    toggle = hHCD.hc[pipe].toggle_in;
 800889e:	f891 0050 	ldrb.w	r0, [r1, #80]	; 0x50
 80088a2:	4770      	bx	lr
  }
  else
  {
    toggle = hHCD.hc[pipe].toggle_out;
 80088a4:	f891 0051 	ldrb.w	r0, [r1, #81]	; 0x51
  }
  return toggle; 
}
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	2000102c 	.word	0x2000102c

080088b0 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void  USBH_Delay (uint32_t Delay)
{
  HAL_Delay(Delay);  
 80088b0:	f7f8 bc1a 	b.w	80010e8 <HAL_Delay>

080088b4 <WavePlayerPauseResume>:
  * @param  state: Player state: Pause, Resume or Idle
  * @retval None
  */
void WavePlayerPauseResume(uint32_t wState)
{ 
  if(wState == PAUSE_STATUS)
 80088b4:	b908      	cbnz	r0, 80088ba <WavePlayerPauseResume+0x6>
  {
    BSP_AUDIO_OUT_Pause();   
 80088b6:	f7ff bbb7 	b.w	8008028 <BSP_AUDIO_OUT_Pause>
  }
  else
  {
    BSP_AUDIO_OUT_Resume();   
 80088ba:	f7ff bbc9 	b.w	8008050 <BSP_AUDIO_OUT_Resume>

080088be <WavePlayerStop>:
  * @param  None
  * @retval None
  */
void WavePlayerStop(void)
{ 
  BSP_AUDIO_OUT_Stop(CODEC_PDWN_HW);
 80088be:	2001      	movs	r0, #1
 80088c0:	f7ff bbda 	b.w	8008078 <BSP_AUDIO_OUT_Stop>

080088c4 <WavePlayerInit>:
  * @brief  Initializes the Wave player.
  * @param  AudioFreq: Audio sampling frequency
  * @retval None
  */
int WavePlayerInit(uint32_t AudioFreq)
{ 
 80088c4:	b510      	push	{r4, lr}
 80088c6:	4604      	mov	r4, r0
  /* MEMS Accelerometer configure to manage PAUSE, RESUME operations */
  BSP_ACCELERO_Click_ITConfig();
 80088c8:	f7ff fb60 	bl	8007f8c <BSP_ACCELERO_Click_ITConfig>

  /* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */  
  return(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, Volume, AudioFreq));  
 80088cc:	4622      	mov	r2, r4
 80088ce:	2146      	movs	r1, #70	; 0x46
 80088d0:	2004      	movs	r0, #4
 80088d2:	f7ff fcaf 	bl	8008234 <BSP_AUDIO_OUT_Init>
}
 80088d6:	bd10      	pop	{r4, pc}

080088d8 <WavePlayBack>:
{ 
 80088d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  AudioPlayStart = 1;
 80088dc:	4d8e      	ldr	r5, [pc, #568]	; (8008b18 <WavePlayBack+0x240>)
  RepeatState = REPEAT_ON;
 80088de:	4c8f      	ldr	r4, [pc, #572]	; (8008b1c <WavePlayBack+0x244>)
{ 
 80088e0:	b085      	sub	sp, #20
  UINT bytesread = 0;
 80088e2:	2300      	movs	r3, #0
  AudioPlayStart = 1;
 80088e4:	2201      	movs	r2, #1
 80088e6:	602a      	str	r2, [r5, #0]
  UINT bytesread = 0;
 80088e8:	9303      	str	r3, [sp, #12]
  RepeatState = REPEAT_ON;
 80088ea:	6023      	str	r3, [r4, #0]
  if(WavePlayerInit(AudioFreq) != 0)
 80088ec:	f7ff ffea 	bl	80088c4 <WavePlayerInit>
 80088f0:	e88d 0030 	stmia.w	sp, {r4, r5}
 80088f4:	b108      	cbz	r0, 80088fa <WavePlayBack+0x22>
    Error_Handler();
 80088f6:	f7fe ffbf 	bl	8007878 <Error_Handler>
 80088fa:	4f89      	ldr	r7, [pc, #548]	; (8008b20 <WavePlayBack+0x248>)
	  f_read(&Files[i], &audioPart[i][0], AUDIO_BUFFER_SIZE, &bytesread);
 80088fc:	4d89      	ldr	r5, [pc, #548]	; (8008b24 <WavePlayBack+0x24c>)
{ 
 80088fe:	2400      	movs	r4, #0
 8008900:	f44f 760a 	mov.w	r6, #552	; 0x228
 8008904:	fb06 7604 	mla	r6, r6, r4, r7
	  f_lseek(&Files[i], 0);
 8008908:	2100      	movs	r1, #0
 800890a:	4630      	mov	r0, r6
 800890c:	f7fd fbea 	bl	80060e4 <f_lseek>
	  f_read(&Files[i], &audioPart[i][0], AUDIO_BUFFER_SIZE, &bytesread);
 8008910:	eb05 3104 	add.w	r1, r5, r4, lsl #12
 8008914:	ab03      	add	r3, sp, #12
 8008916:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800891a:	4630      	mov	r0, r6
  for(i = 0; i < 5; i++){
 800891c:	3401      	adds	r4, #1
	  f_read(&Files[i], &audioPart[i][0], AUDIO_BUFFER_SIZE, &bytesread);
 800891e:	f7fd f9cd 	bl	8005cbc <f_read>
  for(i = 0; i < 5; i++){
 8008922:	2c05      	cmp	r4, #5
 8008924:	d1ec      	bne.n	8008900 <WavePlayBack+0x28>
  AudioRemSize = WaveDataLength - bytesread;
 8008926:	4b80      	ldr	r3, [pc, #512]	; (8008b28 <WavePlayBack+0x250>)
 8008928:	9a03      	ldr	r2, [sp, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4e7f      	ldr	r6, [pc, #508]	; (8008b2c <WavePlayBack+0x254>)
	  Audio_Buffer[j] = (uint8_t) tempInt;
 800892e:	4880      	ldr	r0, [pc, #512]	; (8008b30 <WavePlayBack+0x258>)
  AudioRemSize = WaveDataLength - bytesread;
 8008930:	1a9b      	subs	r3, r3, r2
 8008932:	6033      	str	r3, [r6, #0]
  for(j = 0; j < AUDIO_BUFFER_SIZE; j++){
 8008934:	2100      	movs	r1, #0
	  tempInt = (audioPart[0][j] + audioPart[1][j] + audioPart[2][j] + audioPart[3][j] + audioPart[4][j]) / 5;
 8008936:	4622      	mov	r2, r4
 8008938:	4682      	mov	sl, r0
 800893a:	186c      	adds	r4, r5, r1
 800893c:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8008940:	5c6f      	ldrb	r7, [r5, r1]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	443b      	add	r3, r7
 8008946:	f504 5700 	add.w	r7, r4, #8192	; 0x2000
 800894a:	783f      	ldrb	r7, [r7, #0]
 800894c:	443b      	add	r3, r7
 800894e:	f504 5740 	add.w	r7, r4, #12288	; 0x3000
 8008952:	f504 4480 	add.w	r4, r4, #16384	; 0x4000
 8008956:	783f      	ldrb	r7, [r7, #0]
 8008958:	7824      	ldrb	r4, [r4, #0]
 800895a:	443b      	add	r3, r7
 800895c:	4423      	add	r3, r4
 800895e:	fb93 f3f2 	sdiv	r3, r3, r2
	  Audio_Buffer[j] = (uint8_t) tempInt;
 8008962:	540b      	strb	r3, [r1, r0]
  for(j = 0; j < AUDIO_BUFFER_SIZE; j++){
 8008964:	3101      	adds	r1, #1
 8008966:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
	  tempInt = (audioPart[0][j] + audioPart[1][j] + audioPart[2][j] + audioPart[3][j] + audioPart[4][j]) / 5;
 800896a:	b29f      	uxth	r7, r3
  for(j = 0; j < AUDIO_BUFFER_SIZE; j++){
 800896c:	d1e5      	bne.n	800893a <WavePlayBack+0x62>
 800896e:	4c71      	ldr	r4, [pc, #452]	; (8008b34 <WavePlayBack+0x25c>)
  BSP_AUDIO_OUT_Play((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE);
 8008970:	486f      	ldr	r0, [pc, #444]	; (8008b30 <WavePlayBack+0x258>)
 8008972:	8027      	strh	r7, [r4, #0]
 8008974:	f7ff fb32 	bl	8007fdc <BSP_AUDIO_OUT_Play>
  LEDsState = LED6_TOGGLE;
 8008978:	4b6f      	ldr	r3, [pc, #444]	; (8008b38 <WavePlayBack+0x260>)
  PauseResumeStatus = RESUME_STATUS;
 800897a:	4f70      	ldr	r7, [pc, #448]	; (8008b3c <WavePlayBack+0x264>)
  LEDsState = LED6_TOGGLE;
 800897c:	2206      	movs	r2, #6
 800897e:	601a      	str	r2, [r3, #0]
  PauseResumeStatus = RESUME_STATUS;
 8008980:	2201      	movs	r2, #1
 8008982:	603a      	str	r2, [r7, #0]
  PressCount = 0;
 8008984:	4a6e      	ldr	r2, [pc, #440]	; (8008b40 <WavePlayBack+0x268>)
 8008986:	2100      	movs	r1, #0
 8008988:	6011      	str	r1, [r2, #0]
 800898a:	46a1      	mov	r9, r4
 800898c:	4698      	mov	r8, r3
  while((AudioRemSize != 0) && (AppliState != APPLICATION_IDLE))
 800898e:	6833      	ldr	r3, [r6, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 80a5 	beq.w	8008ae0 <WavePlayBack+0x208>
 8008996:	4b6b      	ldr	r3, [pc, #428]	; (8008b44 <WavePlayBack+0x26c>)
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	f000 80a0 	beq.w	8008ae0 <WavePlayBack+0x208>
    if(CmdIndex == CMD_PLAY)
 80089a0:	4b69      	ldr	r3, [pc, #420]	; (8008b48 <WavePlayBack+0x270>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f040 8086 	bne.w	8008ab6 <WavePlayBack+0x1de>
      if(PauseResumeStatus == PAUSE_STATUS)
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d17d      	bne.n	8008aac <WavePlayBack+0x1d4>
        LEDsState = LED6_TOGGLE;
 80089b0:	f8c8 3000 	str.w	r3, [r8]
        WavePlayerPauseResume(PauseResumeStatus);
 80089b4:	6838      	ldr	r0, [r7, #0]
 80089b6:	f7ff ff7d 	bl	80088b4 <WavePlayerPauseResume>
        PauseResumeStatus = IDLE_STATUS;
 80089ba:	2302      	movs	r3, #2
 80089bc:	603b      	str	r3, [r7, #0]
      if(BufferOffset == BUFFER_OFFSET_HALF)
 80089be:	4b63      	ldr	r3, [pc, #396]	; (8008b4c <WavePlayBack+0x274>)
 80089c0:	781b      	ldrb	r3, [r3, #0]
      bytesread = 0;
 80089c2:	2400      	movs	r4, #0
      if(BufferOffset == BUFFER_OFFSET_HALF)
 80089c4:	2b01      	cmp	r3, #1
      bytesread = 0;
 80089c6:	9403      	str	r4, [sp, #12]
      if(BufferOffset == BUFFER_OFFSET_HALF)
 80089c8:	d12f      	bne.n	8008a2a <WavePlayBack+0x152>
    		  f_read(&Files[i], &audioPart[i][0], AUDIO_BUFFER_SIZE/2, (void *)&bytesread);
 80089ca:	f44f 7b0a 	mov.w	fp, #552	; 0x228
 80089ce:	4854      	ldr	r0, [pc, #336]	; (8008b20 <WavePlayBack+0x248>)
 80089d0:	eb05 3104 	add.w	r1, r5, r4, lsl #12
 80089d4:	fb0b 0004 	mla	r0, fp, r4, r0
 80089d8:	ab03      	add	r3, sp, #12
 80089da:	f44f 6200 	mov.w	r2, #2048	; 0x800
    	  for(i = 0; i < 5; i++){
 80089de:	3401      	adds	r4, #1
    		  f_read(&Files[i], &audioPart[i][0], AUDIO_BUFFER_SIZE/2, (void *)&bytesread);
 80089e0:	f7fd f96c 	bl	8005cbc <f_read>
    	  for(i = 0; i < 5; i++){
 80089e4:	2c05      	cmp	r4, #5
 80089e6:	d1f2      	bne.n	80089ce <WavePlayBack+0xf6>
 80089e8:	2200      	movs	r2, #0
 80089ea:	18a9      	adds	r1, r5, r2
    		  tempInt = (audioPart[0][j] + audioPart[1][j] + audioPart[2][j] + audioPart[3][j] + audioPart[4][j]) / 5;
 80089ec:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80089f0:	5ca8      	ldrb	r0, [r5, r2]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	4403      	add	r3, r0
 80089f6:	f501 5000 	add.w	r0, r1, #8192	; 0x2000
 80089fa:	7800      	ldrb	r0, [r0, #0]
 80089fc:	4403      	add	r3, r0
 80089fe:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
 8008a02:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8008a06:	7800      	ldrb	r0, [r0, #0]
 8008a08:	7809      	ldrb	r1, [r1, #0]
 8008a0a:	4403      	add	r3, r0
 8008a0c:	440b      	add	r3, r1
 8008a0e:	fb93 f3f4 	sdiv	r3, r3, r4
    		  Audio_Buffer[j] = (uint8_t) tempInt;
 8008a12:	f80a 3002 	strb.w	r3, [sl, r2]
    	  for(j = 0; j < AUDIO_BUFFER_SIZE / 2; j++){
 8008a16:	3201      	adds	r2, #1
 8008a18:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    		  tempInt = (audioPart[0][j] + audioPart[1][j] + audioPart[2][j] + audioPart[3][j] + audioPart[4][j]) / 5;
 8008a1c:	b299      	uxth	r1, r3
    	  for(j = 0; j < AUDIO_BUFFER_SIZE / 2; j++){
 8008a1e:	d1e4      	bne.n	80089ea <WavePlayBack+0x112>
        BufferOffset = BUFFER_OFFSET_NONE;
 8008a20:	4b4a      	ldr	r3, [pc, #296]	; (8008b4c <WavePlayBack+0x274>)
 8008a22:	f8a9 1000 	strh.w	r1, [r9]
 8008a26:	2200      	movs	r2, #0
 8008a28:	701a      	strb	r2, [r3, #0]
      if(BufferOffset == BUFFER_OFFSET_FULL)
 8008a2a:	4b48      	ldr	r3, [pc, #288]	; (8008b4c <WavePlayBack+0x274>)
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d132      	bne.n	8008a98 <WavePlayBack+0x1c0>
 8008a32:	2400      	movs	r4, #0
			  f_read(&Files[i], &audioPart[i][0], AUDIO_BUFFER_SIZE/2, (void *)&bytesread);
 8008a34:	f44f 7b0a 	mov.w	fp, #552	; 0x228
 8008a38:	4839      	ldr	r0, [pc, #228]	; (8008b20 <WavePlayBack+0x248>)
 8008a3a:	eb05 3104 	add.w	r1, r5, r4, lsl #12
 8008a3e:	fb0b 0004 	mla	r0, fp, r4, r0
 8008a42:	ab03      	add	r3, sp, #12
 8008a44:	f44f 6200 	mov.w	r2, #2048	; 0x800
    	  for(i = 0; i < 5; i++){
 8008a48:	3401      	adds	r4, #1
			  f_read(&Files[i], &audioPart[i][0], AUDIO_BUFFER_SIZE/2, (void *)&bytesread);
 8008a4a:	f7fd f937 	bl	8005cbc <f_read>
    	  for(i = 0; i < 5; i++){
 8008a4e:	2c05      	cmp	r4, #5
 8008a50:	d1f2      	bne.n	8008a38 <WavePlayBack+0x160>
 8008a52:	2200      	movs	r2, #0
 8008a54:	18a9      	adds	r1, r5, r2
			  tempInt = (audioPart[0][j] + audioPart[1][j] + audioPart[2][j] + audioPart[3][j] + audioPart[4][j]) / 5;
 8008a56:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8008a5a:	5ca8      	ldrb	r0, [r5, r2]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	4403      	add	r3, r0
 8008a60:	f501 5000 	add.w	r0, r1, #8192	; 0x2000
 8008a64:	7800      	ldrb	r0, [r0, #0]
 8008a66:	4403      	add	r3, r0
 8008a68:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
 8008a6c:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8008a70:	7800      	ldrb	r0, [r0, #0]
 8008a72:	7809      	ldrb	r1, [r1, #0]
 8008a74:	4403      	add	r3, r0
			  Audio_Buffer[j + (AUDIO_BUFFER_SIZE / 2)] = (uint8_t) tempInt;
 8008a76:	eb0a 0002 	add.w	r0, sl, r2
		  for(j = 0; j < AUDIO_BUFFER_SIZE / 2; j++){
 8008a7a:	3201      	adds	r2, #1
 8008a7c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
			  tempInt = (audioPart[0][j] + audioPart[1][j] + audioPart[2][j] + audioPart[3][j] + audioPart[4][j]) / 5;
 8008a80:	440b      	add	r3, r1
 8008a82:	fb93 f3f4 	sdiv	r3, r3, r4
 8008a86:	b299      	uxth	r1, r3
			  Audio_Buffer[j + (AUDIO_BUFFER_SIZE / 2)] = (uint8_t) tempInt;
 8008a88:	f880 3800 	strb.w	r3, [r0, #2048]	; 0x800
		  for(j = 0; j < AUDIO_BUFFER_SIZE / 2; j++){
 8008a8c:	d1e2      	bne.n	8008a54 <WavePlayBack+0x17c>
        BufferOffset = BUFFER_OFFSET_NONE;
 8008a8e:	4b2f      	ldr	r3, [pc, #188]	; (8008b4c <WavePlayBack+0x274>)
 8008a90:	f8a9 1000 	strh.w	r1, [r9]
 8008a94:	2200      	movs	r2, #0
 8008a96:	701a      	strb	r2, [r3, #0]
      if(AudioRemSize > (AUDIO_BUFFER_SIZE / 2))
 8008a98:	6833      	ldr	r3, [r6, #0]
 8008a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
        AudioRemSize -= bytesread;
 8008a9e:	bf85      	ittet	hi
 8008aa0:	6833      	ldrhi	r3, [r6, #0]
 8008aa2:	9a03      	ldrhi	r2, [sp, #12]
        AudioRemSize = 0;
 8008aa4:	2300      	movls	r3, #0
        AudioRemSize -= bytesread;
 8008aa6:	1a9b      	subhi	r3, r3, r2
        AudioRemSize = 0;
 8008aa8:	6033      	str	r3, [r6, #0]
 8008aaa:	e770      	b.n	800898e <WavePlayBack+0xb6>
      else if(PauseResumeStatus == RESUME_STATUS)
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d185      	bne.n	80089be <WavePlayBack+0xe6>
        LEDsState = LED6_TOGGLE;
 8008ab2:	2306      	movs	r3, #6
 8008ab4:	e77c      	b.n	80089b0 <WavePlayBack+0xd8>
      WavePlayerStop();
 8008ab6:	f7ff ff02 	bl	80088be <WavePlayerStop>
      f_close(&Files[0]);
 8008aba:	4819      	ldr	r0, [pc, #100]	; (8008b20 <WavePlayBack+0x248>)
 8008abc:	f7fd fb01 	bl	80060c2 <f_close>
      f_close(&Files[1]);
 8008ac0:	4823      	ldr	r0, [pc, #140]	; (8008b50 <WavePlayBack+0x278>)
 8008ac2:	f7fd fafe 	bl	80060c2 <f_close>
      f_close(&Files[2]);
 8008ac6:	4823      	ldr	r0, [pc, #140]	; (8008b54 <WavePlayBack+0x27c>)
 8008ac8:	f7fd fafb 	bl	80060c2 <f_close>
      f_close(&Files[3]);
 8008acc:	4822      	ldr	r0, [pc, #136]	; (8008b58 <WavePlayBack+0x280>)
 8008ace:	f7fd faf8 	bl	80060c2 <f_close>
      f_close(&Files[4]);
 8008ad2:	4822      	ldr	r0, [pc, #136]	; (8008b5c <WavePlayBack+0x284>)
 8008ad4:	f7fd faf5 	bl	80060c2 <f_close>
      RepeatState = REPEAT_ON;
 8008ad8:	9a00      	ldr	r2, [sp, #0]
      AudioRemSize = 0;
 8008ada:	2300      	movs	r3, #0
 8008adc:	6033      	str	r3, [r6, #0]
      RepeatState = REPEAT_ON;
 8008ade:	6013      	str	r3, [r2, #0]
  RepeatState = REPEAT_ON;
 8008ae0:	9a00      	ldr	r2, [sp, #0]
  LEDsState = LEDS_OFF;
 8008ae2:	2307      	movs	r3, #7
 8008ae4:	f8c8 3000 	str.w	r3, [r8]
  RepeatState = REPEAT_ON;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	6013      	str	r3, [r2, #0]
  AudioPlayStart = 0;
 8008aec:	9a01      	ldr	r2, [sp, #4]
 8008aee:	6013      	str	r3, [r2, #0]
  WavePlayerStop();
 8008af0:	f7ff fee5 	bl	80088be <WavePlayerStop>
  f_close(&Files[0]);
 8008af4:	480a      	ldr	r0, [pc, #40]	; (8008b20 <WavePlayBack+0x248>)
 8008af6:	f7fd fae4 	bl	80060c2 <f_close>
   f_close(&Files[1]);
 8008afa:	4815      	ldr	r0, [pc, #84]	; (8008b50 <WavePlayBack+0x278>)
 8008afc:	f7fd fae1 	bl	80060c2 <f_close>
   f_close(&Files[2]);
 8008b00:	4814      	ldr	r0, [pc, #80]	; (8008b54 <WavePlayBack+0x27c>)
 8008b02:	f7fd fade 	bl	80060c2 <f_close>
   f_close(&Files[3]);
 8008b06:	4814      	ldr	r0, [pc, #80]	; (8008b58 <WavePlayBack+0x280>)
 8008b08:	f7fd fadb 	bl	80060c2 <f_close>
   f_close(&Files[4]);
 8008b0c:	4813      	ldr	r0, [pc, #76]	; (8008b5c <WavePlayBack+0x284>)
 8008b0e:	f7fd fad8 	bl	80060c2 <f_close>
}
 8008b12:	b005      	add	sp, #20
 8008b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b18:	200007cc 	.word	0x200007cc
 8008b1c:	200006a4 	.word	0x200006a4
 8008b20:	200062c8 	.word	0x200062c8
 8008b24:	200012c4 	.word	0x200012c4
 8008b28:	200007d8 	.word	0x200007d8
 8008b2c:	200007d0 	.word	0x200007d0
 8008b30:	20006d90 	.word	0x20006d90
 8008b34:	200062c4 	.word	0x200062c4
 8008b38:	20007fb8 	.word	0x20007fb8
 8008b3c:	2000008c 	.word	0x2000008c
 8008b40:	20000090 	.word	0x20000090
 8008b44:	20000698 	.word	0x20000698
 8008b48:	2000069c 	.word	0x2000069c
 8008b4c:	200007d4 	.word	0x200007d4
 8008b50:	200064f0 	.word	0x200064f0
 8008b54:	20006718 	.word	0x20006718
 8008b58:	20006940 	.word	0x20006940
 8008b5c:	20006b68 	.word	0x20006b68

08008b60 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
  BufferOffset = BUFFER_OFFSET_HALF;
 8008b60:	4b01      	ldr	r3, [pc, #4]	; (8008b68 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x8>)
 8008b62:	2201      	movs	r2, #1
 8008b64:	701a      	strb	r2, [r3, #0]
 8008b66:	4770      	bx	lr
 8008b68:	200007d4 	.word	0x200007d4

08008b6c <BSP_AUDIO_OUT_TransferComplete_CallBack>:
* @param  None
* @retval None
*/
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
  BufferOffset = BUFFER_OFFSET_FULL;
 8008b6c:	4b03      	ldr	r3, [pc, #12]	; (8008b7c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x10>)
  BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE /2);
 8008b6e:	4804      	ldr	r0, [pc, #16]	; (8008b80 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>)
  BufferOffset = BUFFER_OFFSET_FULL;
 8008b70:	2202      	movs	r2, #2
  BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE /2);
 8008b72:	f44f 6100 	mov.w	r1, #2048	; 0x800
  BufferOffset = BUFFER_OFFSET_FULL;
 8008b76:	701a      	strb	r2, [r3, #0]
  BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE /2);
 8008b78:	f7ff ba4e 	b.w	8008018 <BSP_AUDIO_OUT_ChangeBuffer>
 8008b7c:	200007d4 	.word	0x200007d4
 8008b80:	20006d90 	.word	0x20006d90

08008b84 <BSP_AUDIO_OUT_Error_CallBack>:
* @brief  Manages the DMA FIFO error interrupt.
* @param  None
* @retval None
*/
void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8008b84:	e7fe      	b.n	8008b84 <BSP_AUDIO_OUT_Error_CallBack>
	...

08008b88 <WavePlayerStart>:
  * @brief  Starts Wave player.
  * @param  None
  * @retval None
  */
void WavePlayerStart(void)
{
 8008b88:	b500      	push	{lr}
 8008b8a:	b08f      	sub	sp, #60	; 0x3c
  UINT bytesread = 0;
 8008b8c:	2300      	movs	r3, #0
  char path[] = "0:/";
 8008b8e:	a90e      	add	r1, sp, #56	; 0x38
  UINT bytesread = 0;
 8008b90:	9301      	str	r3, [sp, #4]
  char path[] = "0:/";
 8008b92:	4b2a      	ldr	r3, [pc, #168]	; (8008c3c <WavePlayerStart+0xb4>)
 8008b94:	f841 3d30 	str.w	r3, [r1, #-48]!
  //char* wavefilename = NULL;
  WAVE_FormatTypeDef waveformat;
  
  /* Get the read out protection status */
  if(f_opendir(&Directory, path) == FR_OK)
 8008b98:	4829      	ldr	r0, [pc, #164]	; (8008c40 <WavePlayerStart+0xb8>)
 8008b9a:	f7fd fb62 	bl	8006262 <f_opendir>
 8008b9e:	bb18      	cbnz	r0, 8008be8 <WavePlayerStart+0x60>
      wavefilename = WAVE_NAME; 
    }
    */
    /* Open the Wave file to be played */
    //if(f_open(&FileRead, wavefilename , FA_READ) != FR_OK)
    if(f_open(&Files[0], "0:wave0.wav", FA_READ) != FR_OK && f_open(&Files[1], "0:wave1.wav", FA_READ) != FR_OK && f_open(&Files[2], "0:wave2.wav", FA_READ) != FR_OK && f_open(&Files[3], "0:wave3.wav", FA_READ) != FR_OK && f_open(&Files[4], "0:wave4.wav", FA_READ) != FR_OK )
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	4928      	ldr	r1, [pc, #160]	; (8008c44 <WavePlayerStart+0xbc>)
 8008ba4:	4828      	ldr	r0, [pc, #160]	; (8008c48 <WavePlayerStart+0xc0>)
 8008ba6:	f7fc ffa7 	bl	8005af8 <f_open>
 8008baa:	b300      	cbz	r0, 8008bee <WavePlayerStart+0x66>
 8008bac:	2201      	movs	r2, #1
 8008bae:	4927      	ldr	r1, [pc, #156]	; (8008c4c <WavePlayerStart+0xc4>)
 8008bb0:	4827      	ldr	r0, [pc, #156]	; (8008c50 <WavePlayerStart+0xc8>)
 8008bb2:	f7fc ffa1 	bl	8005af8 <f_open>
 8008bb6:	b1d0      	cbz	r0, 8008bee <WavePlayerStart+0x66>
 8008bb8:	2201      	movs	r2, #1
 8008bba:	4926      	ldr	r1, [pc, #152]	; (8008c54 <WavePlayerStart+0xcc>)
 8008bbc:	4826      	ldr	r0, [pc, #152]	; (8008c58 <WavePlayerStart+0xd0>)
 8008bbe:	f7fc ff9b 	bl	8005af8 <f_open>
 8008bc2:	b1a0      	cbz	r0, 8008bee <WavePlayerStart+0x66>
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	4925      	ldr	r1, [pc, #148]	; (8008c5c <WavePlayerStart+0xd4>)
 8008bc8:	4825      	ldr	r0, [pc, #148]	; (8008c60 <WavePlayerStart+0xd8>)
 8008bca:	f7fc ff95 	bl	8005af8 <f_open>
 8008bce:	b170      	cbz	r0, 8008bee <WavePlayerStart+0x66>
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	4924      	ldr	r1, [pc, #144]	; (8008c64 <WavePlayerStart+0xdc>)
 8008bd4:	4824      	ldr	r0, [pc, #144]	; (8008c68 <WavePlayerStart+0xe0>)
 8008bd6:	f7fc ff8f 	bl	8005af8 <f_open>
 8008bda:	b140      	cbz	r0, 8008bee <WavePlayerStart+0x66>
    {
      BSP_LED_On(LED5);
 8008bdc:	2002      	movs	r0, #2
 8008bde:	f7ff f8d3 	bl	8007d88 <BSP_LED_On>
      CmdIndex = CMD_RECORD;
 8008be2:	4b22      	ldr	r3, [pc, #136]	; (8008c6c <WavePlayerStart+0xe4>)
 8008be4:	2201      	movs	r2, #1
 8008be6:	601a      	str	r2, [r3, #0]
    
      /* Play the Wave */
      WavePlayBack(waveformat.SampleRate);
    }    
  }
}
 8008be8:	b00f      	add	sp, #60	; 0x3c
 8008bea:	f85d fb04 	ldr.w	pc, [sp], #4
    	f_open(&Files[0], "0:wave0.wav", FA_READ);
 8008bee:	2201      	movs	r2, #1
 8008bf0:	4914      	ldr	r1, [pc, #80]	; (8008c44 <WavePlayerStart+0xbc>)
 8008bf2:	4815      	ldr	r0, [pc, #84]	; (8008c48 <WavePlayerStart+0xc0>)
 8008bf4:	f7fc ff80 	bl	8005af8 <f_open>
		f_open(&Files[1], "0:wave1.wav", FA_READ);
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	4914      	ldr	r1, [pc, #80]	; (8008c4c <WavePlayerStart+0xc4>)
 8008bfc:	4814      	ldr	r0, [pc, #80]	; (8008c50 <WavePlayerStart+0xc8>)
 8008bfe:	f7fc ff7b 	bl	8005af8 <f_open>
		f_open(&Files[2], "0:wave2.wav", FA_READ);
 8008c02:	2201      	movs	r2, #1
 8008c04:	4913      	ldr	r1, [pc, #76]	; (8008c54 <WavePlayerStart+0xcc>)
 8008c06:	4814      	ldr	r0, [pc, #80]	; (8008c58 <WavePlayerStart+0xd0>)
 8008c08:	f7fc ff76 	bl	8005af8 <f_open>
		f_open(&Files[3], "0:wave3.wav", FA_READ);
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	4913      	ldr	r1, [pc, #76]	; (8008c5c <WavePlayerStart+0xd4>)
 8008c10:	4813      	ldr	r0, [pc, #76]	; (8008c60 <WavePlayerStart+0xd8>)
 8008c12:	f7fc ff71 	bl	8005af8 <f_open>
		f_open(&Files[4], "0:wave4.wav", FA_READ);
 8008c16:	2201      	movs	r2, #1
 8008c18:	4912      	ldr	r1, [pc, #72]	; (8008c64 <WavePlayerStart+0xdc>)
 8008c1a:	4813      	ldr	r0, [pc, #76]	; (8008c68 <WavePlayerStart+0xe0>)
 8008c1c:	f7fc ff6c 	bl	8005af8 <f_open>
      f_read (&Files[0], &waveformat, sizeof(waveformat), &bytesread);
 8008c20:	ab01      	add	r3, sp, #4
 8008c22:	222c      	movs	r2, #44	; 0x2c
 8008c24:	a903      	add	r1, sp, #12
 8008c26:	4808      	ldr	r0, [pc, #32]	; (8008c48 <WavePlayerStart+0xc0>)
 8008c28:	f7fd f848 	bl	8005cbc <f_read>
      WaveDataLength = waveformat.FileSize;
 8008c2c:	4b10      	ldr	r3, [pc, #64]	; (8008c70 <WavePlayerStart+0xe8>)
 8008c2e:	9a04      	ldr	r2, [sp, #16]
      WavePlayBack(waveformat.SampleRate);
 8008c30:	9809      	ldr	r0, [sp, #36]	; 0x24
      WaveDataLength = waveformat.FileSize;
 8008c32:	601a      	str	r2, [r3, #0]
      WavePlayBack(waveformat.SampleRate);
 8008c34:	f7ff fe50 	bl	80088d8 <WavePlayBack>
}
 8008c38:	e7d6      	b.n	8008be8 <WavePlayerStart+0x60>
 8008c3a:	bf00      	nop
 8008c3c:	002f3a30 	.word	0x002f3a30
 8008c40:	20007d90 	.word	0x20007d90
 8008c44:	0800b103 	.word	0x0800b103
 8008c48:	200062c8 	.word	0x200062c8
 8008c4c:	0800b10f 	.word	0x0800b10f
 8008c50:	200064f0 	.word	0x200064f0
 8008c54:	0800b11b 	.word	0x0800b11b
 8008c58:	20006718 	.word	0x20006718
 8008c5c:	0800b127 	.word	0x0800b127
 8008c60:	20006940 	.word	0x20006940
 8008c64:	0800b133 	.word	0x0800b133
 8008c68:	20006b68 	.word	0x20006b68
 8008c6c:	2000069c 	.word	0x2000069c
 8008c70:	200007d8 	.word	0x200007d8

08008c74 <WavePlayer_CallBack>:
  * @brief  Resets the Wave player.
  * @param  None
  * @retval None
  */
void WavePlayer_CallBack(void)
{
 8008c74:	b538      	push	{r3, r4, r5, lr}
  if(AppliState != APPLICATION_IDLE)
 8008c76:	4b12      	ldr	r3, [pc, #72]	; (8008cc0 <WavePlayer_CallBack+0x4c>)
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	b1fb      	cbz	r3, 8008cbc <WavePlayer_CallBack+0x48>
  {
    /* Reset the Wave player variables */
    RepeatState = REPEAT_ON;
 8008c7c:	4a11      	ldr	r2, [pc, #68]	; (8008cc4 <WavePlayer_CallBack+0x50>)
 8008c7e:	2300      	movs	r3, #0
 8008c80:	6013      	str	r3, [r2, #0]
    AudioPlayStart = 0;
 8008c82:	4a11      	ldr	r2, [pc, #68]	; (8008cc8 <WavePlayer_CallBack+0x54>)
 8008c84:	6013      	str	r3, [r2, #0]
    LEDsState = LEDS_OFF;
 8008c86:	4a11      	ldr	r2, [pc, #68]	; (8008ccc <WavePlayer_CallBack+0x58>)
 8008c88:	2107      	movs	r1, #7
 8008c8a:	6011      	str	r1, [r2, #0]
    PauseResumeStatus = RESUME_STATUS;
 8008c8c:	4a10      	ldr	r2, [pc, #64]	; (8008cd0 <WavePlayer_CallBack+0x5c>)
 8008c8e:	2401      	movs	r4, #1
 8008c90:	6014      	str	r4, [r2, #0]
    WaveDataLength =0;
 8008c92:	4a10      	ldr	r2, [pc, #64]	; (8008cd4 <WavePlayer_CallBack+0x60>)
 8008c94:	6013      	str	r3, [r2, #0]
    PressCount = 0;
 8008c96:	4a10      	ldr	r2, [pc, #64]	; (8008cd8 <WavePlayer_CallBack+0x64>)
    
    /* Stop the Codec */
    if(BSP_AUDIO_OUT_Stop(CODEC_PDWN_HW) != AUDIO_OK)
 8008c98:	4620      	mov	r0, r4
    PressCount = 0;
 8008c9a:	6013      	str	r3, [r2, #0]
    if(BSP_AUDIO_OUT_Stop(CODEC_PDWN_HW) != AUDIO_OK)
 8008c9c:	f7ff f9ec 	bl	8008078 <BSP_AUDIO_OUT_Stop>
 8008ca0:	4605      	mov	r5, r0
 8008ca2:	b100      	cbz	r0, 8008ca6 <WavePlayer_CallBack+0x32>
 8008ca4:	e7fe      	b.n	8008ca4 <WavePlayer_CallBack+0x30>
    {
      while(1){};
    }
    
    /* Turn OFF LED3, LED4 and LED6 */
    BSP_LED_Off(LED3);
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f7ff f87c 	bl	8007da4 <BSP_LED_Off>
    BSP_LED_Off(LED4);
 8008cac:	4628      	mov	r0, r5
 8008cae:	f7ff f879 	bl	8007da4 <BSP_LED_Off>
    BSP_LED_Off(LED6);
 8008cb2:	2003      	movs	r0, #3
  }
} 
 8008cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    BSP_LED_Off(LED6);
 8008cb8:	f7ff b874 	b.w	8007da4 <BSP_LED_Off>
 8008cbc:	bd38      	pop	{r3, r4, r5, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20000698 	.word	0x20000698
 8008cc4:	200006a4 	.word	0x200006a4
 8008cc8:	200007cc 	.word	0x200007cc
 8008ccc:	20007fb8 	.word	0x20007fb8
 8008cd0:	2000008c 	.word	0x2000008c
 8008cd4:	200007d8 	.word	0x200007d8
 8008cd8:	20000090 	.word	0x20000090

08008cdc <WaveRecorderStop>:
  * @brief  Stop Audio recording.
  * @param  None
  * @retval None
  */
uint32_t WaveRecorderStop(void)
{
 8008cdc:	b508      	push	{r3, lr}
  return BSP_AUDIO_IN_Stop();
 8008cde:	f7ff faff 	bl	80082e0 <BSP_AUDIO_IN_Stop>
}
 8008ce2:	bd08      	pop	{r3, pc}

08008ce4 <WaveRecorderProcess>:
  * @brief  Update the recorded data. 
  * @param  None
  * @retval None
  */
void WaveRecorderProcess(void)
{     
 8008ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Current size of the recorded buffer */
  uint32_t byteswritten = 0; 

  WaveCounter = 0;
 8008ce8:	4a8d      	ldr	r2, [pc, #564]	; (8008f20 <WaveRecorderProcess+0x23c>)
  LEDsState = LEDS_OFF;
 8008cea:	4e8e      	ldr	r6, [pc, #568]	; (8008f24 <WaveRecorderProcess+0x240>)

  /* Remove Wave file if it exists on USB Flash Disk */
  f_unlink(REC_WAVE_NAME);
 8008cec:	488e      	ldr	r0, [pc, #568]	; (8008f28 <WaveRecorderProcess+0x244>)
{     
 8008cee:	b085      	sub	sp, #20
  uint32_t byteswritten = 0; 
 8008cf0:	2300      	movs	r3, #0
  WaveCounter = 0;
 8008cf2:	6013      	str	r3, [r2, #0]
  uint32_t byteswritten = 0; 
 8008cf4:	9303      	str	r3, [sp, #12]
  LEDsState = LEDS_OFF;
 8008cf6:	2307      	movs	r3, #7
 8008cf8:	6033      	str	r3, [r6, #0]
  f_unlink(REC_WAVE_NAME);
 8008cfa:	f7fd fb0e 	bl	800631a <f_unlink>
  
  /* Open the file to write on it */
  if((AppliState == APPLICATION_IDLE) || (f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK))
 8008cfe:	4b8b      	ldr	r3, [pc, #556]	; (8008f2c <WaveRecorderProcess+0x248>)
 8008d00:	781a      	ldrb	r2, [r3, #0]
 8008d02:	4698      	mov	r8, r3
 8008d04:	b132      	cbz	r2, 8008d14 <WaveRecorderProcess+0x30>
 8008d06:	220a      	movs	r2, #10
 8008d08:	4987      	ldr	r1, [pc, #540]	; (8008f28 <WaveRecorderProcess+0x244>)
 8008d0a:	4889      	ldr	r0, [pc, #548]	; (8008f30 <WaveRecorderProcess+0x24c>)
 8008d0c:	f7fc fef4 	bl	8005af8 <f_open>
 8008d10:	4605      	mov	r5, r0
 8008d12:	b118      	cbz	r0, 8008d1c <WaveRecorderProcess+0x38>
  {   
    while(1)
    {
     /* Toggle LED5 in infinite loop to signal that: USB Flash Disk is not connected/removed
      or an issue has occurred when creating/opening Wave file */
      BSP_LED_Toggle(LED5); 
 8008d14:	2002      	movs	r0, #2
 8008d16:	f7ff f853 	bl	8007dc0 <BSP_LED_Toggle>
 8008d1a:	e7fb      	b.n	8008d14 <WaveRecorderProcess+0x30>
    }
  }
  else
  {
    WaveRecStatus = 1;
 8008d1c:	4b85      	ldr	r3, [pc, #532]	; (8008f34 <WaveRecorderProcess+0x250>)
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
  /* write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 8008d1e:	4c86      	ldr	r4, [pc, #536]	; (8008f38 <WaveRecorderProcess+0x254>)
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 8008d20:	4a86      	ldr	r2, [pc, #536]	; (8008f3c <WaveRecorderProcess+0x258>)
  pHeader[3] = 'F';
  
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be be written back at the end of the 
  recording opearation.  Example: 661500 Btyes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 8008d22:	7125      	strb	r5, [r4, #4]
    WaveRecStatus = 1;
 8008d24:	f04f 0901 	mov.w	r9, #1
 8008d28:	f8c3 9000 	str.w	r9, [r3]
  pHeader[5] = 0x4C;
  pHeader[6] = 0x1D;
  pHeader[7] = 0x00;
  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 8008d2c:	f04f 0e57 	mov.w	lr, #87	; 0x57
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 8008d30:	4b83      	ldr	r3, [pc, #524]	; (8008f40 <WaveRecorderProcess+0x25c>)
  pHeader[8]  = 'W';
 8008d32:	f884 e008 	strb.w	lr, [r4, #8]
  pHeader[9]  = 'A';
 8008d36:	f04f 0e41 	mov.w	lr, #65	; 0x41
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 8008d3a:	2710      	movs	r7, #16
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 8008d3c:	f44f 5a7a 	mov.w	sl, #16000	; 0x3e80
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 8008d40:	f04f 0c02 	mov.w	ip, #2
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 8008d44:	605a      	str	r2, [r3, #4]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 8008d46:	2004      	movs	r0, #4
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 8008d48:	222c      	movs	r2, #44	; 0x2c
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8008d4a:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
  pHeader[9]  = 'A';
 8008d4e:	f884 e009 	strb.w	lr, [r4, #9]
  pHeader[10] = 'V';
 8008d52:	f04f 0e56 	mov.w	lr, #86	; 0x56
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 8008d56:	611a      	str	r2, [r3, #16]
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 8008d58:	f8c3 a018 	str.w	sl, [r3, #24]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 8008d5c:	f8a3 c016 	strh.w	ip, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 8008d60:	845f      	strh	r7, [r3, #34]	; 0x22
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8008d62:	61d9      	str	r1, [r3, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 8008d64:	8418      	strh	r0, [r3, #32]
  pHeader[10] = 'V';
 8008d66:	f884 e00a 	strb.w	lr, [r4, #10]
  pHeader[0] = 'R';
 8008d6a:	2352      	movs	r3, #82	; 0x52
  pHeader[11] = 'E';
 8008d6c:	f04f 0e45 	mov.w	lr, #69	; 0x45
  pHeader[0] = 'R';
 8008d70:	7023      	strb	r3, [r4, #0]
  pHeader[11] = 'E';
 8008d72:	f884 e00b 	strb.w	lr, [r4, #11]
  pHeader[1] = 'I';
 8008d76:	2349      	movs	r3, #73	; 0x49
  
  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 8008d78:	f04f 0e66 	mov.w	lr, #102	; 0x66
  pHeader[1] = 'I';
 8008d7c:	7063      	strb	r3, [r4, #1]
  pHeader[12]  = 'f';
 8008d7e:	f884 e00c 	strb.w	lr, [r4, #12]
  pHeader[2] = 'F';
 8008d82:	2346      	movs	r3, #70	; 0x46
  pHeader[13]  = 'm';
 8008d84:	f04f 0e6d 	mov.w	lr, #109	; 0x6d
  pHeader[14]  = 't';
  pHeader[15]  = ' ';
 8008d88:	f04f 0b20 	mov.w	fp, #32
  pHeader[5] = 0x4C;
 8008d8c:	214c      	movs	r1, #76	; 0x4c
  pHeader[2] = 'F';
 8008d8e:	70a3      	strb	r3, [r4, #2]
  pHeader[3] = 'F';
 8008d90:	70e3      	strb	r3, [r4, #3]
  pHeader[13]  = 'm';
 8008d92:	f884 e00d 	strb.w	lr, [r4, #13]
  pHeader[6] = 0x1D;
 8008d96:	231d      	movs	r3, #29
  pHeader[14]  = 't';
 8008d98:	f04f 0e74 	mov.w	lr, #116	; 0x74
  pHeader[15]  = ' ';
 8008d9c:	f884 b00f 	strb.w	fp, [r4, #15]
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
  pHeader[23]  = 0x00;
  
  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 8008da0:	f04f 0b80 	mov.w	fp, #128	; 0x80
  pHeader[14]  = 't';
 8008da4:	f884 e00e 	strb.w	lr, [r4, #14]
  pHeader[5] = 0x4C;
 8008da8:	7161      	strb	r1, [r4, #5]
  pHeader[6] = 0x1D;
 8008daa:	71a3      	strb	r3, [r4, #6]
  pHeader[7] = 0x00;
 8008dac:	71e5      	strb	r5, [r4, #7]
  pHeader[16]  = 0x10;
 8008dae:	7427      	strb	r7, [r4, #16]
  pHeader[17]  = 0x00;
 8008db0:	7465      	strb	r5, [r4, #17]
  pHeader[18]  = 0x00;
 8008db2:	74a5      	strb	r5, [r4, #18]
  pHeader[19]  = 0x00;
 8008db4:	74e5      	strb	r5, [r4, #19]
  pHeader[20]  = 0x01;
 8008db6:	f884 9014 	strb.w	r9, [r4, #20]
  pHeader[21]  = 0x00;
 8008dba:	7565      	strb	r5, [r4, #21]
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 8008dbc:	f884 c016 	strb.w	ip, [r4, #22]
  pHeader[23]  = 0x00;
 8008dc0:	75e5      	strb	r5, [r4, #23]
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 8008dc2:	f884 b018 	strb.w	fp, [r4, #24]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
  
  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 8008dc6:	f884 0020 	strb.w	r0, [r4, #32]
  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
  pHeader[35]  = 0x00;
  
  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 8008dca:	2064      	movs	r0, #100	; 0x64
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 8008dcc:	f04f 0c3e 	mov.w	ip, #62	; 0x3e
  pHeader[36]  = 'd';
 8008dd0:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  pHeader[37]  = 'a';
 8008dd4:	2061      	movs	r0, #97	; 0x61
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 8008dd6:	f884 c019 	strb.w	ip, [r4, #25]
  pHeader[37]  = 'a';
 8008dda:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 8008dde:	f04f 0cfa 	mov.w	ip, #250	; 0xfa
  pHeader[38]  = 't';
  pHeader[39]  = 'a';
 8008de2:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
  
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
  pHeader[41]  = 0x4C;
 8008de6:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
  pHeader[42]  = 0x1D;
 8008dea:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  f_write(&WavFile, pHeaderBuff, 44, (void *)&byteswritten);
 8008dee:	4621      	mov	r1, r4
 8008df0:	ab03      	add	r3, sp, #12
 8008df2:	484f      	ldr	r0, [pc, #316]	; (8008f30 <WaveRecorderProcess+0x24c>)
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 8008df4:	f884 c01d 	strb.w	ip, [r4, #29]
  pHeader[38]  = 't';
 8008df8:	f884 e026 	strb.w	lr, [r4, #38]	; 0x26
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 8008dfc:	76a5      	strb	r5, [r4, #26]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 8008dfe:	76e5      	strb	r5, [r4, #27]
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 8008e00:	7725      	strb	r5, [r4, #28]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 8008e02:	77a5      	strb	r5, [r4, #30]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 8008e04:	77e5      	strb	r5, [r4, #31]
  pHeader[33]  = 0x00;
 8008e06:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 8008e0a:	f884 7022 	strb.w	r7, [r4, #34]	; 0x22
  pHeader[35]  = 0x00;
 8008e0e:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  pHeader[40]  = 0x00;
 8008e12:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  pHeader[43]  = 0x00;
 8008e16:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
  f_write(&WavFile, pHeaderBuff, 44, (void *)&byteswritten);
 8008e1a:	f7fd f80c 	bl	8005e36 <f_write>
  BufferCtl.fptr = byteswritten;
 8008e1e:	4b49      	ldr	r3, [pc, #292]	; (8008f44 <WaveRecorderProcess+0x260>)
 8008e20:	9a03      	ldr	r2, [sp, #12]
 8008e22:	605a      	str	r2, [r3, #4]
  BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 8008e24:	4639      	mov	r1, r7
 8008e26:	464a      	mov	r2, r9
 8008e28:	4650      	mov	r0, sl
  BufferCtl.offset = BUFFER_OFFSET_NONE;
 8008e2a:	601d      	str	r5, [r3, #0]
 8008e2c:	9301      	str	r3, [sp, #4]
  BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 8008e2e:	f7ff fb1f 	bl	8008470 <BSP_AUDIO_IN_Init>
  BSP_AUDIO_IN_Record((uint16_t*)&InternalBuffer[0], INTERNAL_BUFF_SIZE);
 8008e32:	4659      	mov	r1, fp
 8008e34:	4844      	ldr	r0, [pc, #272]	; (8008f48 <WaveRecorderProcess+0x264>)
 8008e36:	4f45      	ldr	r7, [pc, #276]	; (8008f4c <WaveRecorderProcess+0x268>)
 8008e38:	f8df a124 	ldr.w	sl, [pc, #292]	; 8008f60 <WaveRecorderProcess+0x27c>
        res = f_write(&WavFile, (uint8_t*)(WrBuffer+AUDIOBuffOffset), WR_BUFFER_SIZE, (void*)&byteswritten);
 8008e3c:	f8df b124 	ldr.w	fp, [pc, #292]	; 8008f64 <WaveRecorderProcess+0x280>
  BSP_AUDIO_IN_Record((uint16_t*)&InternalBuffer[0], INTERNAL_BUFF_SIZE);
 8008e40:	f7ff fa44 	bl	80082cc <BSP_AUDIO_IN_Record>
  TimeRecBase = 0;
 8008e44:	4a42      	ldr	r2, [pc, #264]	; (8008f50 <WaveRecorderProcess+0x26c>)
  ITCounter = 0;
 8008e46:	4943      	ldr	r1, [pc, #268]	; (8008f54 <WaveRecorderProcess+0x270>)
 8008e48:	9b01      	ldr	r3, [sp, #4]
  TimeRecBase = 0;
 8008e4a:	6015      	str	r5, [r2, #0]
  ITCounter = 0;
 8008e4c:	600d      	str	r5, [r1, #0]
  LEDsState = LED3_TOGGLE;
 8008e4e:	2103      	movs	r1, #3
 8008e50:	6031      	str	r1, [r6, #0]
 8008e52:	461d      	mov	r5, r3
 8008e54:	4691      	mov	r9, r2
  while(AppliState != APPLICATION_IDLE)
 8008e56:	f898 3000 	ldrb.w	r3, [r8]
 8008e5a:	b353      	cbz	r3, 8008eb2 <WaveRecorderProcess+0x1ce>
    if(TimeRecBase <= DEFAULT_TIME_REC)
 8008e5c:	f8d9 2000 	ldr.w	r2, [r9]
 8008e60:	f247 5330 	movw	r3, #30000	; 0x7530
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d850      	bhi.n	8008f0a <WaveRecorderProcess+0x226>
      if(AUDIODataReady == 1)
 8008e68:	f8da 3000 	ldr.w	r3, [sl]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d117      	bne.n	8008ea0 <WaveRecorderProcess+0x1bc>
        res = f_write(&WavFile, (uint8_t*)(WrBuffer+AUDIOBuffOffset), WR_BUFFER_SIZE, (void*)&byteswritten);
 8008e70:	f8db 0000 	ldr.w	r0, [fp]
 8008e74:	4938      	ldr	r1, [pc, #224]	; (8008f58 <WaveRecorderProcess+0x274>)
 8008e76:	ab03      	add	r3, sp, #12
 8008e78:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8008e7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008e80:	482b      	ldr	r0, [pc, #172]	; (8008f30 <WaveRecorderProcess+0x24c>)
 8008e82:	f7fc ffd8 	bl	8005e36 <f_write>
 8008e86:	4b35      	ldr	r3, [pc, #212]	; (8008f5c <WaveRecorderProcess+0x278>)
 8008e88:	7018      	strb	r0, [r3, #0]
        if(res != FR_OK)
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	b10b      	cbz	r3, 8008e92 <WaveRecorderProcess+0x1ae>
          Error_Handler();
 8008e8e:	f7fe fcf3 	bl	8007878 <Error_Handler>
        BufferCtl.fptr += byteswritten;
 8008e92:	686b      	ldr	r3, [r5, #4]
 8008e94:	9a03      	ldr	r2, [sp, #12]
 8008e96:	4413      	add	r3, r2
 8008e98:	606b      	str	r3, [r5, #4]
        AUDIODataReady = 0;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	f8ca 3000 	str.w	r3, [sl]
      if(CmdIndex != CMD_RECORD)
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d0d7      	beq.n	8008e56 <WaveRecorderProcess+0x172>
        WaveRecorderStop();
 8008ea6:	f7ff ff19 	bl	8008cdc <WaveRecorderStop>
        CmdIndex = CMD_PLAY;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	603b      	str	r3, [r7, #0]
        LEDsState = LED6_TOGGLE;
 8008eae:	2306      	movs	r3, #6
 8008eb0:	6033      	str	r3, [r6, #0]
  f_lseek(&WavFile, 0);
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	481e      	ldr	r0, [pc, #120]	; (8008f30 <WaveRecorderProcess+0x24c>)
 8008eb6:	f7fd f915 	bl	80060e4 <f_lseek>
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
  /* Write the file length ----------------------------------------------------*/
  /* The sampling time: this value will be be written back at the end of the 
  recording opearation.  Example: 661500 Btyes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 8008eba:	686b      	ldr	r3, [r5, #4]
 8008ebc:	7123      	strb	r3, [r4, #4]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 8008ebe:	0a1a      	lsrs	r2, r3, #8
 8008ec0:	7162      	strb	r2, [r4, #5]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 8008ec2:	0c1a      	lsrs	r2, r3, #16
 8008ec4:	71a2      	strb	r2, [r4, #6]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 8008ec6:	0e1a      	lsrs	r2, r3, #24
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 8008ec8:	3b2c      	subs	r3, #44	; 0x2c
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 8008eca:	71e2      	strb	r2, [r4, #7]
  pHeader[40] = (uint8_t)(BufferCtl.fptr); 
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 8008ecc:	0a1a      	lsrs	r2, r3, #8
  BufferCtl.fptr -=44;
 8008ece:	606b      	str	r3, [r5, #4]
  pHeader[40] = (uint8_t)(BufferCtl.fptr); 
 8008ed0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 8008ed4:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 8008ed8:	0c1a      	lsrs	r2, r3, #16
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
 8008eda:	0e1b      	lsrs	r3, r3, #24
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 8008edc:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
 8008ee0:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten);
 8008ee4:	222c      	movs	r2, #44	; 0x2c
 8008ee6:	ab03      	add	r3, sp, #12
 8008ee8:	4913      	ldr	r1, [pc, #76]	; (8008f38 <WaveRecorderProcess+0x254>)
 8008eea:	4811      	ldr	r0, [pc, #68]	; (8008f30 <WaveRecorderProcess+0x24c>)
 8008eec:	f7fc ffa3 	bl	8005e36 <f_write>
  f_close (&WavFile);
 8008ef0:	480f      	ldr	r0, [pc, #60]	; (8008f30 <WaveRecorderProcess+0x24c>)
 8008ef2:	f7fd f8e6 	bl	80060c2 <f_close>
  f_mount(NULL, 0, 1);
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	2201      	movs	r2, #1
 8008efa:	4608      	mov	r0, r1
 8008efc:	f7fc fdc6 	bl	8005a8c <f_mount>
  CmdIndex = CMD_PLAY;
 8008f00:	2300      	movs	r3, #0
 8008f02:	603b      	str	r3, [r7, #0]
}
 8008f04:	b005      	add	sp, #20
 8008f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      WaveRecorderStop();
 8008f0a:	f7ff fee7 	bl	8008cdc <WaveRecorderStop>
      CmdIndex = CMD_STOP;
 8008f0e:	2302      	movs	r3, #2
 8008f10:	603b      	str	r3, [r7, #0]
      LEDsState = LED4_TOGGLE;
 8008f12:	2304      	movs	r3, #4
 8008f14:	6033      	str	r3, [r6, #0]
      AUDIODataReady = 0;
 8008f16:	2300      	movs	r3, #0
 8008f18:	f8ca 3000 	str.w	r3, [sl]
      break;
 8008f1c:	e7c9      	b.n	8008eb2 <WaveRecorderProcess+0x1ce>
 8008f1e:	bf00      	nop
 8008f20:	20000928 	.word	0x20000928
 8008f24:	20007fb8 	.word	0x20007fb8
 8008f28:	0800b13f 	.word	0x0800b13f
 8008f2c:	20000698 	.word	0x20000698
 8008f30:	2000a248 	.word	0x2000a248
 8008f34:	2000092c 	.word	0x2000092c
 8008f38:	20008210 	.word	0x20008210
 8008f3c:	001d4c00 	.word	0x001d4c00
 8008f40:	200081e4 	.word	0x200081e4
 8008f44:	2000823c 	.word	0x2000823c
 8008f48:	200007e8 	.word	0x200007e8
 8008f4c:	2000069c 	.word	0x2000069c
 8008f50:	200007c8 	.word	0x200007c8
 8008f54:	200007e4 	.word	0x200007e4
 8008f58:	20008244 	.word	0x20008244
 8008f5c:	2000a244 	.word	0x2000a244
 8008f60:	200007e0 	.word	0x200007e0
 8008f64:	200007dc 	.word	0x200007dc

08008f68 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[INTERNAL_BUFF_SIZE/2], (uint16_t*)&RecBuf[0]);
 8008f68:	4917      	ldr	r1, [pc, #92]	; (8008fc8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x60>)
 8008f6a:	4818      	ldr	r0, [pc, #96]	; (8008fcc <BSP_AUDIO_IN_TransferComplete_CallBack+0x64>)
{
 8008f6c:	b510      	push	{r4, lr}
  BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[INTERNAL_BUFF_SIZE/2], (uint16_t*)&RecBuf[0]);
 8008f6e:	f7ff f9bf 	bl	80082f0 <BSP_AUDIO_IN_PDMToPCM>
  memcpy((uint16_t*)&WrBuffer[ITCounter * (PCM_OUT_SIZE*2)], RecBuf, PCM_OUT_SIZE*4);
 8008f72:	4b17      	ldr	r3, [pc, #92]	; (8008fd0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x68>)
 8008f74:	4a14      	ldr	r2, [pc, #80]	; (8008fc8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x60>)
 8008f76:	6818      	ldr	r0, [r3, #0]
 8008f78:	4916      	ldr	r1, [pc, #88]	; (8008fd4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x6c>)
 8008f7a:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 8008f7e:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8008f82:	f852 4b04 	ldr.w	r4, [r2], #4
 8008f86:	f841 4b04 	str.w	r4, [r1], #4
 8008f8a:	4282      	cmp	r2, r0
 8008f8c:	d1f9      	bne.n	8008f82 <BSP_AUDIO_IN_TransferComplete_CallBack+0x1a>
  BufferCtl.offset = BUFFER_OFFSET_NONE;
 8008f8e:	4912      	ldr	r1, [pc, #72]	; (8008fd8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x70>)
 8008f90:	2200      	movs	r2, #0
 8008f92:	600a      	str	r2, [r1, #0]
  if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 8008f94:	6819      	ldr	r1, [r3, #0]
 8008f96:	293f      	cmp	r1, #63	; 0x3f
 8008f98:	d108      	bne.n	8008fac <BSP_AUDIO_IN_TransferComplete_CallBack+0x44>
    AUDIODataReady = 1;
 8008f9a:	4910      	ldr	r1, [pc, #64]	; (8008fdc <BSP_AUDIO_IN_TransferComplete_CallBack+0x74>)
 8008f9c:	2001      	movs	r0, #1
 8008f9e:	6008      	str	r0, [r1, #0]
    AUDIOBuffOffset = 0;
 8008fa0:	490f      	ldr	r1, [pc, #60]	; (8008fe0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>)
 8008fa2:	600a      	str	r2, [r1, #0]
    ITCounter++;
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	4402      	add	r2, r0
    ITCounter++;
 8008fa8:	601a      	str	r2, [r3, #0]
 8008faa:	bd10      	pop	{r4, pc}
  else if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*2))-1)
 8008fac:	6819      	ldr	r1, [r3, #0]
 8008fae:	297f      	cmp	r1, #127	; 0x7f
    AUDIODataReady = 1;
 8008fb0:	bf09      	itett	eq
 8008fb2:	490a      	ldreq	r1, [pc, #40]	; (8008fdc <BSP_AUDIO_IN_TransferComplete_CallBack+0x74>)
    ITCounter++;
 8008fb4:	681a      	ldrne	r2, [r3, #0]
    AUDIODataReady = 1;
 8008fb6:	2001      	moveq	r0, #1
 8008fb8:	6008      	streq	r0, [r1, #0]
    AUDIOBuffOffset = WR_BUFFER_SIZE/2;
 8008fba:	bf03      	ittte	eq
 8008fbc:	4908      	ldreq	r1, [pc, #32]	; (8008fe0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>)
 8008fbe:	f44f 6000 	moveq.w	r0, #2048	; 0x800
 8008fc2:	6008      	streq	r0, [r1, #0]
    ITCounter++;
 8008fc4:	3201      	addne	r2, #1
 8008fc6:	e7ef      	b.n	8008fa8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x40>
 8008fc8:	200008e8 	.word	0x200008e8
 8008fcc:	20000868 	.word	0x20000868
 8008fd0:	200007e4 	.word	0x200007e4
 8008fd4:	20008244 	.word	0x20008244
 8008fd8:	2000823c 	.word	0x2000823c
 8008fdc:	200007e0 	.word	0x200007e0
 8008fe0:	200007dc 	.word	0x200007dc

08008fe4 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[0], (uint16_t*)&RecBuf[0]);
 8008fe4:	4917      	ldr	r1, [pc, #92]	; (8009044 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x60>)
 8008fe6:	4818      	ldr	r0, [pc, #96]	; (8009048 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x64>)
{
 8008fe8:	b510      	push	{r4, lr}
  BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[0], (uint16_t*)&RecBuf[0]);
 8008fea:	f7ff f981 	bl	80082f0 <BSP_AUDIO_IN_PDMToPCM>
  memcpy((uint16_t*)&WrBuffer[ITCounter * (PCM_OUT_SIZE*2)], RecBuf, PCM_OUT_SIZE*4);
 8008fee:	4b17      	ldr	r3, [pc, #92]	; (800904c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x68>)
 8008ff0:	4a14      	ldr	r2, [pc, #80]	; (8009044 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x60>)
 8008ff2:	6818      	ldr	r0, [r3, #0]
 8008ff4:	4916      	ldr	r1, [pc, #88]	; (8009050 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x6c>)
 8008ff6:	eb01 1180 	add.w	r1, r1, r0, lsl #6
 8008ffa:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8008ffe:	f852 4b04 	ldr.w	r4, [r2], #4
 8009002:	f841 4b04 	str.w	r4, [r1], #4
 8009006:	4282      	cmp	r2, r0
 8009008:	d1f9      	bne.n	8008ffe <BSP_AUDIO_IN_HalfTransfer_CallBack+0x1a>
  BufferCtl.offset = BUFFER_OFFSET_NONE;
 800900a:	4912      	ldr	r1, [pc, #72]	; (8009054 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x70>)
 800900c:	2200      	movs	r2, #0
 800900e:	600a      	str	r2, [r1, #0]
  if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 8009010:	6819      	ldr	r1, [r3, #0]
 8009012:	293f      	cmp	r1, #63	; 0x3f
 8009014:	d108      	bne.n	8009028 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x44>
    AUDIODataReady = 1;
 8009016:	4910      	ldr	r1, [pc, #64]	; (8009058 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x74>)
 8009018:	2001      	movs	r0, #1
 800901a:	6008      	str	r0, [r1, #0]
    AUDIOBuffOffset = 0;
 800901c:	490f      	ldr	r1, [pc, #60]	; (800905c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x78>)
 800901e:	600a      	str	r2, [r1, #0]
    ITCounter++;
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	4402      	add	r2, r0
    ITCounter++;
 8009024:	601a      	str	r2, [r3, #0]
 8009026:	bd10      	pop	{r4, pc}
  else if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*2))-1)
 8009028:	6819      	ldr	r1, [r3, #0]
 800902a:	297f      	cmp	r1, #127	; 0x7f
    AUDIODataReady = 1;
 800902c:	bf09      	itett	eq
 800902e:	490a      	ldreq	r1, [pc, #40]	; (8009058 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x74>)
    ITCounter++;
 8009030:	681a      	ldrne	r2, [r3, #0]
    AUDIODataReady = 1;
 8009032:	2001      	moveq	r0, #1
 8009034:	6008      	streq	r0, [r1, #0]
    AUDIOBuffOffset = WR_BUFFER_SIZE/2;
 8009036:	bf03      	ittte	eq
 8009038:	4908      	ldreq	r1, [pc, #32]	; (800905c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x78>)
 800903a:	f44f 6000 	moveq.w	r0, #2048	; 0x800
 800903e:	6008      	streq	r0, [r1, #0]
    ITCounter++;
 8009040:	3201      	addne	r2, #1
 8009042:	e7ef      	b.n	8009024 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x40>
 8009044:	200008e8 	.word	0x200008e8
 8009048:	200007e8 	.word	0x200007e8
 800904c:	200007e4 	.word	0x200007e4
 8009050:	20008244 	.word	0x20008244
 8009054:	2000823c 	.word	0x2000823c
 8009058:	200007e0 	.word	0x200007e0
 800905c:	200007dc 	.word	0x200007dc

08009060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8009060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009098 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009064:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009066:	e003      	b.n	8009070 <LoopCopyDataInit>

08009068 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009068:	4b0c      	ldr	r3, [pc, #48]	; (800909c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800906a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800906c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800906e:	3104      	adds	r1, #4

08009070 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009070:	480b      	ldr	r0, [pc, #44]	; (80090a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009072:	4b0c      	ldr	r3, [pc, #48]	; (80090a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009074:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009076:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009078:	d3f6      	bcc.n	8009068 <CopyDataInit>
  ldr  r2, =_sbss
 800907a:	4a0b      	ldr	r2, [pc, #44]	; (80090a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800907c:	e002      	b.n	8009084 <LoopFillZerobss>

0800907e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800907e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009080:	f842 3b04 	str.w	r3, [r2], #4

08009084 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009084:	4b09      	ldr	r3, [pc, #36]	; (80090ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009086:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009088:	d3f9      	bcc.n	800907e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800908a:	f7ff fac9 	bl	8008620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800908e:	f000 fabf 	bl	8009610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009092:	f7fe fbf7 	bl	8007884 <main>
  bx  lr    
 8009096:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8009098:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800909c:	0800b330 	.word	0x0800b330
  ldr  r0, =_sdata
 80090a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80090a4:	2000041c 	.word	0x2000041c
  ldr  r2, =_sbss
 80090a8:	2000041c 	.word	0x2000041c
  ldr  r3, = _ebss
 80090ac:	2000a474 	.word	0x2000a474

080090b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80090b0:	e7fe      	b.n	80090b0 <ADC_IRQHandler>
 80090b2:	0000      	movs	r0, r0
 80090b4:	0000      	movs	r0, r0
	...

080090b8 <PDM_Filter_Init>:
 80090b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80090bc:	ed2d 8b02 	vpush	{d8}
 80090c0:	4b75      	ldr	r3, [pc, #468]	; (8009298 <PDM_Filter_Init+0x1e0>)
 80090c2:	2201      	movs	r2, #1
 80090c4:	601a      	str	r2, [r3, #0]
 80090c6:	b083      	sub	sp, #12
 80090c8:	4680      	mov	r8, r0
 80090ca:	461a      	mov	r2, r3
 80090cc:	6813      	ldr	r3, [r2, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1fc      	bne.n	80090cc <PDM_Filter_Init+0x14>
 80090d2:	4a72      	ldr	r2, [pc, #456]	; (800929c <PDM_Filter_Init+0x1e4>)
 80090d4:	4972      	ldr	r1, [pc, #456]	; (80092a0 <PDM_Filter_Init+0x1e8>)
 80090d6:	6011      	str	r1, [r2, #0]
 80090d8:	6812      	ldr	r2, [r2, #0]
 80090da:	4972      	ldr	r1, [pc, #456]	; (80092a4 <PDM_Filter_Init+0x1ec>)
 80090dc:	428a      	cmp	r2, r1
 80090de:	d000      	beq.n	80090e2 <PDM_Filter_Init+0x2a>
 80090e0:	e7fe      	b.n	80090e0 <PDM_Filter_Init+0x28>
 80090e2:	edd8 7a01 	vldr	s15, [r8, #4]
 80090e6:	4970      	ldr	r1, [pc, #448]	; (80092a8 <PDM_Filter_Init+0x1f0>)
 80090e8:	f8c8 301c 	str.w	r3, [r8, #28]
 80090ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80090f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090f4:	f8c8 3018 	str.w	r3, [r8, #24]
 80090f8:	f8c8 3014 	str.w	r3, [r8, #20]
 80090fc:	f8c8 3010 	str.w	r3, [r8, #16]
 8009100:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 8009104:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
 8009108:	f8c8 3020 	str.w	r3, [r8, #32]
 800910c:	600a      	str	r2, [r1, #0]
 800910e:	f000 808f 	beq.w	8009230 <PDM_Filter_Init+0x178>
 8009112:	f8b8 9000 	ldrh.w	r9, [r8]
 8009116:	ea4f 0259 	mov.w	r2, r9, lsr #1
 800911a:	ee07 2a10 	vmov	s14, r2
 800911e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800912a:	f140 8083 	bpl.w	8009234 <PDM_Filter_Init+0x17c>
 800912e:	ee17 0a90 	vmov	r0, s15
 8009132:	f7f7 f9b5 	bl	80004a0 <__aeabi_f2d>
 8009136:	a354      	add	r3, pc, #336	; (adr r3, 8009288 <PDM_Filter_Init+0x1d0>)
 8009138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913c:	f7f7 fa04 	bl	8000548 <__aeabi_dmul>
 8009140:	4604      	mov	r4, r0
 8009142:	4648      	mov	r0, r9
 8009144:	460d      	mov	r5, r1
 8009146:	f7f7 f999 	bl	800047c <__aeabi_i2d>
 800914a:	4602      	mov	r2, r0
 800914c:	460b      	mov	r3, r1
 800914e:	4620      	mov	r0, r4
 8009150:	4629      	mov	r1, r5
 8009152:	f7f7 fb23 	bl	800079c <__aeabi_ddiv>
 8009156:	f7f7 fcef 	bl	8000b38 <__aeabi_d2f>
 800915a:	f7f7 f9a1 	bl	80004a0 <__aeabi_f2d>
 800915e:	ec41 0b10 	vmov	d0, r0, r1
 8009162:	f000 fb5d 	bl	8009820 <cos>
 8009166:	ec57 6b10 	vmov	r6, r7, d0
 800916a:	ee10 2a10 	vmov	r2, s0
 800916e:	463b      	mov	r3, r7
 8009170:	2000      	movs	r0, #0
 8009172:	494e      	ldr	r1, [pc, #312]	; (80092ac <PDM_Filter_Init+0x1f4>)
 8009174:	f7f7 f834 	bl	80001e0 <__aeabi_dsub>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	f7f7 f832 	bl	80001e4 <__adddf3>
 8009180:	f7f7 fcda 	bl	8000b38 <__aeabi_d2f>
 8009184:	ee08 0a10 	vmov	s16, r0
 8009188:	ee68 7a08 	vmul.f32	s15, s16, s16
 800918c:	eeb1 8a48 	vneg.f32	s16, s16
 8009190:	ee17 0a90 	vmov	r0, s15
 8009194:	f7f7 f984 	bl	80004a0 <__aeabi_f2d>
 8009198:	2200      	movs	r2, #0
 800919a:	4604      	mov	r4, r0
 800919c:	460d      	mov	r5, r1
 800919e:	4b44      	ldr	r3, [pc, #272]	; (80092b0 <PDM_Filter_Init+0x1f8>)
 80091a0:	4630      	mov	r0, r6
 80091a2:	4639      	mov	r1, r7
 80091a4:	f7f7 f81e 	bl	80001e4 <__adddf3>
 80091a8:	4602      	mov	r2, r0
 80091aa:	460b      	mov	r3, r1
 80091ac:	f7f7 f81a 	bl	80001e4 <__adddf3>
 80091b0:	f7f7 fcc2 	bl	8000b38 <__aeabi_d2f>
 80091b4:	f7f7 f974 	bl	80004a0 <__aeabi_f2d>
 80091b8:	2200      	movs	r2, #0
 80091ba:	4b3e      	ldr	r3, [pc, #248]	; (80092b4 <PDM_Filter_Init+0x1fc>)
 80091bc:	f7f7 f9c4 	bl	8000548 <__aeabi_dmul>
 80091c0:	4602      	mov	r2, r0
 80091c2:	460b      	mov	r3, r1
 80091c4:	4620      	mov	r0, r4
 80091c6:	4629      	mov	r1, r5
 80091c8:	f7f7 f80a 	bl	80001e0 <__aeabi_dsub>
 80091cc:	f7f7 fcb4 	bl	8000b38 <__aeabi_d2f>
 80091d0:	f7f7 f966 	bl	80004a0 <__aeabi_f2d>
 80091d4:	ec41 0b10 	vmov	d0, r0, r1
 80091d8:	f000 fb66 	bl	80098a8 <sqrt>
 80091dc:	ec53 2b10 	vmov	r2, r3, d0
 80091e0:	ee18 0a10 	vmov	r0, s16
 80091e4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80091e8:	9300      	str	r3, [sp, #0]
 80091ea:	f7f7 f959 	bl	80004a0 <__aeabi_f2d>
 80091ee:	9a01      	ldr	r2, [sp, #4]
 80091f0:	9b00      	ldr	r3, [sp, #0]
 80091f2:	f7f6 fff7 	bl	80001e4 <__adddf3>
 80091f6:	2200      	movs	r2, #0
 80091f8:	4b2f      	ldr	r3, [pc, #188]	; (80092b8 <PDM_Filter_Init+0x200>)
 80091fa:	f7f7 f9a5 	bl	8000548 <__aeabi_dmul>
 80091fe:	f7f7 fc7b 	bl	8000af8 <__aeabi_d2uiz>
 8009202:	f8a8 002c 	strh.w	r0, [r8, #44]	; 0x2c
 8009206:	ed98 8a02 	vldr	s16, [r8, #8]
 800920a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800920e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009212:	d113      	bne.n	800923c <PDM_Filter_Init+0x184>
 8009214:	2000      	movs	r0, #0
 8009216:	4b29      	ldr	r3, [pc, #164]	; (80092bc <PDM_Filter_Init+0x204>)
 8009218:	f8a8 002e 	strh.w	r0, [r8, #46]	; 0x2e
 800921c:	fba3 2309 	umull	r2, r3, r3, r9
 8009220:	099b      	lsrs	r3, r3, #6
 8009222:	f8a8 3030 	strh.w	r3, [r8, #48]	; 0x30
 8009226:	b003      	add	sp, #12
 8009228:	ecbd 8b02 	vpop	{d8}
 800922c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009230:	f8b8 9000 	ldrh.w	r9, [r8]
 8009234:	2300      	movs	r3, #0
 8009236:	f8a8 302c 	strh.w	r3, [r8, #44]	; 0x2c
 800923a:	e7e4      	b.n	8009206 <PDM_Filter_Init+0x14e>
 800923c:	ea4f 2009 	mov.w	r0, r9, lsl #8
 8009240:	f7f7 f91c 	bl	800047c <__aeabi_i2d>
 8009244:	4604      	mov	r4, r0
 8009246:	4648      	mov	r0, r9
 8009248:	460d      	mov	r5, r1
 800924a:	f7f7 f917 	bl	800047c <__aeabi_i2d>
 800924e:	4606      	mov	r6, r0
 8009250:	ee18 0a10 	vmov	r0, s16
 8009254:	460f      	mov	r7, r1
 8009256:	f7f7 f923 	bl	80004a0 <__aeabi_f2d>
 800925a:	a30d      	add	r3, pc, #52	; (adr r3, 8009290 <PDM_Filter_Init+0x1d8>)
 800925c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009260:	f7f7 f972 	bl	8000548 <__aeabi_dmul>
 8009264:	4602      	mov	r2, r0
 8009266:	460b      	mov	r3, r1
 8009268:	4630      	mov	r0, r6
 800926a:	4639      	mov	r1, r7
 800926c:	f7f6 ffba 	bl	80001e4 <__adddf3>
 8009270:	4602      	mov	r2, r0
 8009272:	460b      	mov	r3, r1
 8009274:	4620      	mov	r0, r4
 8009276:	4629      	mov	r1, r5
 8009278:	f7f7 fa90 	bl	800079c <__aeabi_ddiv>
 800927c:	f7f7 fc3c 	bl	8000af8 <__aeabi_d2uiz>
 8009280:	b280      	uxth	r0, r0
 8009282:	e7c8      	b.n	8009216 <PDM_Filter_Init+0x15e>
 8009284:	f3af 8000 	nop.w
 8009288:	54442d18 	.word	0x54442d18
 800928c:	401921fb 	.word	0x401921fb
 8009290:	51eb851f 	.word	0x51eb851f
 8009294:	40191eb8 	.word	0x40191eb8
 8009298:	40023008 	.word	0x40023008
 800929c:	40023000 	.word	0x40023000
 80092a0:	f407a5c2 	.word	0xf407a5c2
 80092a4:	b5e8b5cd 	.word	0xb5e8b5cd
 80092a8:	20000930 	.word	0x20000930
 80092ac:	3ff00000 	.word	0x3ff00000
 80092b0:	bff00000 	.word	0xbff00000
 80092b4:	40100000 	.word	0x40100000
 80092b8:	40600000 	.word	0x40600000
 80092bc:	10624dd3 	.word	0x10624dd3

080092c0 <PDM_Filter_64_LSB>:
 80092c0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80092c4:	4d05      	ldr	r5, [pc, #20]	; (80092dc <PDM_Filter_64_LSB+0x1c>)
 80092c6:	4c06      	ldr	r4, [pc, #24]	; (80092e0 <PDM_Filter_64_LSB+0x20>)
 80092c8:	682d      	ldr	r5, [r5, #0]
 80092ca:	b09a      	sub	sp, #104	; 0x68
 80092cc:	42a5      	cmp	r5, r4
 80092ce:	4607      	mov	r7, r0
 80092d0:	9116      	str	r1, [sp, #88]	; 0x58
 80092d2:	9217      	str	r2, [sp, #92]	; 0x5c
 80092d4:	469a      	mov	sl, r3
 80092d6:	d005      	beq.n	80092e4 <PDM_Filter_64_LSB+0x24>
 80092d8:	e7fe      	b.n	80092d8 <PDM_Filter_64_LSB+0x18>
 80092da:	bf00      	nop
 80092dc:	20000930 	.word	0x20000930
 80092e0:	b5e8b5cd 	.word	0xb5e8b5cd
 80092e4:	6a19      	ldr	r1, [r3, #32]
 80092e6:	8e18      	ldrh	r0, [r3, #48]	; 0x30
 80092e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092ea:	9104      	str	r1, [sp, #16]
 80092ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ee:	f8da 4010 	ldr.w	r4, [sl, #16]
 80092f2:	f8da 5018 	ldr.w	r5, [sl, #24]
 80092f6:	f8da 601c 	ldr.w	r6, [sl, #28]
 80092fa:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 80092fe:	f8ba c02c 	ldrh.w	ip, [sl, #44]	; 0x2c
 8009302:	f8ba 102e 	ldrh.w	r1, [sl, #46]	; 0x2e
 8009306:	9205      	str	r2, [sp, #20]
 8009308:	9306      	str	r3, [sp, #24]
 800930a:	9409      	str	r4, [sp, #36]	; 0x24
 800930c:	f8da 8014 	ldr.w	r8, [sl, #20]
 8009310:	950b      	str	r5, [sp, #44]	; 0x2c
 8009312:	960a      	str	r6, [sp, #40]	; 0x28
 8009314:	f8cd 9004 	str.w	r9, [sp, #4]
 8009318:	f8cd c020 	str.w	ip, [sp, #32]
 800931c:	910f      	str	r1, [sp, #60]	; 0x3c
 800931e:	2800      	cmp	r0, #0
 8009320:	f000 8155 	beq.w	80095ce <PDM_Filter_64_LSB+0x30e>
 8009324:	ea4f 0249 	mov.w	r2, r9, lsl #1
 8009328:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800932c:	ea4f 04c9 	mov.w	r4, r9, lsl #3
 8009330:	9210      	str	r2, [sp, #64]	; 0x40
 8009332:	444a      	add	r2, r9
 8009334:	ebc9 0604 	rsb	r6, r9, r4
 8009338:	9312      	str	r3, [sp, #72]	; 0x48
 800933a:	0055      	lsls	r5, r2, #1
 800933c:	444b      	add	r3, r9
 800933e:	f5cc 7c80 	rsb	ip, ip, #256	; 0x100
 8009342:	f04f 0900 	mov.w	r9, #0
 8009346:	9211      	str	r2, [sp, #68]	; 0x44
 8009348:	9413      	str	r4, [sp, #76]	; 0x4c
 800934a:	9518      	str	r5, [sp, #96]	; 0x60
 800934c:	9314      	str	r3, [sp, #80]	; 0x50
 800934e:	9615      	str	r6, [sp, #84]	; 0x54
 8009350:	f8cd 901c 	str.w	r9, [sp, #28]
 8009354:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 8009358:	9912      	ldr	r1, [sp, #72]	; 0x48
 800935a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800935c:	5c79      	ldrb	r1, [r7, r1]
 800935e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8009360:	5cba      	ldrb	r2, [r7, r2]
 8009362:	9102      	str	r1, [sp, #8]
 8009364:	9203      	str	r2, [sp, #12]
 8009366:	f8dd c008 	ldr.w	ip, [sp, #8]
 800936a:	5d7a      	ldrb	r2, [r7, r5]
 800936c:	4da4      	ldr	r5, [pc, #656]	; (8009600 <PDM_Filter_64_LSB+0x340>)
 800936e:	9b01      	ldr	r3, [sp, #4]
 8009370:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8009372:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8009374:	f815 c00c 	ldrb.w	ip, [r5, ip]
 8009378:	5cf9      	ldrb	r1, [r7, r3]
 800937a:	7838      	ldrb	r0, [r7, #0]
 800937c:	5d3b      	ldrb	r3, [r7, r4]
 800937e:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8009382:	5dbc      	ldrb	r4, [r7, r6]
 8009384:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8009604 <PDM_Filter_64_LSB+0x344>
 8009388:	9e03      	ldr	r6, [sp, #12]
 800938a:	f8df c278 	ldr.w	ip, [pc, #632]	; 8009604 <PDM_Filter_64_LSB+0x344>
 800938e:	f819 b000 	ldrb.w	fp, [r9, r0]
 8009392:	f819 9006 	ldrb.w	r9, [r9, r6]
 8009396:	f81c 6003 	ldrb.w	r6, [ip, r3]
 800939a:	f8df c26c 	ldr.w	ip, [pc, #620]	; 8009608 <PDM_Filter_64_LSB+0x348>
 800939e:	5c6d      	ldrb	r5, [r5, r1]
 80093a0:	f81c c002 	ldrb.w	ip, [ip, r2]
 80093a4:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 80093a8:	f8df c25c 	ldr.w	ip, [pc, #604]	; 8009608 <PDM_Filter_64_LSB+0x348>
 80093ac:	f81c c004 	ldrb.w	ip, [ip, r4]
 80093b0:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80093b4:	4435      	add	r5, r6
 80093b6:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 80093ba:	4e92      	ldr	r6, [pc, #584]	; (8009604 <PDM_Filter_64_LSB+0x344>)
 80093bc:	44cc      	add	ip, r9
 80093be:	f816 9004 	ldrb.w	r9, [r6, r4]
 80093c2:	4e8f      	ldr	r6, [pc, #572]	; (8009600 <PDM_Filter_64_LSB+0x340>)
 80093c4:	5d34      	ldrb	r4, [r6, r4]
 80093c6:	940d      	str	r4, [sp, #52]	; 0x34
 80093c8:	4c8f      	ldr	r4, [pc, #572]	; (8009608 <PDM_Filter_64_LSB+0x348>)
 80093ca:	44c3      	add	fp, r8
 80093cc:	f816 8000 	ldrb.w	r8, [r6, r0]
 80093d0:	5c20      	ldrb	r0, [r4, r0]
 80093d2:	9000      	str	r0, [sp, #0]
 80093d4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80093d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80093d8:	eb0c 0c46 	add.w	ip, ip, r6, lsl #1
 80093dc:	4e8a      	ldr	r6, [pc, #552]	; (8009608 <PDM_Filter_64_LSB+0x348>)
 80093de:	eb05 0540 	add.w	r5, r5, r0, lsl #1
 80093e2:	5c70      	ldrb	r0, [r6, r1]
 80093e4:	4e87      	ldr	r6, [pc, #540]	; (8009604 <PDM_Filter_64_LSB+0x344>)
 80093e6:	44c8      	add	r8, r9
 80093e8:	f816 9001 	ldrb.w	r9, [r6, r1]
 80093ec:	5cb1      	ldrb	r1, [r6, r2]
 80093ee:	4e84      	ldr	r6, [pc, #528]	; (8009600 <PDM_Filter_64_LSB+0x340>)
 80093f0:	5cb2      	ldrb	r2, [r6, r2]
 80093f2:	920e      	str	r2, [sp, #56]	; 0x38
 80093f4:	5cf2      	ldrb	r2, [r6, r3]
 80093f6:	4e84      	ldr	r6, [pc, #528]	; (8009608 <PDM_Filter_64_LSB+0x348>)
 80093f8:	ebcb 04cb 	rsb	r4, fp, fp, lsl #3
 80093fc:	5cf3      	ldrb	r3, [r6, r3]
 80093fe:	930c      	str	r3, [sp, #48]	; 0x30
 8009400:	440a      	add	r2, r1
 8009402:	9902      	ldr	r1, [sp, #8]
 8009404:	eb0c 0384 	add.w	r3, ip, r4, lsl #2
 8009408:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 800940c:	eb08 0040 	add.w	r0, r8, r0, lsl #1
 8009410:	eb03 0844 	add.w	r8, r3, r4, lsl #1
 8009414:	5c74      	ldrb	r4, [r6, r1]
 8009416:	4e7b      	ldr	r6, [pc, #492]	; (8009604 <PDM_Filter_64_LSB+0x344>)
 8009418:	5c73      	ldrb	r3, [r6, r1]
 800941a:	9e00      	ldr	r6, [sp, #0]
 800941c:	eb09 0146 	add.w	r1, r9, r6, lsl #1
 8009420:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009422:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8009426:	5dbe      	ldrb	r6, [r7, r6]
 8009428:	9602      	str	r6, [sp, #8]
 800942a:	444b      	add	r3, r9
 800942c:	4e76      	ldr	r6, [pc, #472]	; (8009608 <PDM_Filter_64_LSB+0x348>)
 800942e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009432:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8009436:	f816 9009 	ldrb.w	r9, [r6, r9]
 800943a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800943e:	ebc0 1400 	rsb	r4, r0, r0, lsl #4
 8009442:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009446:	4e6e      	ldr	r6, [pc, #440]	; (8009600 <PDM_Filter_64_LSB+0x340>)
 8009448:	4444      	add	r4, r8
 800944a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800944e:	f816 9009 	ldrb.w	r9, [r6, r9]
 8009452:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009454:	f8cd 900c 	str.w	r9, [sp, #12]
 8009458:	eb03 0348 	add.w	r3, r3, r8, lsl #1
 800945c:	eb02 0842 	add.w	r8, r2, r2, lsl #1
 8009460:	44a0      	add	r8, r4
 8009462:	4431      	add	r1, r6
 8009464:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8009468:	9e02      	ldr	r6, [sp, #8]
 800946a:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8009604 <PDM_Filter_64_LSB+0x344>
 800946e:	f818 6006 	ldrb.w	r6, [r8, r6]
 8009472:	9609      	str	r6, [sp, #36]	; 0x24
 8009474:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009476:	eb03 0943 	add.w	r9, r3, r3, lsl #1
 800947a:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 800947e:	eb06 0849 	add.w	r8, r6, r9, lsl #1
 8009482:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8009486:	eb08 0904 	add.w	r9, r8, r4
 800948a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800948c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8009490:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8009492:	44b1      	add	r9, r6
 8009494:	4444      	add	r4, r8
 8009496:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8009498:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800949c:	eb01 0848 	add.w	r8, r1, r8, lsl #1
 80094a0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80094a4:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80094a8:	eb02 0800 	add.w	r8, r2, r0
 80094ac:	262e      	movs	r6, #46	; 0x2e
 80094ae:	fb06 f808 	mul.w	r8, r6, r8
 80094b2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80094b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80094b8:	4430      	add	r0, r6
 80094ba:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 80094be:	4402      	add	r2, r0
 80094c0:	441d      	add	r5, r3
 80094c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80094c6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80094ca:	9802      	ldr	r0, [sp, #8]
 80094cc:	4a4e      	ldr	r2, [pc, #312]	; (8009608 <PDM_Filter_64_LSB+0x348>)
 80094ce:	9e04      	ldr	r6, [sp, #16]
 80094d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094d4:	eb08 1505 	add.w	r5, r8, r5, lsl #4
 80094d8:	f812 8000 	ldrb.w	r8, [r2, r0]
 80094dc:	4a48      	ldr	r2, [pc, #288]	; (8009600 <PDM_Filter_64_LSB+0x340>)
 80094de:	44a3      	add	fp, r4
 80094e0:	5c10      	ldrb	r0, [r2, r0]
 80094e2:	9009      	str	r0, [sp, #36]	; 0x24
 80094e4:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 80094e8:	9805      	ldr	r0, [sp, #20]
 80094ea:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80094ee:	eb0b 0bcb 	add.w	fp, fp, fp, lsl #3
 80094f2:	444e      	add	r6, r9
 80094f4:	4461      	add	r1, ip
 80094f6:	eb05 058b 	add.w	r5, r5, fp, lsl #2
 80094fa:	222a      	movs	r2, #42	; 0x2a
 80094fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009500:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8009502:	fb02 5101 	mla	r1, r2, r1, r5
 8009506:	1a36      	subs	r6, r6, r0
 8009508:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800950a:	9803      	ldr	r0, [sp, #12]
 800950c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8009510:	fb06 f604 	mul.w	r6, r6, r4
 8009514:	ebcc 0ccc 	rsb	ip, ip, ip, lsl #3
 8009518:	440d      	add	r5, r1
 800951a:	4463      	add	r3, ip
 800951c:	2e00      	cmp	r6, #0
 800951e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009520:	930b      	str	r3, [sp, #44]	; 0x2c
 8009522:	bfb8      	it	lt
 8009524:	36ff      	addlt	r6, #255	; 0xff
 8009526:	9b04      	ldr	r3, [sp, #16]
 8009528:	9c08      	ldr	r4, [sp, #32]
 800952a:	950a      	str	r5, [sp, #40]	; 0x28
 800952c:	2900      	cmp	r1, #0
 800952e:	ea4f 2626 	mov.w	r6, r6, asr #8
 8009532:	bf14      	ite	ne
 8009534:	4632      	movne	r2, r6
 8009536:	464a      	moveq	r2, r9
 8009538:	bf18      	it	ne
 800953a:	4633      	movne	r3, r6
 800953c:	9d06      	ldr	r5, [sp, #24]
 800953e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009540:	9304      	str	r3, [sp, #16]
 8009542:	eb00 0848 	add.w	r8, r0, r8, lsl #1
 8009546:	fb04 f302 	mul.w	r3, r4, r2
 800954a:	9805      	ldr	r0, [sp, #20]
 800954c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800954e:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 800960c <PDM_Filter_64_LSB+0x34c>
 8009552:	fb05 3306 	mla	r3, r5, r6, r3
 8009556:	bf18      	it	ne
 8009558:	4648      	movne	r0, r9
 800955a:	2b00      	cmp	r3, #0
 800955c:	bfb8      	it	lt
 800955e:	33ff      	addlt	r3, #255	; 0xff
 8009560:	ea4f 2123 	mov.w	r1, r3, asr #8
 8009564:	9b08      	ldr	r3, [sp, #32]
 8009566:	bfb8      	it	lt
 8009568:	9d06      	ldrlt	r5, [sp, #24]
 800956a:	9005      	str	r0, [sp, #20]
 800956c:	2b00      	cmp	r3, #0
 800956e:	bf14      	ite	ne
 8009570:	460b      	movne	r3, r1
 8009572:	4613      	moveq	r3, r2
 8009574:	fb04 f303 	mul.w	r3, r4, r3
 8009578:	bf18      	it	ne
 800957a:	460d      	movne	r5, r1
 800957c:	f1b3 0108 	subs.w	r1, r3, #8
 8009580:	bf48      	it	mi
 8009582:	1dd9      	addmi	r1, r3, #7
 8009584:	f103 0008 	add.w	r0, r3, #8
 8009588:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800958c:	f8ba 200e 	ldrh.w	r2, [sl, #14]
 8009590:	9506      	str	r5, [sp, #24]
 8009592:	1100      	asrs	r0, r0, #4
 8009594:	1109      	asrs	r1, r1, #4
 8009596:	2b00      	cmp	r3, #0
 8009598:	bfcc      	ite	gt
 800959a:	4603      	movgt	r3, r0
 800959c:	460b      	movle	r3, r1
 800959e:	f647 76bc 	movw	r6, #32700	; 0x7fbc
 80095a2:	42b3      	cmp	r3, r6
 80095a4:	bfa8      	it	ge
 80095a6:	4633      	movge	r3, r6
 80095a8:	fb09 f202 	mul.w	r2, r9, r2
 80095ac:	9816      	ldr	r0, [sp, #88]	; 0x58
 80095ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80095b0:	4563      	cmp	r3, ip
 80095b2:	bfb8      	it	lt
 80095b4:	4663      	movlt	r3, ip
 80095b6:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
 80095ba:	f8ba 0030 	ldrh.w	r0, [sl, #48]	; 0x30
 80095be:	f109 0901 	add.w	r9, r9, #1
 80095c2:	4548      	cmp	r0, r9
 80095c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80095c8:	440f      	add	r7, r1
 80095ca:	f73f aec5 	bgt.w	8009358 <PDM_Filter_64_LSB+0x98>
 80095ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095d2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80095d4:	9d04      	ldr	r5, [sp, #16]
 80095d6:	9e05      	ldr	r6, [sp, #20]
 80095d8:	9906      	ldr	r1, [sp, #24]
 80095da:	f8ca 2010 	str.w	r2, [sl, #16]
 80095de:	f8ca 8014 	str.w	r8, [sl, #20]
 80095e2:	f8ca 3018 	str.w	r3, [sl, #24]
 80095e6:	f8ca 401c 	str.w	r4, [sl, #28]
 80095ea:	f8ca 5020 	str.w	r5, [sl, #32]
 80095ee:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 80095f2:	f8ca 1028 	str.w	r1, [sl, #40]	; 0x28
 80095f6:	b01a      	add	sp, #104	; 0x68
 80095f8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	200000b4 	.word	0x200000b4
 8009604:	200002b4 	.word	0x200002b4
 8009608:	200001b4 	.word	0x200001b4
 800960c:	ffff8044 	.word	0xffff8044

08009610 <__libc_init_array>:
 8009610:	b570      	push	{r4, r5, r6, lr}
 8009612:	4e0d      	ldr	r6, [pc, #52]	; (8009648 <__libc_init_array+0x38>)
 8009614:	4c0d      	ldr	r4, [pc, #52]	; (800964c <__libc_init_array+0x3c>)
 8009616:	1ba4      	subs	r4, r4, r6
 8009618:	10a4      	asrs	r4, r4, #2
 800961a:	2500      	movs	r5, #0
 800961c:	42a5      	cmp	r5, r4
 800961e:	d109      	bne.n	8009634 <__libc_init_array+0x24>
 8009620:	4e0b      	ldr	r6, [pc, #44]	; (8009650 <__libc_init_array+0x40>)
 8009622:	4c0c      	ldr	r4, [pc, #48]	; (8009654 <__libc_init_array+0x44>)
 8009624:	f001 fa60 	bl	800aae8 <_init>
 8009628:	1ba4      	subs	r4, r4, r6
 800962a:	10a4      	asrs	r4, r4, #2
 800962c:	2500      	movs	r5, #0
 800962e:	42a5      	cmp	r5, r4
 8009630:	d105      	bne.n	800963e <__libc_init_array+0x2e>
 8009632:	bd70      	pop	{r4, r5, r6, pc}
 8009634:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009638:	4798      	blx	r3
 800963a:	3501      	adds	r5, #1
 800963c:	e7ee      	b.n	800961c <__libc_init_array+0xc>
 800963e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009642:	4798      	blx	r3
 8009644:	3501      	adds	r5, #1
 8009646:	e7f2      	b.n	800962e <__libc_init_array+0x1e>
 8009648:	0800b328 	.word	0x0800b328
 800964c:	0800b328 	.word	0x0800b328
 8009650:	0800b328 	.word	0x0800b328
 8009654:	0800b32c 	.word	0x0800b32c

08009658 <malloc>:
 8009658:	4b02      	ldr	r3, [pc, #8]	; (8009664 <malloc+0xc>)
 800965a:	4601      	mov	r1, r0
 800965c:	6818      	ldr	r0, [r3, #0]
 800965e:	f000 b86d 	b.w	800973c <_malloc_r>
 8009662:	bf00      	nop
 8009664:	200003b4 	.word	0x200003b4

08009668 <free>:
 8009668:	4b02      	ldr	r3, [pc, #8]	; (8009674 <free+0xc>)
 800966a:	4601      	mov	r1, r0
 800966c:	6818      	ldr	r0, [r3, #0]
 800966e:	f000 b817 	b.w	80096a0 <_free_r>
 8009672:	bf00      	nop
 8009674:	200003b4 	.word	0x200003b4

08009678 <memcpy>:
 8009678:	b510      	push	{r4, lr}
 800967a:	1e43      	subs	r3, r0, #1
 800967c:	440a      	add	r2, r1
 800967e:	4291      	cmp	r1, r2
 8009680:	d100      	bne.n	8009684 <memcpy+0xc>
 8009682:	bd10      	pop	{r4, pc}
 8009684:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009688:	f803 4f01 	strb.w	r4, [r3, #1]!
 800968c:	e7f7      	b.n	800967e <memcpy+0x6>

0800968e <memset>:
 800968e:	4402      	add	r2, r0
 8009690:	4603      	mov	r3, r0
 8009692:	4293      	cmp	r3, r2
 8009694:	d100      	bne.n	8009698 <memset+0xa>
 8009696:	4770      	bx	lr
 8009698:	f803 1b01 	strb.w	r1, [r3], #1
 800969c:	e7f9      	b.n	8009692 <memset+0x4>
	...

080096a0 <_free_r>:
 80096a0:	b538      	push	{r3, r4, r5, lr}
 80096a2:	4605      	mov	r5, r0
 80096a4:	2900      	cmp	r1, #0
 80096a6:	d045      	beq.n	8009734 <_free_r+0x94>
 80096a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096ac:	1f0c      	subs	r4, r1, #4
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	bfb8      	it	lt
 80096b2:	18e4      	addlt	r4, r4, r3
 80096b4:	f000 f8b0 	bl	8009818 <__malloc_lock>
 80096b8:	4a1f      	ldr	r2, [pc, #124]	; (8009738 <_free_r+0x98>)
 80096ba:	6813      	ldr	r3, [r2, #0]
 80096bc:	4610      	mov	r0, r2
 80096be:	b933      	cbnz	r3, 80096ce <_free_r+0x2e>
 80096c0:	6063      	str	r3, [r4, #4]
 80096c2:	6014      	str	r4, [r2, #0]
 80096c4:	4628      	mov	r0, r5
 80096c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096ca:	f000 b8a6 	b.w	800981a <__malloc_unlock>
 80096ce:	42a3      	cmp	r3, r4
 80096d0:	d90c      	bls.n	80096ec <_free_r+0x4c>
 80096d2:	6821      	ldr	r1, [r4, #0]
 80096d4:	1862      	adds	r2, r4, r1
 80096d6:	4293      	cmp	r3, r2
 80096d8:	bf04      	itt	eq
 80096da:	681a      	ldreq	r2, [r3, #0]
 80096dc:	685b      	ldreq	r3, [r3, #4]
 80096de:	6063      	str	r3, [r4, #4]
 80096e0:	bf04      	itt	eq
 80096e2:	1852      	addeq	r2, r2, r1
 80096e4:	6022      	streq	r2, [r4, #0]
 80096e6:	6004      	str	r4, [r0, #0]
 80096e8:	e7ec      	b.n	80096c4 <_free_r+0x24>
 80096ea:	4613      	mov	r3, r2
 80096ec:	685a      	ldr	r2, [r3, #4]
 80096ee:	b10a      	cbz	r2, 80096f4 <_free_r+0x54>
 80096f0:	42a2      	cmp	r2, r4
 80096f2:	d9fa      	bls.n	80096ea <_free_r+0x4a>
 80096f4:	6819      	ldr	r1, [r3, #0]
 80096f6:	1858      	adds	r0, r3, r1
 80096f8:	42a0      	cmp	r0, r4
 80096fa:	d10b      	bne.n	8009714 <_free_r+0x74>
 80096fc:	6820      	ldr	r0, [r4, #0]
 80096fe:	4401      	add	r1, r0
 8009700:	1858      	adds	r0, r3, r1
 8009702:	4282      	cmp	r2, r0
 8009704:	6019      	str	r1, [r3, #0]
 8009706:	d1dd      	bne.n	80096c4 <_free_r+0x24>
 8009708:	6810      	ldr	r0, [r2, #0]
 800970a:	6852      	ldr	r2, [r2, #4]
 800970c:	605a      	str	r2, [r3, #4]
 800970e:	4401      	add	r1, r0
 8009710:	6019      	str	r1, [r3, #0]
 8009712:	e7d7      	b.n	80096c4 <_free_r+0x24>
 8009714:	d902      	bls.n	800971c <_free_r+0x7c>
 8009716:	230c      	movs	r3, #12
 8009718:	602b      	str	r3, [r5, #0]
 800971a:	e7d3      	b.n	80096c4 <_free_r+0x24>
 800971c:	6820      	ldr	r0, [r4, #0]
 800971e:	1821      	adds	r1, r4, r0
 8009720:	428a      	cmp	r2, r1
 8009722:	bf04      	itt	eq
 8009724:	6811      	ldreq	r1, [r2, #0]
 8009726:	6852      	ldreq	r2, [r2, #4]
 8009728:	6062      	str	r2, [r4, #4]
 800972a:	bf04      	itt	eq
 800972c:	1809      	addeq	r1, r1, r0
 800972e:	6021      	streq	r1, [r4, #0]
 8009730:	605c      	str	r4, [r3, #4]
 8009732:	e7c7      	b.n	80096c4 <_free_r+0x24>
 8009734:	bd38      	pop	{r3, r4, r5, pc}
 8009736:	bf00      	nop
 8009738:	20000934 	.word	0x20000934

0800973c <_malloc_r>:
 800973c:	b570      	push	{r4, r5, r6, lr}
 800973e:	1ccd      	adds	r5, r1, #3
 8009740:	f025 0503 	bic.w	r5, r5, #3
 8009744:	3508      	adds	r5, #8
 8009746:	2d0c      	cmp	r5, #12
 8009748:	bf38      	it	cc
 800974a:	250c      	movcc	r5, #12
 800974c:	2d00      	cmp	r5, #0
 800974e:	4606      	mov	r6, r0
 8009750:	db01      	blt.n	8009756 <_malloc_r+0x1a>
 8009752:	42a9      	cmp	r1, r5
 8009754:	d903      	bls.n	800975e <_malloc_r+0x22>
 8009756:	230c      	movs	r3, #12
 8009758:	6033      	str	r3, [r6, #0]
 800975a:	2000      	movs	r0, #0
 800975c:	bd70      	pop	{r4, r5, r6, pc}
 800975e:	f000 f85b 	bl	8009818 <__malloc_lock>
 8009762:	4a23      	ldr	r2, [pc, #140]	; (80097f0 <_malloc_r+0xb4>)
 8009764:	6814      	ldr	r4, [r2, #0]
 8009766:	4621      	mov	r1, r4
 8009768:	b991      	cbnz	r1, 8009790 <_malloc_r+0x54>
 800976a:	4c22      	ldr	r4, [pc, #136]	; (80097f4 <_malloc_r+0xb8>)
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	b91b      	cbnz	r3, 8009778 <_malloc_r+0x3c>
 8009770:	4630      	mov	r0, r6
 8009772:	f000 f841 	bl	80097f8 <_sbrk_r>
 8009776:	6020      	str	r0, [r4, #0]
 8009778:	4629      	mov	r1, r5
 800977a:	4630      	mov	r0, r6
 800977c:	f000 f83c 	bl	80097f8 <_sbrk_r>
 8009780:	1c43      	adds	r3, r0, #1
 8009782:	d126      	bne.n	80097d2 <_malloc_r+0x96>
 8009784:	230c      	movs	r3, #12
 8009786:	6033      	str	r3, [r6, #0]
 8009788:	4630      	mov	r0, r6
 800978a:	f000 f846 	bl	800981a <__malloc_unlock>
 800978e:	e7e4      	b.n	800975a <_malloc_r+0x1e>
 8009790:	680b      	ldr	r3, [r1, #0]
 8009792:	1b5b      	subs	r3, r3, r5
 8009794:	d41a      	bmi.n	80097cc <_malloc_r+0x90>
 8009796:	2b0b      	cmp	r3, #11
 8009798:	d90f      	bls.n	80097ba <_malloc_r+0x7e>
 800979a:	600b      	str	r3, [r1, #0]
 800979c:	50cd      	str	r5, [r1, r3]
 800979e:	18cc      	adds	r4, r1, r3
 80097a0:	4630      	mov	r0, r6
 80097a2:	f000 f83a 	bl	800981a <__malloc_unlock>
 80097a6:	f104 000b 	add.w	r0, r4, #11
 80097aa:	1d23      	adds	r3, r4, #4
 80097ac:	f020 0007 	bic.w	r0, r0, #7
 80097b0:	1ac3      	subs	r3, r0, r3
 80097b2:	d01b      	beq.n	80097ec <_malloc_r+0xb0>
 80097b4:	425a      	negs	r2, r3
 80097b6:	50e2      	str	r2, [r4, r3]
 80097b8:	bd70      	pop	{r4, r5, r6, pc}
 80097ba:	428c      	cmp	r4, r1
 80097bc:	bf0d      	iteet	eq
 80097be:	6863      	ldreq	r3, [r4, #4]
 80097c0:	684b      	ldrne	r3, [r1, #4]
 80097c2:	6063      	strne	r3, [r4, #4]
 80097c4:	6013      	streq	r3, [r2, #0]
 80097c6:	bf18      	it	ne
 80097c8:	460c      	movne	r4, r1
 80097ca:	e7e9      	b.n	80097a0 <_malloc_r+0x64>
 80097cc:	460c      	mov	r4, r1
 80097ce:	6849      	ldr	r1, [r1, #4]
 80097d0:	e7ca      	b.n	8009768 <_malloc_r+0x2c>
 80097d2:	1cc4      	adds	r4, r0, #3
 80097d4:	f024 0403 	bic.w	r4, r4, #3
 80097d8:	42a0      	cmp	r0, r4
 80097da:	d005      	beq.n	80097e8 <_malloc_r+0xac>
 80097dc:	1a21      	subs	r1, r4, r0
 80097de:	4630      	mov	r0, r6
 80097e0:	f000 f80a 	bl	80097f8 <_sbrk_r>
 80097e4:	3001      	adds	r0, #1
 80097e6:	d0cd      	beq.n	8009784 <_malloc_r+0x48>
 80097e8:	6025      	str	r5, [r4, #0]
 80097ea:	e7d9      	b.n	80097a0 <_malloc_r+0x64>
 80097ec:	bd70      	pop	{r4, r5, r6, pc}
 80097ee:	bf00      	nop
 80097f0:	20000934 	.word	0x20000934
 80097f4:	20000938 	.word	0x20000938

080097f8 <_sbrk_r>:
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	4c06      	ldr	r4, [pc, #24]	; (8009814 <_sbrk_r+0x1c>)
 80097fc:	2300      	movs	r3, #0
 80097fe:	4605      	mov	r5, r0
 8009800:	4608      	mov	r0, r1
 8009802:	6023      	str	r3, [r4, #0]
 8009804:	f001 f962 	bl	800aacc <_sbrk>
 8009808:	1c43      	adds	r3, r0, #1
 800980a:	d102      	bne.n	8009812 <_sbrk_r+0x1a>
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	b103      	cbz	r3, 8009812 <_sbrk_r+0x1a>
 8009810:	602b      	str	r3, [r5, #0]
 8009812:	bd38      	pop	{r3, r4, r5, pc}
 8009814:	2000a470 	.word	0x2000a470

08009818 <__malloc_lock>:
 8009818:	4770      	bx	lr

0800981a <__malloc_unlock>:
 800981a:	4770      	bx	lr
 800981c:	0000      	movs	r0, r0
	...

08009820 <cos>:
 8009820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009822:	ec51 0b10 	vmov	r0, r1, d0
 8009826:	4a1e      	ldr	r2, [pc, #120]	; (80098a0 <cos+0x80>)
 8009828:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800982c:	4293      	cmp	r3, r2
 800982e:	dc06      	bgt.n	800983e <cos+0x1e>
 8009830:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8009898 <cos+0x78>
 8009834:	f000 fb38 	bl	8009ea8 <__kernel_cos>
 8009838:	ec51 0b10 	vmov	r0, r1, d0
 800983c:	e007      	b.n	800984e <cos+0x2e>
 800983e:	4a19      	ldr	r2, [pc, #100]	; (80098a4 <cos+0x84>)
 8009840:	4293      	cmp	r3, r2
 8009842:	dd09      	ble.n	8009858 <cos+0x38>
 8009844:	ee10 2a10 	vmov	r2, s0
 8009848:	460b      	mov	r3, r1
 800984a:	f7f6 fcc9 	bl	80001e0 <__aeabi_dsub>
 800984e:	ec41 0b10 	vmov	d0, r0, r1
 8009852:	b005      	add	sp, #20
 8009854:	f85d fb04 	ldr.w	pc, [sp], #4
 8009858:	4668      	mov	r0, sp
 800985a:	f000 f881 	bl	8009960 <__ieee754_rem_pio2>
 800985e:	f000 0003 	and.w	r0, r0, #3
 8009862:	2801      	cmp	r0, #1
 8009864:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009868:	ed9d 0b00 	vldr	d0, [sp]
 800986c:	d007      	beq.n	800987e <cos+0x5e>
 800986e:	2802      	cmp	r0, #2
 8009870:	d00e      	beq.n	8009890 <cos+0x70>
 8009872:	2800      	cmp	r0, #0
 8009874:	d0de      	beq.n	8009834 <cos+0x14>
 8009876:	2001      	movs	r0, #1
 8009878:	f000 ff4e 	bl	800a718 <__kernel_sin>
 800987c:	e7dc      	b.n	8009838 <cos+0x18>
 800987e:	f000 ff4b 	bl	800a718 <__kernel_sin>
 8009882:	ec53 2b10 	vmov	r2, r3, d0
 8009886:	ee10 0a10 	vmov	r0, s0
 800988a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800988e:	e7de      	b.n	800984e <cos+0x2e>
 8009890:	f000 fb0a 	bl	8009ea8 <__kernel_cos>
 8009894:	e7f5      	b.n	8009882 <cos+0x62>
 8009896:	bf00      	nop
	...
 80098a0:	3fe921fb 	.word	0x3fe921fb
 80098a4:	7fefffff 	.word	0x7fefffff

080098a8 <sqrt>:
 80098a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098ac:	ed2d 8b02 	vpush	{d8}
 80098b0:	b08b      	sub	sp, #44	; 0x2c
 80098b2:	ec55 4b10 	vmov	r4, r5, d0
 80098b6:	f000 fa45 	bl	8009d44 <__ieee754_sqrt>
 80098ba:	4b26      	ldr	r3, [pc, #152]	; (8009954 <sqrt+0xac>)
 80098bc:	eeb0 8a40 	vmov.f32	s16, s0
 80098c0:	eef0 8a60 	vmov.f32	s17, s1
 80098c4:	f993 6000 	ldrsb.w	r6, [r3]
 80098c8:	1c73      	adds	r3, r6, #1
 80098ca:	d02a      	beq.n	8009922 <sqrt+0x7a>
 80098cc:	4622      	mov	r2, r4
 80098ce:	462b      	mov	r3, r5
 80098d0:	4620      	mov	r0, r4
 80098d2:	4629      	mov	r1, r5
 80098d4:	f7f7 f8d2 	bl	8000a7c <__aeabi_dcmpun>
 80098d8:	4607      	mov	r7, r0
 80098da:	bb10      	cbnz	r0, 8009922 <sqrt+0x7a>
 80098dc:	f04f 0800 	mov.w	r8, #0
 80098e0:	f04f 0900 	mov.w	r9, #0
 80098e4:	4642      	mov	r2, r8
 80098e6:	464b      	mov	r3, r9
 80098e8:	4620      	mov	r0, r4
 80098ea:	4629      	mov	r1, r5
 80098ec:	f7f7 f89e 	bl	8000a2c <__aeabi_dcmplt>
 80098f0:	b1b8      	cbz	r0, 8009922 <sqrt+0x7a>
 80098f2:	2301      	movs	r3, #1
 80098f4:	9300      	str	r3, [sp, #0]
 80098f6:	4b18      	ldr	r3, [pc, #96]	; (8009958 <sqrt+0xb0>)
 80098f8:	9301      	str	r3, [sp, #4]
 80098fa:	9708      	str	r7, [sp, #32]
 80098fc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009900:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009904:	b9b6      	cbnz	r6, 8009934 <sqrt+0x8c>
 8009906:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800990a:	4668      	mov	r0, sp
 800990c:	f001 f84c 	bl	800a9a8 <matherr>
 8009910:	b1d0      	cbz	r0, 8009948 <sqrt+0xa0>
 8009912:	9b08      	ldr	r3, [sp, #32]
 8009914:	b11b      	cbz	r3, 800991e <sqrt+0x76>
 8009916:	f001 f8d3 	bl	800aac0 <__errno>
 800991a:	9b08      	ldr	r3, [sp, #32]
 800991c:	6003      	str	r3, [r0, #0]
 800991e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009922:	eeb0 0a48 	vmov.f32	s0, s16
 8009926:	eef0 0a68 	vmov.f32	s1, s17
 800992a:	b00b      	add	sp, #44	; 0x2c
 800992c:	ecbd 8b02 	vpop	{d8}
 8009930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009934:	4642      	mov	r2, r8
 8009936:	464b      	mov	r3, r9
 8009938:	4640      	mov	r0, r8
 800993a:	4649      	mov	r1, r9
 800993c:	f7f6 ff2e 	bl	800079c <__aeabi_ddiv>
 8009940:	2e02      	cmp	r6, #2
 8009942:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009946:	d1e0      	bne.n	800990a <sqrt+0x62>
 8009948:	f001 f8ba 	bl	800aac0 <__errno>
 800994c:	2321      	movs	r3, #33	; 0x21
 800994e:	6003      	str	r3, [r0, #0]
 8009950:	e7df      	b.n	8009912 <sqrt+0x6a>
 8009952:	bf00      	nop
 8009954:	20000418 	.word	0x20000418
 8009958:	0800b149 	.word	0x0800b149
 800995c:	00000000 	.word	0x00000000

08009960 <__ieee754_rem_pio2>:
 8009960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009964:	ec57 6b10 	vmov	r6, r7, d0
 8009968:	4bc3      	ldr	r3, [pc, #780]	; (8009c78 <__ieee754_rem_pio2+0x318>)
 800996a:	b08d      	sub	sp, #52	; 0x34
 800996c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009970:	4598      	cmp	r8, r3
 8009972:	4604      	mov	r4, r0
 8009974:	9704      	str	r7, [sp, #16]
 8009976:	dc07      	bgt.n	8009988 <__ieee754_rem_pio2+0x28>
 8009978:	2200      	movs	r2, #0
 800997a:	2300      	movs	r3, #0
 800997c:	ed84 0b00 	vstr	d0, [r4]
 8009980:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009984:	2500      	movs	r5, #0
 8009986:	e027      	b.n	80099d8 <__ieee754_rem_pio2+0x78>
 8009988:	4bbc      	ldr	r3, [pc, #752]	; (8009c7c <__ieee754_rem_pio2+0x31c>)
 800998a:	4598      	cmp	r8, r3
 800998c:	dc75      	bgt.n	8009a7a <__ieee754_rem_pio2+0x11a>
 800998e:	9b04      	ldr	r3, [sp, #16]
 8009990:	4dbb      	ldr	r5, [pc, #748]	; (8009c80 <__ieee754_rem_pio2+0x320>)
 8009992:	2b00      	cmp	r3, #0
 8009994:	ee10 0a10 	vmov	r0, s0
 8009998:	a3a9      	add	r3, pc, #676	; (adr r3, 8009c40 <__ieee754_rem_pio2+0x2e0>)
 800999a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999e:	4639      	mov	r1, r7
 80099a0:	dd36      	ble.n	8009a10 <__ieee754_rem_pio2+0xb0>
 80099a2:	f7f6 fc1d 	bl	80001e0 <__aeabi_dsub>
 80099a6:	45a8      	cmp	r8, r5
 80099a8:	4606      	mov	r6, r0
 80099aa:	460f      	mov	r7, r1
 80099ac:	d018      	beq.n	80099e0 <__ieee754_rem_pio2+0x80>
 80099ae:	a3a6      	add	r3, pc, #664	; (adr r3, 8009c48 <__ieee754_rem_pio2+0x2e8>)
 80099b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b4:	f7f6 fc14 	bl	80001e0 <__aeabi_dsub>
 80099b8:	4602      	mov	r2, r0
 80099ba:	460b      	mov	r3, r1
 80099bc:	e9c4 2300 	strd	r2, r3, [r4]
 80099c0:	4630      	mov	r0, r6
 80099c2:	4639      	mov	r1, r7
 80099c4:	f7f6 fc0c 	bl	80001e0 <__aeabi_dsub>
 80099c8:	a39f      	add	r3, pc, #636	; (adr r3, 8009c48 <__ieee754_rem_pio2+0x2e8>)
 80099ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ce:	f7f6 fc07 	bl	80001e0 <__aeabi_dsub>
 80099d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80099d6:	2501      	movs	r5, #1
 80099d8:	4628      	mov	r0, r5
 80099da:	b00d      	add	sp, #52	; 0x34
 80099dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e0:	a39b      	add	r3, pc, #620	; (adr r3, 8009c50 <__ieee754_rem_pio2+0x2f0>)
 80099e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e6:	f7f6 fbfb 	bl	80001e0 <__aeabi_dsub>
 80099ea:	a39b      	add	r3, pc, #620	; (adr r3, 8009c58 <__ieee754_rem_pio2+0x2f8>)
 80099ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f0:	4606      	mov	r6, r0
 80099f2:	460f      	mov	r7, r1
 80099f4:	f7f6 fbf4 	bl	80001e0 <__aeabi_dsub>
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	e9c4 2300 	strd	r2, r3, [r4]
 8009a00:	4630      	mov	r0, r6
 8009a02:	4639      	mov	r1, r7
 8009a04:	f7f6 fbec 	bl	80001e0 <__aeabi_dsub>
 8009a08:	a393      	add	r3, pc, #588	; (adr r3, 8009c58 <__ieee754_rem_pio2+0x2f8>)
 8009a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0e:	e7de      	b.n	80099ce <__ieee754_rem_pio2+0x6e>
 8009a10:	f7f6 fbe8 	bl	80001e4 <__adddf3>
 8009a14:	45a8      	cmp	r8, r5
 8009a16:	4606      	mov	r6, r0
 8009a18:	460f      	mov	r7, r1
 8009a1a:	d016      	beq.n	8009a4a <__ieee754_rem_pio2+0xea>
 8009a1c:	a38a      	add	r3, pc, #552	; (adr r3, 8009c48 <__ieee754_rem_pio2+0x2e8>)
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	f7f6 fbdf 	bl	80001e4 <__adddf3>
 8009a26:	4602      	mov	r2, r0
 8009a28:	460b      	mov	r3, r1
 8009a2a:	e9c4 2300 	strd	r2, r3, [r4]
 8009a2e:	4630      	mov	r0, r6
 8009a30:	4639      	mov	r1, r7
 8009a32:	f7f6 fbd5 	bl	80001e0 <__aeabi_dsub>
 8009a36:	a384      	add	r3, pc, #528	; (adr r3, 8009c48 <__ieee754_rem_pio2+0x2e8>)
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	f7f6 fbd2 	bl	80001e4 <__adddf3>
 8009a40:	f04f 35ff 	mov.w	r5, #4294967295
 8009a44:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009a48:	e7c6      	b.n	80099d8 <__ieee754_rem_pio2+0x78>
 8009a4a:	a381      	add	r3, pc, #516	; (adr r3, 8009c50 <__ieee754_rem_pio2+0x2f0>)
 8009a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a50:	f7f6 fbc8 	bl	80001e4 <__adddf3>
 8009a54:	a380      	add	r3, pc, #512	; (adr r3, 8009c58 <__ieee754_rem_pio2+0x2f8>)
 8009a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5a:	4606      	mov	r6, r0
 8009a5c:	460f      	mov	r7, r1
 8009a5e:	f7f6 fbc1 	bl	80001e4 <__adddf3>
 8009a62:	4602      	mov	r2, r0
 8009a64:	460b      	mov	r3, r1
 8009a66:	e9c4 2300 	strd	r2, r3, [r4]
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	4639      	mov	r1, r7
 8009a6e:	f7f6 fbb7 	bl	80001e0 <__aeabi_dsub>
 8009a72:	a379      	add	r3, pc, #484	; (adr r3, 8009c58 <__ieee754_rem_pio2+0x2f8>)
 8009a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a78:	e7e0      	b.n	8009a3c <__ieee754_rem_pio2+0xdc>
 8009a7a:	4b82      	ldr	r3, [pc, #520]	; (8009c84 <__ieee754_rem_pio2+0x324>)
 8009a7c:	4598      	cmp	r8, r3
 8009a7e:	f300 80d0 	bgt.w	8009c22 <__ieee754_rem_pio2+0x2c2>
 8009a82:	f000 ff03 	bl	800a88c <fabs>
 8009a86:	ec57 6b10 	vmov	r6, r7, d0
 8009a8a:	ee10 0a10 	vmov	r0, s0
 8009a8e:	a374      	add	r3, pc, #464	; (adr r3, 8009c60 <__ieee754_rem_pio2+0x300>)
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	4639      	mov	r1, r7
 8009a96:	f7f6 fd57 	bl	8000548 <__aeabi_dmul>
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	4b7a      	ldr	r3, [pc, #488]	; (8009c88 <__ieee754_rem_pio2+0x328>)
 8009a9e:	f7f6 fba1 	bl	80001e4 <__adddf3>
 8009aa2:	f7f7 f801 	bl	8000aa8 <__aeabi_d2iz>
 8009aa6:	4605      	mov	r5, r0
 8009aa8:	f7f6 fce8 	bl	800047c <__aeabi_i2d>
 8009aac:	a364      	add	r3, pc, #400	; (adr r3, 8009c40 <__ieee754_rem_pio2+0x2e0>)
 8009aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ab6:	f7f6 fd47 	bl	8000548 <__aeabi_dmul>
 8009aba:	4602      	mov	r2, r0
 8009abc:	460b      	mov	r3, r1
 8009abe:	4630      	mov	r0, r6
 8009ac0:	4639      	mov	r1, r7
 8009ac2:	f7f6 fb8d 	bl	80001e0 <__aeabi_dsub>
 8009ac6:	a360      	add	r3, pc, #384	; (adr r3, 8009c48 <__ieee754_rem_pio2+0x2e8>)
 8009ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009acc:	4682      	mov	sl, r0
 8009ace:	468b      	mov	fp, r1
 8009ad0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ad4:	f7f6 fd38 	bl	8000548 <__aeabi_dmul>
 8009ad8:	2d1f      	cmp	r5, #31
 8009ada:	4606      	mov	r6, r0
 8009adc:	460f      	mov	r7, r1
 8009ade:	dc2a      	bgt.n	8009b36 <__ieee754_rem_pio2+0x1d6>
 8009ae0:	1e6a      	subs	r2, r5, #1
 8009ae2:	4b6a      	ldr	r3, [pc, #424]	; (8009c8c <__ieee754_rem_pio2+0x32c>)
 8009ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ae8:	4598      	cmp	r8, r3
 8009aea:	d024      	beq.n	8009b36 <__ieee754_rem_pio2+0x1d6>
 8009aec:	4632      	mov	r2, r6
 8009aee:	463b      	mov	r3, r7
 8009af0:	4650      	mov	r0, sl
 8009af2:	4659      	mov	r1, fp
 8009af4:	f7f6 fb74 	bl	80001e0 <__aeabi_dsub>
 8009af8:	e9c4 0100 	strd	r0, r1, [r4]
 8009afc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009b00:	4650      	mov	r0, sl
 8009b02:	4642      	mov	r2, r8
 8009b04:	464b      	mov	r3, r9
 8009b06:	4659      	mov	r1, fp
 8009b08:	f7f6 fb6a 	bl	80001e0 <__aeabi_dsub>
 8009b0c:	463b      	mov	r3, r7
 8009b0e:	4632      	mov	r2, r6
 8009b10:	f7f6 fb66 	bl	80001e0 <__aeabi_dsub>
 8009b14:	9b04      	ldr	r3, [sp, #16]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009b1c:	f6bf af5c 	bge.w	80099d8 <__ieee754_rem_pio2+0x78>
 8009b20:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009b24:	6063      	str	r3, [r4, #4]
 8009b26:	f8c4 8000 	str.w	r8, [r4]
 8009b2a:	60a0      	str	r0, [r4, #8]
 8009b2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b30:	60e3      	str	r3, [r4, #12]
 8009b32:	426d      	negs	r5, r5
 8009b34:	e750      	b.n	80099d8 <__ieee754_rem_pio2+0x78>
 8009b36:	4632      	mov	r2, r6
 8009b38:	463b      	mov	r3, r7
 8009b3a:	4650      	mov	r0, sl
 8009b3c:	4659      	mov	r1, fp
 8009b3e:	f7f6 fb4f 	bl	80001e0 <__aeabi_dsub>
 8009b42:	ea4f 5228 	mov.w	r2, r8, asr #20
 8009b46:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	2b10      	cmp	r3, #16
 8009b4e:	e9c4 0100 	strd	r0, r1, [r4]
 8009b52:	9205      	str	r2, [sp, #20]
 8009b54:	ddd2      	ble.n	8009afc <__ieee754_rem_pio2+0x19c>
 8009b56:	a33e      	add	r3, pc, #248	; (adr r3, 8009c50 <__ieee754_rem_pio2+0x2f0>)
 8009b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b60:	f7f6 fcf2 	bl	8000548 <__aeabi_dmul>
 8009b64:	4606      	mov	r6, r0
 8009b66:	460f      	mov	r7, r1
 8009b68:	4602      	mov	r2, r0
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	4650      	mov	r0, sl
 8009b6e:	4659      	mov	r1, fp
 8009b70:	f7f6 fb36 	bl	80001e0 <__aeabi_dsub>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	4680      	mov	r8, r0
 8009b7a:	4689      	mov	r9, r1
 8009b7c:	4650      	mov	r0, sl
 8009b7e:	4659      	mov	r1, fp
 8009b80:	f7f6 fb2e 	bl	80001e0 <__aeabi_dsub>
 8009b84:	4632      	mov	r2, r6
 8009b86:	463b      	mov	r3, r7
 8009b88:	f7f6 fb2a 	bl	80001e0 <__aeabi_dsub>
 8009b8c:	a332      	add	r3, pc, #200	; (adr r3, 8009c58 <__ieee754_rem_pio2+0x2f8>)
 8009b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b92:	4606      	mov	r6, r0
 8009b94:	460f      	mov	r7, r1
 8009b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b9a:	f7f6 fcd5 	bl	8000548 <__aeabi_dmul>
 8009b9e:	4632      	mov	r2, r6
 8009ba0:	463b      	mov	r3, r7
 8009ba2:	f7f6 fb1d 	bl	80001e0 <__aeabi_dsub>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	460b      	mov	r3, r1
 8009baa:	4606      	mov	r6, r0
 8009bac:	460f      	mov	r7, r1
 8009bae:	4640      	mov	r0, r8
 8009bb0:	4649      	mov	r1, r9
 8009bb2:	f7f6 fb15 	bl	80001e0 <__aeabi_dsub>
 8009bb6:	9a05      	ldr	r2, [sp, #20]
 8009bb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009bbc:	1ad3      	subs	r3, r2, r3
 8009bbe:	2b31      	cmp	r3, #49	; 0x31
 8009bc0:	e9c4 0100 	strd	r0, r1, [r4]
 8009bc4:	dd2a      	ble.n	8009c1c <__ieee754_rem_pio2+0x2bc>
 8009bc6:	a328      	add	r3, pc, #160	; (adr r3, 8009c68 <__ieee754_rem_pio2+0x308>)
 8009bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bd0:	f7f6 fcba 	bl	8000548 <__aeabi_dmul>
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	460f      	mov	r7, r1
 8009bd8:	4602      	mov	r2, r0
 8009bda:	460b      	mov	r3, r1
 8009bdc:	4640      	mov	r0, r8
 8009bde:	4649      	mov	r1, r9
 8009be0:	f7f6 fafe 	bl	80001e0 <__aeabi_dsub>
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	4682      	mov	sl, r0
 8009bea:	468b      	mov	fp, r1
 8009bec:	4640      	mov	r0, r8
 8009bee:	4649      	mov	r1, r9
 8009bf0:	f7f6 faf6 	bl	80001e0 <__aeabi_dsub>
 8009bf4:	4632      	mov	r2, r6
 8009bf6:	463b      	mov	r3, r7
 8009bf8:	f7f6 faf2 	bl	80001e0 <__aeabi_dsub>
 8009bfc:	a31c      	add	r3, pc, #112	; (adr r3, 8009c70 <__ieee754_rem_pio2+0x310>)
 8009bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c02:	4606      	mov	r6, r0
 8009c04:	460f      	mov	r7, r1
 8009c06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c0a:	f7f6 fc9d 	bl	8000548 <__aeabi_dmul>
 8009c0e:	4632      	mov	r2, r6
 8009c10:	463b      	mov	r3, r7
 8009c12:	f7f6 fae5 	bl	80001e0 <__aeabi_dsub>
 8009c16:	4606      	mov	r6, r0
 8009c18:	460f      	mov	r7, r1
 8009c1a:	e767      	b.n	8009aec <__ieee754_rem_pio2+0x18c>
 8009c1c:	46c2      	mov	sl, r8
 8009c1e:	46cb      	mov	fp, r9
 8009c20:	e76c      	b.n	8009afc <__ieee754_rem_pio2+0x19c>
 8009c22:	4b1b      	ldr	r3, [pc, #108]	; (8009c90 <__ieee754_rem_pio2+0x330>)
 8009c24:	4598      	cmp	r8, r3
 8009c26:	dd35      	ble.n	8009c94 <__ieee754_rem_pio2+0x334>
 8009c28:	ee10 2a10 	vmov	r2, s0
 8009c2c:	463b      	mov	r3, r7
 8009c2e:	4630      	mov	r0, r6
 8009c30:	4639      	mov	r1, r7
 8009c32:	f7f6 fad5 	bl	80001e0 <__aeabi_dsub>
 8009c36:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009c3a:	e9c4 0100 	strd	r0, r1, [r4]
 8009c3e:	e6a1      	b.n	8009984 <__ieee754_rem_pio2+0x24>
 8009c40:	54400000 	.word	0x54400000
 8009c44:	3ff921fb 	.word	0x3ff921fb
 8009c48:	1a626331 	.word	0x1a626331
 8009c4c:	3dd0b461 	.word	0x3dd0b461
 8009c50:	1a600000 	.word	0x1a600000
 8009c54:	3dd0b461 	.word	0x3dd0b461
 8009c58:	2e037073 	.word	0x2e037073
 8009c5c:	3ba3198a 	.word	0x3ba3198a
 8009c60:	6dc9c883 	.word	0x6dc9c883
 8009c64:	3fe45f30 	.word	0x3fe45f30
 8009c68:	2e000000 	.word	0x2e000000
 8009c6c:	3ba3198a 	.word	0x3ba3198a
 8009c70:	252049c1 	.word	0x252049c1
 8009c74:	397b839a 	.word	0x397b839a
 8009c78:	3fe921fb 	.word	0x3fe921fb
 8009c7c:	4002d97b 	.word	0x4002d97b
 8009c80:	3ff921fb 	.word	0x3ff921fb
 8009c84:	413921fb 	.word	0x413921fb
 8009c88:	3fe00000 	.word	0x3fe00000
 8009c8c:	0800b150 	.word	0x0800b150
 8009c90:	7fefffff 	.word	0x7fefffff
 8009c94:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009c98:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8009c9c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	460f      	mov	r7, r1
 8009ca4:	f7f6 ff00 	bl	8000aa8 <__aeabi_d2iz>
 8009ca8:	f7f6 fbe8 	bl	800047c <__aeabi_i2d>
 8009cac:	4602      	mov	r2, r0
 8009cae:	460b      	mov	r3, r1
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	4639      	mov	r1, r7
 8009cb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009cb8:	f7f6 fa92 	bl	80001e0 <__aeabi_dsub>
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	4b1f      	ldr	r3, [pc, #124]	; (8009d3c <__ieee754_rem_pio2+0x3dc>)
 8009cc0:	f7f6 fc42 	bl	8000548 <__aeabi_dmul>
 8009cc4:	460f      	mov	r7, r1
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	f7f6 feee 	bl	8000aa8 <__aeabi_d2iz>
 8009ccc:	f7f6 fbd6 	bl	800047c <__aeabi_i2d>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	4639      	mov	r1, r7
 8009cd8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009cdc:	f7f6 fa80 	bl	80001e0 <__aeabi_dsub>
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	4b16      	ldr	r3, [pc, #88]	; (8009d3c <__ieee754_rem_pio2+0x3dc>)
 8009ce4:	f7f6 fc30 	bl	8000548 <__aeabi_dmul>
 8009ce8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009cec:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8009cf0:	f04f 0803 	mov.w	r8, #3
 8009cf4:	2600      	movs	r6, #0
 8009cf6:	2700      	movs	r7, #0
 8009cf8:	4632      	mov	r2, r6
 8009cfa:	463b      	mov	r3, r7
 8009cfc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009d00:	f108 3aff 	add.w	sl, r8, #4294967295
 8009d04:	f7f6 fe88 	bl	8000a18 <__aeabi_dcmpeq>
 8009d08:	b9b0      	cbnz	r0, 8009d38 <__ieee754_rem_pio2+0x3d8>
 8009d0a:	4b0d      	ldr	r3, [pc, #52]	; (8009d40 <__ieee754_rem_pio2+0x3e0>)
 8009d0c:	9301      	str	r3, [sp, #4]
 8009d0e:	2302      	movs	r3, #2
 8009d10:	9300      	str	r3, [sp, #0]
 8009d12:	462a      	mov	r2, r5
 8009d14:	4643      	mov	r3, r8
 8009d16:	4621      	mov	r1, r4
 8009d18:	a806      	add	r0, sp, #24
 8009d1a:	f000 f9ad 	bl	800a078 <__kernel_rem_pio2>
 8009d1e:	9b04      	ldr	r3, [sp, #16]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	4605      	mov	r5, r0
 8009d24:	f6bf ae58 	bge.w	80099d8 <__ieee754_rem_pio2+0x78>
 8009d28:	6863      	ldr	r3, [r4, #4]
 8009d2a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009d2e:	6063      	str	r3, [r4, #4]
 8009d30:	68e3      	ldr	r3, [r4, #12]
 8009d32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009d36:	e6fb      	b.n	8009b30 <__ieee754_rem_pio2+0x1d0>
 8009d38:	46d0      	mov	r8, sl
 8009d3a:	e7dd      	b.n	8009cf8 <__ieee754_rem_pio2+0x398>
 8009d3c:	41700000 	.word	0x41700000
 8009d40:	0800b1d0 	.word	0x0800b1d0

08009d44 <__ieee754_sqrt>:
 8009d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d48:	ec55 4b10 	vmov	r4, r5, d0
 8009d4c:	4e54      	ldr	r6, [pc, #336]	; (8009ea0 <__ieee754_sqrt+0x15c>)
 8009d4e:	43ae      	bics	r6, r5
 8009d50:	ee10 0a10 	vmov	r0, s0
 8009d54:	462b      	mov	r3, r5
 8009d56:	462a      	mov	r2, r5
 8009d58:	4621      	mov	r1, r4
 8009d5a:	d113      	bne.n	8009d84 <__ieee754_sqrt+0x40>
 8009d5c:	ee10 2a10 	vmov	r2, s0
 8009d60:	462b      	mov	r3, r5
 8009d62:	ee10 0a10 	vmov	r0, s0
 8009d66:	4629      	mov	r1, r5
 8009d68:	f7f6 fbee 	bl	8000548 <__aeabi_dmul>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	460b      	mov	r3, r1
 8009d70:	4620      	mov	r0, r4
 8009d72:	4629      	mov	r1, r5
 8009d74:	f7f6 fa36 	bl	80001e4 <__adddf3>
 8009d78:	4604      	mov	r4, r0
 8009d7a:	460d      	mov	r5, r1
 8009d7c:	ec45 4b10 	vmov	d0, r4, r5
 8009d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d84:	2d00      	cmp	r5, #0
 8009d86:	dc10      	bgt.n	8009daa <__ieee754_sqrt+0x66>
 8009d88:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009d8c:	4330      	orrs	r0, r6
 8009d8e:	d0f5      	beq.n	8009d7c <__ieee754_sqrt+0x38>
 8009d90:	b15d      	cbz	r5, 8009daa <__ieee754_sqrt+0x66>
 8009d92:	ee10 2a10 	vmov	r2, s0
 8009d96:	462b      	mov	r3, r5
 8009d98:	4620      	mov	r0, r4
 8009d9a:	4629      	mov	r1, r5
 8009d9c:	f7f6 fa20 	bl	80001e0 <__aeabi_dsub>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	f7f6 fcfa 	bl	800079c <__aeabi_ddiv>
 8009da8:	e7e6      	b.n	8009d78 <__ieee754_sqrt+0x34>
 8009daa:	151b      	asrs	r3, r3, #20
 8009dac:	d10c      	bne.n	8009dc8 <__ieee754_sqrt+0x84>
 8009dae:	2a00      	cmp	r2, #0
 8009db0:	d06d      	beq.n	8009e8e <__ieee754_sqrt+0x14a>
 8009db2:	2000      	movs	r0, #0
 8009db4:	02d6      	lsls	r6, r2, #11
 8009db6:	d56e      	bpl.n	8009e96 <__ieee754_sqrt+0x152>
 8009db8:	1e44      	subs	r4, r0, #1
 8009dba:	1b1b      	subs	r3, r3, r4
 8009dbc:	f1c0 0420 	rsb	r4, r0, #32
 8009dc0:	fa21 f404 	lsr.w	r4, r1, r4
 8009dc4:	4322      	orrs	r2, r4
 8009dc6:	4081      	lsls	r1, r0
 8009dc8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009dcc:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009dd0:	07dd      	lsls	r5, r3, #31
 8009dd2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009dd6:	bf42      	ittt	mi
 8009dd8:	0052      	lslmi	r2, r2, #1
 8009dda:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8009dde:	0049      	lslmi	r1, r1, #1
 8009de0:	1058      	asrs	r0, r3, #1
 8009de2:	2500      	movs	r5, #0
 8009de4:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8009de8:	441a      	add	r2, r3
 8009dea:	0049      	lsls	r1, r1, #1
 8009dec:	2316      	movs	r3, #22
 8009dee:	462c      	mov	r4, r5
 8009df0:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009df4:	19a7      	adds	r7, r4, r6
 8009df6:	4297      	cmp	r7, r2
 8009df8:	bfde      	ittt	le
 8009dfa:	1bd2      	suble	r2, r2, r7
 8009dfc:	19bc      	addle	r4, r7, r6
 8009dfe:	19ad      	addle	r5, r5, r6
 8009e00:	0052      	lsls	r2, r2, #1
 8009e02:	3b01      	subs	r3, #1
 8009e04:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009e08:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009e0c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009e10:	d1f0      	bne.n	8009df4 <__ieee754_sqrt+0xb0>
 8009e12:	f04f 0e20 	mov.w	lr, #32
 8009e16:	469c      	mov	ip, r3
 8009e18:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009e1c:	42a2      	cmp	r2, r4
 8009e1e:	eb06 070c 	add.w	r7, r6, ip
 8009e22:	dc02      	bgt.n	8009e2a <__ieee754_sqrt+0xe6>
 8009e24:	d112      	bne.n	8009e4c <__ieee754_sqrt+0x108>
 8009e26:	428f      	cmp	r7, r1
 8009e28:	d810      	bhi.n	8009e4c <__ieee754_sqrt+0x108>
 8009e2a:	2f00      	cmp	r7, #0
 8009e2c:	eb07 0c06 	add.w	ip, r7, r6
 8009e30:	da34      	bge.n	8009e9c <__ieee754_sqrt+0x158>
 8009e32:	f1bc 0f00 	cmp.w	ip, #0
 8009e36:	db31      	blt.n	8009e9c <__ieee754_sqrt+0x158>
 8009e38:	f104 0801 	add.w	r8, r4, #1
 8009e3c:	1b12      	subs	r2, r2, r4
 8009e3e:	428f      	cmp	r7, r1
 8009e40:	bf88      	it	hi
 8009e42:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009e46:	1bc9      	subs	r1, r1, r7
 8009e48:	4433      	add	r3, r6
 8009e4a:	4644      	mov	r4, r8
 8009e4c:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8009e50:	f1be 0e01 	subs.w	lr, lr, #1
 8009e54:	443a      	add	r2, r7
 8009e56:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009e5a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009e5e:	d1dd      	bne.n	8009e1c <__ieee754_sqrt+0xd8>
 8009e60:	430a      	orrs	r2, r1
 8009e62:	d006      	beq.n	8009e72 <__ieee754_sqrt+0x12e>
 8009e64:	1c5c      	adds	r4, r3, #1
 8009e66:	bf13      	iteet	ne
 8009e68:	3301      	addne	r3, #1
 8009e6a:	3501      	addeq	r5, #1
 8009e6c:	4673      	moveq	r3, lr
 8009e6e:	f023 0301 	bicne.w	r3, r3, #1
 8009e72:	106a      	asrs	r2, r5, #1
 8009e74:	085b      	lsrs	r3, r3, #1
 8009e76:	07e9      	lsls	r1, r5, #31
 8009e78:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009e7c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009e80:	bf48      	it	mi
 8009e82:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009e86:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009e8a:	461c      	mov	r4, r3
 8009e8c:	e776      	b.n	8009d7c <__ieee754_sqrt+0x38>
 8009e8e:	0aca      	lsrs	r2, r1, #11
 8009e90:	3b15      	subs	r3, #21
 8009e92:	0549      	lsls	r1, r1, #21
 8009e94:	e78b      	b.n	8009dae <__ieee754_sqrt+0x6a>
 8009e96:	0052      	lsls	r2, r2, #1
 8009e98:	3001      	adds	r0, #1
 8009e9a:	e78b      	b.n	8009db4 <__ieee754_sqrt+0x70>
 8009e9c:	46a0      	mov	r8, r4
 8009e9e:	e7cd      	b.n	8009e3c <__ieee754_sqrt+0xf8>
 8009ea0:	7ff00000 	.word	0x7ff00000
 8009ea4:	00000000 	.word	0x00000000

08009ea8 <__kernel_cos>:
 8009ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eac:	ec59 8b10 	vmov	r8, r9, d0
 8009eb0:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 8009eb4:	b085      	sub	sp, #20
 8009eb6:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8009eba:	ed8d 1b00 	vstr	d1, [sp]
 8009ebe:	da07      	bge.n	8009ed0 <__kernel_cos+0x28>
 8009ec0:	ee10 0a10 	vmov	r0, s0
 8009ec4:	4649      	mov	r1, r9
 8009ec6:	f7f6 fdef 	bl	8000aa8 <__aeabi_d2iz>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	f000 80aa 	beq.w	800a024 <__kernel_cos+0x17c>
 8009ed0:	4642      	mov	r2, r8
 8009ed2:	464b      	mov	r3, r9
 8009ed4:	4640      	mov	r0, r8
 8009ed6:	4649      	mov	r1, r9
 8009ed8:	f7f6 fb36 	bl	8000548 <__aeabi_dmul>
 8009edc:	a359      	add	r3, pc, #356	; (adr r3, 800a044 <__kernel_cos+0x19c>)
 8009ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	460d      	mov	r5, r1
 8009ee6:	f7f6 fb2f 	bl	8000548 <__aeabi_dmul>
 8009eea:	a358      	add	r3, pc, #352	; (adr r3, 800a04c <__kernel_cos+0x1a4>)
 8009eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef0:	f7f6 f978 	bl	80001e4 <__adddf3>
 8009ef4:	4622      	mov	r2, r4
 8009ef6:	462b      	mov	r3, r5
 8009ef8:	f7f6 fb26 	bl	8000548 <__aeabi_dmul>
 8009efc:	a355      	add	r3, pc, #340	; (adr r3, 800a054 <__kernel_cos+0x1ac>)
 8009efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f02:	f7f6 f96d 	bl	80001e0 <__aeabi_dsub>
 8009f06:	4622      	mov	r2, r4
 8009f08:	462b      	mov	r3, r5
 8009f0a:	f7f6 fb1d 	bl	8000548 <__aeabi_dmul>
 8009f0e:	a353      	add	r3, pc, #332	; (adr r3, 800a05c <__kernel_cos+0x1b4>)
 8009f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f14:	f7f6 f966 	bl	80001e4 <__adddf3>
 8009f18:	4622      	mov	r2, r4
 8009f1a:	462b      	mov	r3, r5
 8009f1c:	f7f6 fb14 	bl	8000548 <__aeabi_dmul>
 8009f20:	a350      	add	r3, pc, #320	; (adr r3, 800a064 <__kernel_cos+0x1bc>)
 8009f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f26:	f7f6 f95b 	bl	80001e0 <__aeabi_dsub>
 8009f2a:	4622      	mov	r2, r4
 8009f2c:	462b      	mov	r3, r5
 8009f2e:	f7f6 fb0b 	bl	8000548 <__aeabi_dmul>
 8009f32:	a34e      	add	r3, pc, #312	; (adr r3, 800a06c <__kernel_cos+0x1c4>)
 8009f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f38:	f7f6 f954 	bl	80001e4 <__adddf3>
 8009f3c:	462b      	mov	r3, r5
 8009f3e:	4622      	mov	r2, r4
 8009f40:	f7f6 fb02 	bl	8000548 <__aeabi_dmul>
 8009f44:	4b3a      	ldr	r3, [pc, #232]	; (800a030 <__kernel_cos+0x188>)
 8009f46:	429f      	cmp	r7, r3
 8009f48:	4682      	mov	sl, r0
 8009f4a:	468b      	mov	fp, r1
 8009f4c:	dc2c      	bgt.n	8009fa8 <__kernel_cos+0x100>
 8009f4e:	2200      	movs	r2, #0
 8009f50:	4b38      	ldr	r3, [pc, #224]	; (800a034 <__kernel_cos+0x18c>)
 8009f52:	4620      	mov	r0, r4
 8009f54:	4629      	mov	r1, r5
 8009f56:	f7f6 faf7 	bl	8000548 <__aeabi_dmul>
 8009f5a:	4652      	mov	r2, sl
 8009f5c:	4606      	mov	r6, r0
 8009f5e:	460f      	mov	r7, r1
 8009f60:	465b      	mov	r3, fp
 8009f62:	4620      	mov	r0, r4
 8009f64:	4629      	mov	r1, r5
 8009f66:	f7f6 faef 	bl	8000548 <__aeabi_dmul>
 8009f6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f6e:	4604      	mov	r4, r0
 8009f70:	460d      	mov	r5, r1
 8009f72:	4640      	mov	r0, r8
 8009f74:	4649      	mov	r1, r9
 8009f76:	f7f6 fae7 	bl	8000548 <__aeabi_dmul>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	4620      	mov	r0, r4
 8009f80:	4629      	mov	r1, r5
 8009f82:	f7f6 f92d 	bl	80001e0 <__aeabi_dsub>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	4639      	mov	r1, r7
 8009f8e:	f7f6 f927 	bl	80001e0 <__aeabi_dsub>
 8009f92:	460b      	mov	r3, r1
 8009f94:	4928      	ldr	r1, [pc, #160]	; (800a038 <__kernel_cos+0x190>)
 8009f96:	4602      	mov	r2, r0
 8009f98:	2000      	movs	r0, #0
 8009f9a:	f7f6 f921 	bl	80001e0 <__aeabi_dsub>
 8009f9e:	ec41 0b10 	vmov	d0, r0, r1
 8009fa2:	b005      	add	sp, #20
 8009fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa8:	4b24      	ldr	r3, [pc, #144]	; (800a03c <__kernel_cos+0x194>)
 8009faa:	4923      	ldr	r1, [pc, #140]	; (800a038 <__kernel_cos+0x190>)
 8009fac:	429f      	cmp	r7, r3
 8009fae:	bfd7      	itett	le
 8009fb0:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8009fb4:	4f22      	ldrgt	r7, [pc, #136]	; (800a040 <__kernel_cos+0x198>)
 8009fb6:	2200      	movle	r2, #0
 8009fb8:	4616      	movle	r6, r2
 8009fba:	bfd4      	ite	le
 8009fbc:	461f      	movle	r7, r3
 8009fbe:	2600      	movgt	r6, #0
 8009fc0:	4632      	mov	r2, r6
 8009fc2:	463b      	mov	r3, r7
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	f7f6 f90b 	bl	80001e0 <__aeabi_dsub>
 8009fca:	2200      	movs	r2, #0
 8009fcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fd0:	4b18      	ldr	r3, [pc, #96]	; (800a034 <__kernel_cos+0x18c>)
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	4629      	mov	r1, r5
 8009fd6:	f7f6 fab7 	bl	8000548 <__aeabi_dmul>
 8009fda:	4632      	mov	r2, r6
 8009fdc:	463b      	mov	r3, r7
 8009fde:	f7f6 f8ff 	bl	80001e0 <__aeabi_dsub>
 8009fe2:	4652      	mov	r2, sl
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	460f      	mov	r7, r1
 8009fe8:	465b      	mov	r3, fp
 8009fea:	4620      	mov	r0, r4
 8009fec:	4629      	mov	r1, r5
 8009fee:	f7f6 faab 	bl	8000548 <__aeabi_dmul>
 8009ff2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	460d      	mov	r5, r1
 8009ffa:	4640      	mov	r0, r8
 8009ffc:	4649      	mov	r1, r9
 8009ffe:	f7f6 faa3 	bl	8000548 <__aeabi_dmul>
 800a002:	4602      	mov	r2, r0
 800a004:	460b      	mov	r3, r1
 800a006:	4620      	mov	r0, r4
 800a008:	4629      	mov	r1, r5
 800a00a:	f7f6 f8e9 	bl	80001e0 <__aeabi_dsub>
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	4630      	mov	r0, r6
 800a014:	4639      	mov	r1, r7
 800a016:	f7f6 f8e3 	bl	80001e0 <__aeabi_dsub>
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a022:	e7ba      	b.n	8009f9a <__kernel_cos+0xf2>
 800a024:	2000      	movs	r0, #0
 800a026:	4904      	ldr	r1, [pc, #16]	; (800a038 <__kernel_cos+0x190>)
 800a028:	e7b9      	b.n	8009f9e <__kernel_cos+0xf6>
 800a02a:	bf00      	nop
 800a02c:	f3af 8000 	nop.w
 800a030:	3fd33332 	.word	0x3fd33332
 800a034:	3fe00000 	.word	0x3fe00000
 800a038:	3ff00000 	.word	0x3ff00000
 800a03c:	3fe90000 	.word	0x3fe90000
 800a040:	3fd20000 	.word	0x3fd20000
 800a044:	be8838d4 	.word	0xbe8838d4
 800a048:	bda8fae9 	.word	0xbda8fae9
 800a04c:	bdb4b1c4 	.word	0xbdb4b1c4
 800a050:	3e21ee9e 	.word	0x3e21ee9e
 800a054:	809c52ad 	.word	0x809c52ad
 800a058:	3e927e4f 	.word	0x3e927e4f
 800a05c:	19cb1590 	.word	0x19cb1590
 800a060:	3efa01a0 	.word	0x3efa01a0
 800a064:	16c15177 	.word	0x16c15177
 800a068:	3f56c16c 	.word	0x3f56c16c
 800a06c:	5555554c 	.word	0x5555554c
 800a070:	3fa55555 	.word	0x3fa55555
 800a074:	00000000 	.word	0x00000000

0800a078 <__kernel_rem_pio2>:
 800a078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a07c:	ed2d 8b02 	vpush	{d8}
 800a080:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a084:	1ed4      	subs	r4, r2, #3
 800a086:	9306      	str	r3, [sp, #24]
 800a088:	9102      	str	r1, [sp, #8]
 800a08a:	4bc3      	ldr	r3, [pc, #780]	; (800a398 <__kernel_rem_pio2+0x320>)
 800a08c:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800a08e:	9009      	str	r0, [sp, #36]	; 0x24
 800a090:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	9b06      	ldr	r3, [sp, #24]
 800a098:	3b01      	subs	r3, #1
 800a09a:	9304      	str	r3, [sp, #16]
 800a09c:	2318      	movs	r3, #24
 800a09e:	fb94 f4f3 	sdiv	r4, r4, r3
 800a0a2:	f06f 0317 	mvn.w	r3, #23
 800a0a6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800a0aa:	fb04 3303 	mla	r3, r4, r3, r3
 800a0ae:	eb03 0a02 	add.w	sl, r3, r2
 800a0b2:	9b00      	ldr	r3, [sp, #0]
 800a0b4:	9a04      	ldr	r2, [sp, #16]
 800a0b6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a388 <__kernel_rem_pio2+0x310>
 800a0ba:	eb03 0802 	add.w	r8, r3, r2
 800a0be:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a0c0:	1aa7      	subs	r7, r4, r2
 800a0c2:	ae20      	add	r6, sp, #128	; 0x80
 800a0c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a0c8:	2500      	movs	r5, #0
 800a0ca:	4545      	cmp	r5, r8
 800a0cc:	dd13      	ble.n	800a0f6 <__kernel_rem_pio2+0x7e>
 800a0ce:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800a388 <__kernel_rem_pio2+0x310>
 800a0d2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800a0d6:	2600      	movs	r6, #0
 800a0d8:	9b00      	ldr	r3, [sp, #0]
 800a0da:	429e      	cmp	r6, r3
 800a0dc:	dc32      	bgt.n	800a144 <__kernel_rem_pio2+0xcc>
 800a0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e0:	9303      	str	r3, [sp, #12]
 800a0e2:	9b06      	ldr	r3, [sp, #24]
 800a0e4:	199d      	adds	r5, r3, r6
 800a0e6:	ab20      	add	r3, sp, #128	; 0x80
 800a0e8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a0ec:	9308      	str	r3, [sp, #32]
 800a0ee:	ec59 8b18 	vmov	r8, r9, d8
 800a0f2:	2700      	movs	r7, #0
 800a0f4:	e01f      	b.n	800a136 <__kernel_rem_pio2+0xbe>
 800a0f6:	42ef      	cmn	r7, r5
 800a0f8:	d407      	bmi.n	800a10a <__kernel_rem_pio2+0x92>
 800a0fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a0fe:	f7f6 f9bd 	bl	800047c <__aeabi_i2d>
 800a102:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a106:	3501      	adds	r5, #1
 800a108:	e7df      	b.n	800a0ca <__kernel_rem_pio2+0x52>
 800a10a:	ec51 0b18 	vmov	r0, r1, d8
 800a10e:	e7f8      	b.n	800a102 <__kernel_rem_pio2+0x8a>
 800a110:	9908      	ldr	r1, [sp, #32]
 800a112:	9d03      	ldr	r5, [sp, #12]
 800a114:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a118:	9108      	str	r1, [sp, #32]
 800a11a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800a11e:	9503      	str	r5, [sp, #12]
 800a120:	f7f6 fa12 	bl	8000548 <__aeabi_dmul>
 800a124:	4602      	mov	r2, r0
 800a126:	460b      	mov	r3, r1
 800a128:	4640      	mov	r0, r8
 800a12a:	4649      	mov	r1, r9
 800a12c:	f7f6 f85a 	bl	80001e4 <__adddf3>
 800a130:	3701      	adds	r7, #1
 800a132:	4680      	mov	r8, r0
 800a134:	4689      	mov	r9, r1
 800a136:	9b04      	ldr	r3, [sp, #16]
 800a138:	429f      	cmp	r7, r3
 800a13a:	dde9      	ble.n	800a110 <__kernel_rem_pio2+0x98>
 800a13c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800a140:	3601      	adds	r6, #1
 800a142:	e7c9      	b.n	800a0d8 <__kernel_rem_pio2+0x60>
 800a144:	9b00      	ldr	r3, [sp, #0]
 800a146:	9f00      	ldr	r7, [sp, #0]
 800a148:	aa0c      	add	r2, sp, #48	; 0x30
 800a14a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a14e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a150:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a152:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a156:	930a      	str	r3, [sp, #40]	; 0x28
 800a158:	ab98      	add	r3, sp, #608	; 0x260
 800a15a:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800a15e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a162:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a166:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800a16a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a16e:	9308      	str	r3, [sp, #32]
 800a170:	9a08      	ldr	r2, [sp, #32]
 800a172:	ab98      	add	r3, sp, #608	; 0x260
 800a174:	4413      	add	r3, r2
 800a176:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 800a17a:	2600      	movs	r6, #0
 800a17c:	1bbb      	subs	r3, r7, r6
 800a17e:	2b00      	cmp	r3, #0
 800a180:	dc77      	bgt.n	800a272 <__kernel_rem_pio2+0x1fa>
 800a182:	ec49 8b10 	vmov	d0, r8, r9
 800a186:	4650      	mov	r0, sl
 800a188:	f000 fc12 	bl	800a9b0 <scalbn>
 800a18c:	ec55 4b10 	vmov	r4, r5, d0
 800a190:	2200      	movs	r2, #0
 800a192:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a196:	ee10 0a10 	vmov	r0, s0
 800a19a:	4629      	mov	r1, r5
 800a19c:	f7f6 f9d4 	bl	8000548 <__aeabi_dmul>
 800a1a0:	ec41 0b10 	vmov	d0, r0, r1
 800a1a4:	f000 fb7c 	bl	800a8a0 <floor>
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	ec51 0b10 	vmov	r0, r1, d0
 800a1ae:	4b7b      	ldr	r3, [pc, #492]	; (800a39c <__kernel_rem_pio2+0x324>)
 800a1b0:	f7f6 f9ca 	bl	8000548 <__aeabi_dmul>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	4629      	mov	r1, r5
 800a1bc:	f7f6 f810 	bl	80001e0 <__aeabi_dsub>
 800a1c0:	460d      	mov	r5, r1
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	f7f6 fc70 	bl	8000aa8 <__aeabi_d2iz>
 800a1c8:	9003      	str	r0, [sp, #12]
 800a1ca:	f7f6 f957 	bl	800047c <__aeabi_i2d>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	4629      	mov	r1, r5
 800a1d6:	f7f6 f803 	bl	80001e0 <__aeabi_dsub>
 800a1da:	f1ba 0f00 	cmp.w	sl, #0
 800a1de:	4680      	mov	r8, r0
 800a1e0:	4689      	mov	r9, r1
 800a1e2:	dd6b      	ble.n	800a2bc <__kernel_rem_pio2+0x244>
 800a1e4:	1e7a      	subs	r2, r7, #1
 800a1e6:	ab0c      	add	r3, sp, #48	; 0x30
 800a1e8:	f1ca 0118 	rsb	r1, sl, #24
 800a1ec:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a1f0:	9c03      	ldr	r4, [sp, #12]
 800a1f2:	fa40 f301 	asr.w	r3, r0, r1
 800a1f6:	441c      	add	r4, r3
 800a1f8:	408b      	lsls	r3, r1
 800a1fa:	1ac0      	subs	r0, r0, r3
 800a1fc:	ab0c      	add	r3, sp, #48	; 0x30
 800a1fe:	9403      	str	r4, [sp, #12]
 800a200:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a204:	f1ca 0317 	rsb	r3, sl, #23
 800a208:	fa40 fb03 	asr.w	fp, r0, r3
 800a20c:	f1bb 0f00 	cmp.w	fp, #0
 800a210:	dd62      	ble.n	800a2d8 <__kernel_rem_pio2+0x260>
 800a212:	9b03      	ldr	r3, [sp, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	3301      	adds	r3, #1
 800a218:	9303      	str	r3, [sp, #12]
 800a21a:	4614      	mov	r4, r2
 800a21c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a220:	4297      	cmp	r7, r2
 800a222:	f300 8089 	bgt.w	800a338 <__kernel_rem_pio2+0x2c0>
 800a226:	f1ba 0f00 	cmp.w	sl, #0
 800a22a:	dd07      	ble.n	800a23c <__kernel_rem_pio2+0x1c4>
 800a22c:	f1ba 0f01 	cmp.w	sl, #1
 800a230:	f000 8096 	beq.w	800a360 <__kernel_rem_pio2+0x2e8>
 800a234:	f1ba 0f02 	cmp.w	sl, #2
 800a238:	f000 809c 	beq.w	800a374 <__kernel_rem_pio2+0x2fc>
 800a23c:	f1bb 0f02 	cmp.w	fp, #2
 800a240:	d14a      	bne.n	800a2d8 <__kernel_rem_pio2+0x260>
 800a242:	4642      	mov	r2, r8
 800a244:	464b      	mov	r3, r9
 800a246:	2000      	movs	r0, #0
 800a248:	4955      	ldr	r1, [pc, #340]	; (800a3a0 <__kernel_rem_pio2+0x328>)
 800a24a:	f7f5 ffc9 	bl	80001e0 <__aeabi_dsub>
 800a24e:	4680      	mov	r8, r0
 800a250:	4689      	mov	r9, r1
 800a252:	2c00      	cmp	r4, #0
 800a254:	d040      	beq.n	800a2d8 <__kernel_rem_pio2+0x260>
 800a256:	4650      	mov	r0, sl
 800a258:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a390 <__kernel_rem_pio2+0x318>
 800a25c:	f000 fba8 	bl	800a9b0 <scalbn>
 800a260:	4640      	mov	r0, r8
 800a262:	4649      	mov	r1, r9
 800a264:	ec53 2b10 	vmov	r2, r3, d0
 800a268:	f7f5 ffba 	bl	80001e0 <__aeabi_dsub>
 800a26c:	4680      	mov	r8, r0
 800a26e:	4689      	mov	r9, r1
 800a270:	e032      	b.n	800a2d8 <__kernel_rem_pio2+0x260>
 800a272:	2200      	movs	r2, #0
 800a274:	4b4b      	ldr	r3, [pc, #300]	; (800a3a4 <__kernel_rem_pio2+0x32c>)
 800a276:	4640      	mov	r0, r8
 800a278:	4649      	mov	r1, r9
 800a27a:	f7f6 f965 	bl	8000548 <__aeabi_dmul>
 800a27e:	f7f6 fc13 	bl	8000aa8 <__aeabi_d2iz>
 800a282:	f7f6 f8fb 	bl	800047c <__aeabi_i2d>
 800a286:	2200      	movs	r2, #0
 800a288:	4b47      	ldr	r3, [pc, #284]	; (800a3a8 <__kernel_rem_pio2+0x330>)
 800a28a:	4604      	mov	r4, r0
 800a28c:	460d      	mov	r5, r1
 800a28e:	f7f6 f95b 	bl	8000548 <__aeabi_dmul>
 800a292:	4602      	mov	r2, r0
 800a294:	460b      	mov	r3, r1
 800a296:	4640      	mov	r0, r8
 800a298:	4649      	mov	r1, r9
 800a29a:	f7f5 ffa1 	bl	80001e0 <__aeabi_dsub>
 800a29e:	f7f6 fc03 	bl	8000aa8 <__aeabi_d2iz>
 800a2a2:	ab0c      	add	r3, sp, #48	; 0x30
 800a2a4:	4629      	mov	r1, r5
 800a2a6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800a2aa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	f7f5 ff98 	bl	80001e4 <__adddf3>
 800a2b4:	3601      	adds	r6, #1
 800a2b6:	4680      	mov	r8, r0
 800a2b8:	4689      	mov	r9, r1
 800a2ba:	e75f      	b.n	800a17c <__kernel_rem_pio2+0x104>
 800a2bc:	d106      	bne.n	800a2cc <__kernel_rem_pio2+0x254>
 800a2be:	1e7b      	subs	r3, r7, #1
 800a2c0:	aa0c      	add	r2, sp, #48	; 0x30
 800a2c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a2c6:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a2ca:	e79f      	b.n	800a20c <__kernel_rem_pio2+0x194>
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	4b37      	ldr	r3, [pc, #220]	; (800a3ac <__kernel_rem_pio2+0x334>)
 800a2d0:	f7f6 fbc0 	bl	8000a54 <__aeabi_dcmpge>
 800a2d4:	bb68      	cbnz	r0, 800a332 <__kernel_rem_pio2+0x2ba>
 800a2d6:	4683      	mov	fp, r0
 800a2d8:	2200      	movs	r2, #0
 800a2da:	2300      	movs	r3, #0
 800a2dc:	4640      	mov	r0, r8
 800a2de:	4649      	mov	r1, r9
 800a2e0:	f7f6 fb9a 	bl	8000a18 <__aeabi_dcmpeq>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	f000 80c1 	beq.w	800a46c <__kernel_rem_pio2+0x3f4>
 800a2ea:	1e7c      	subs	r4, r7, #1
 800a2ec:	4623      	mov	r3, r4
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	9900      	ldr	r1, [sp, #0]
 800a2f2:	428b      	cmp	r3, r1
 800a2f4:	da5c      	bge.n	800a3b0 <__kernel_rem_pio2+0x338>
 800a2f6:	2a00      	cmp	r2, #0
 800a2f8:	f040 808b 	bne.w	800a412 <__kernel_rem_pio2+0x39a>
 800a2fc:	2401      	movs	r4, #1
 800a2fe:	f06f 0203 	mvn.w	r2, #3
 800a302:	fb02 f304 	mul.w	r3, r2, r4
 800a306:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a308:	58cb      	ldr	r3, [r1, r3]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d056      	beq.n	800a3bc <__kernel_rem_pio2+0x344>
 800a30e:	9b08      	ldr	r3, [sp, #32]
 800a310:	aa98      	add	r2, sp, #608	; 0x260
 800a312:	4413      	add	r3, r2
 800a314:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 800a318:	9b06      	ldr	r3, [sp, #24]
 800a31a:	19dd      	adds	r5, r3, r7
 800a31c:	ab20      	add	r3, sp, #128	; 0x80
 800a31e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a322:	19e3      	adds	r3, r4, r7
 800a324:	1c7e      	adds	r6, r7, #1
 800a326:	9303      	str	r3, [sp, #12]
 800a328:	9b03      	ldr	r3, [sp, #12]
 800a32a:	429e      	cmp	r6, r3
 800a32c:	dd48      	ble.n	800a3c0 <__kernel_rem_pio2+0x348>
 800a32e:	461f      	mov	r7, r3
 800a330:	e712      	b.n	800a158 <__kernel_rem_pio2+0xe0>
 800a332:	f04f 0b02 	mov.w	fp, #2
 800a336:	e76c      	b.n	800a212 <__kernel_rem_pio2+0x19a>
 800a338:	ab0c      	add	r3, sp, #48	; 0x30
 800a33a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a33e:	b94c      	cbnz	r4, 800a354 <__kernel_rem_pio2+0x2dc>
 800a340:	b12b      	cbz	r3, 800a34e <__kernel_rem_pio2+0x2d6>
 800a342:	a80c      	add	r0, sp, #48	; 0x30
 800a344:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a348:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a34c:	2301      	movs	r3, #1
 800a34e:	3201      	adds	r2, #1
 800a350:	461c      	mov	r4, r3
 800a352:	e765      	b.n	800a220 <__kernel_rem_pio2+0x1a8>
 800a354:	a80c      	add	r0, sp, #48	; 0x30
 800a356:	1acb      	subs	r3, r1, r3
 800a358:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800a35c:	4623      	mov	r3, r4
 800a35e:	e7f6      	b.n	800a34e <__kernel_rem_pio2+0x2d6>
 800a360:	1e7a      	subs	r2, r7, #1
 800a362:	ab0c      	add	r3, sp, #48	; 0x30
 800a364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a368:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a36c:	a90c      	add	r1, sp, #48	; 0x30
 800a36e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a372:	e763      	b.n	800a23c <__kernel_rem_pio2+0x1c4>
 800a374:	1e7a      	subs	r2, r7, #1
 800a376:	ab0c      	add	r3, sp, #48	; 0x30
 800a378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a37c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a380:	e7f4      	b.n	800a36c <__kernel_rem_pio2+0x2f4>
 800a382:	bf00      	nop
 800a384:	f3af 8000 	nop.w
	...
 800a394:	3ff00000 	.word	0x3ff00000
 800a398:	0800b318 	.word	0x0800b318
 800a39c:	40200000 	.word	0x40200000
 800a3a0:	3ff00000 	.word	0x3ff00000
 800a3a4:	3e700000 	.word	0x3e700000
 800a3a8:	41700000 	.word	0x41700000
 800a3ac:	3fe00000 	.word	0x3fe00000
 800a3b0:	a90c      	add	r1, sp, #48	; 0x30
 800a3b2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	430a      	orrs	r2, r1
 800a3ba:	e799      	b.n	800a2f0 <__kernel_rem_pio2+0x278>
 800a3bc:	3401      	adds	r4, #1
 800a3be:	e7a0      	b.n	800a302 <__kernel_rem_pio2+0x28a>
 800a3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3c2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a3c6:	f7f6 f859 	bl	800047c <__aeabi_i2d>
 800a3ca:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a3ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3d0:	9508      	str	r5, [sp, #32]
 800a3d2:	461c      	mov	r4, r3
 800a3d4:	2700      	movs	r7, #0
 800a3d6:	f04f 0800 	mov.w	r8, #0
 800a3da:	f04f 0900 	mov.w	r9, #0
 800a3de:	9b04      	ldr	r3, [sp, #16]
 800a3e0:	429f      	cmp	r7, r3
 800a3e2:	dd03      	ble.n	800a3ec <__kernel_rem_pio2+0x374>
 800a3e4:	e8eb 8902 	strd	r8, r9, [fp], #8
 800a3e8:	3601      	adds	r6, #1
 800a3ea:	e79d      	b.n	800a328 <__kernel_rem_pio2+0x2b0>
 800a3ec:	9908      	ldr	r1, [sp, #32]
 800a3ee:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a3f2:	9108      	str	r1, [sp, #32]
 800a3f4:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a3f8:	f7f6 f8a6 	bl	8000548 <__aeabi_dmul>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	460b      	mov	r3, r1
 800a400:	4640      	mov	r0, r8
 800a402:	4649      	mov	r1, r9
 800a404:	f7f5 feee 	bl	80001e4 <__adddf3>
 800a408:	3701      	adds	r7, #1
 800a40a:	4680      	mov	r8, r0
 800a40c:	4689      	mov	r9, r1
 800a40e:	e7e6      	b.n	800a3de <__kernel_rem_pio2+0x366>
 800a410:	3c01      	subs	r4, #1
 800a412:	ab0c      	add	r3, sp, #48	; 0x30
 800a414:	f1aa 0a18 	sub.w	sl, sl, #24
 800a418:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d0f7      	beq.n	800a410 <__kernel_rem_pio2+0x398>
 800a420:	4650      	mov	r0, sl
 800a422:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 800a6f8 <__kernel_rem_pio2+0x680>
 800a426:	f000 fac3 	bl	800a9b0 <scalbn>
 800a42a:	00e5      	lsls	r5, r4, #3
 800a42c:	ab98      	add	r3, sp, #608	; 0x260
 800a42e:	eb03 0905 	add.w	r9, r3, r5
 800a432:	ec57 6b10 	vmov	r6, r7, d0
 800a436:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 800a43a:	46a0      	mov	r8, r4
 800a43c:	f1b8 0f00 	cmp.w	r8, #0
 800a440:	da4d      	bge.n	800a4de <__kernel_rem_pio2+0x466>
 800a442:	ed9f 8baf 	vldr	d8, [pc, #700]	; 800a700 <__kernel_rem_pio2+0x688>
 800a446:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 800a44a:	2300      	movs	r3, #0
 800a44c:	9304      	str	r3, [sp, #16]
 800a44e:	4657      	mov	r7, sl
 800a450:	9b04      	ldr	r3, [sp, #16]
 800a452:	ebb4 0903 	subs.w	r9, r4, r3
 800a456:	d476      	bmi.n	800a546 <__kernel_rem_pio2+0x4ce>
 800a458:	4bab      	ldr	r3, [pc, #684]	; (800a708 <__kernel_rem_pio2+0x690>)
 800a45a:	461e      	mov	r6, r3
 800a45c:	ab70      	add	r3, sp, #448	; 0x1c0
 800a45e:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a462:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a466:	f04f 0800 	mov.w	r8, #0
 800a46a:	e05e      	b.n	800a52a <__kernel_rem_pio2+0x4b2>
 800a46c:	f1ca 0000 	rsb	r0, sl, #0
 800a470:	ec49 8b10 	vmov	d0, r8, r9
 800a474:	f000 fa9c 	bl	800a9b0 <scalbn>
 800a478:	ec55 4b10 	vmov	r4, r5, d0
 800a47c:	2200      	movs	r2, #0
 800a47e:	4ba3      	ldr	r3, [pc, #652]	; (800a70c <__kernel_rem_pio2+0x694>)
 800a480:	ee10 0a10 	vmov	r0, s0
 800a484:	4629      	mov	r1, r5
 800a486:	f7f6 fae5 	bl	8000a54 <__aeabi_dcmpge>
 800a48a:	b1f8      	cbz	r0, 800a4cc <__kernel_rem_pio2+0x454>
 800a48c:	2200      	movs	r2, #0
 800a48e:	4ba0      	ldr	r3, [pc, #640]	; (800a710 <__kernel_rem_pio2+0x698>)
 800a490:	4620      	mov	r0, r4
 800a492:	4629      	mov	r1, r5
 800a494:	f7f6 f858 	bl	8000548 <__aeabi_dmul>
 800a498:	f7f6 fb06 	bl	8000aa8 <__aeabi_d2iz>
 800a49c:	4606      	mov	r6, r0
 800a49e:	f7f5 ffed 	bl	800047c <__aeabi_i2d>
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	4b99      	ldr	r3, [pc, #612]	; (800a70c <__kernel_rem_pio2+0x694>)
 800a4a6:	f7f6 f84f 	bl	8000548 <__aeabi_dmul>
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	4629      	mov	r1, r5
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	f7f5 fe95 	bl	80001e0 <__aeabi_dsub>
 800a4b6:	f7f6 faf7 	bl	8000aa8 <__aeabi_d2iz>
 800a4ba:	1c7c      	adds	r4, r7, #1
 800a4bc:	ab0c      	add	r3, sp, #48	; 0x30
 800a4be:	f10a 0a18 	add.w	sl, sl, #24
 800a4c2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800a4c6:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800a4ca:	e7a9      	b.n	800a420 <__kernel_rem_pio2+0x3a8>
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	4629      	mov	r1, r5
 800a4d0:	f7f6 faea 	bl	8000aa8 <__aeabi_d2iz>
 800a4d4:	ab0c      	add	r3, sp, #48	; 0x30
 800a4d6:	463c      	mov	r4, r7
 800a4d8:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800a4dc:	e7a0      	b.n	800a420 <__kernel_rem_pio2+0x3a8>
 800a4de:	ab0c      	add	r3, sp, #48	; 0x30
 800a4e0:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a4e4:	f7f5 ffca 	bl	800047c <__aeabi_i2d>
 800a4e8:	4632      	mov	r2, r6
 800a4ea:	463b      	mov	r3, r7
 800a4ec:	f7f6 f82c 	bl	8000548 <__aeabi_dmul>
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	e969 0102 	strd	r0, r1, [r9, #-8]!
 800a4f6:	4b86      	ldr	r3, [pc, #536]	; (800a710 <__kernel_rem_pio2+0x698>)
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	4639      	mov	r1, r7
 800a4fc:	f7f6 f824 	bl	8000548 <__aeabi_dmul>
 800a500:	f108 38ff 	add.w	r8, r8, #4294967295
 800a504:	4606      	mov	r6, r0
 800a506:	460f      	mov	r7, r1
 800a508:	e798      	b.n	800a43c <__kernel_rem_pio2+0x3c4>
 800a50a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a50e:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800a512:	f7f6 f819 	bl	8000548 <__aeabi_dmul>
 800a516:	4602      	mov	r2, r0
 800a518:	460b      	mov	r3, r1
 800a51a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a51e:	f7f5 fe61 	bl	80001e4 <__adddf3>
 800a522:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a526:	f108 0801 	add.w	r8, r8, #1
 800a52a:	9b00      	ldr	r3, [sp, #0]
 800a52c:	4598      	cmp	r8, r3
 800a52e:	dc02      	bgt.n	800a536 <__kernel_rem_pio2+0x4be>
 800a530:	9b04      	ldr	r3, [sp, #16]
 800a532:	4598      	cmp	r8, r3
 800a534:	dde9      	ble.n	800a50a <__kernel_rem_pio2+0x492>
 800a536:	9b04      	ldr	r3, [sp, #16]
 800a538:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a53c:	3301      	adds	r3, #1
 800a53e:	ecaa 7b02 	vstmia	sl!, {d7}
 800a542:	9304      	str	r3, [sp, #16]
 800a544:	e784      	b.n	800a450 <__kernel_rem_pio2+0x3d8>
 800a546:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a548:	2b03      	cmp	r3, #3
 800a54a:	d85d      	bhi.n	800a608 <__kernel_rem_pio2+0x590>
 800a54c:	e8df f003 	tbb	[pc, r3]
 800a550:	0226264b 	.word	0x0226264b
 800a554:	ab98      	add	r3, sp, #608	; 0x260
 800a556:	441d      	add	r5, r3
 800a558:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 800a55c:	462e      	mov	r6, r5
 800a55e:	46a2      	mov	sl, r4
 800a560:	f1ba 0f00 	cmp.w	sl, #0
 800a564:	dc6e      	bgt.n	800a644 <__kernel_rem_pio2+0x5cc>
 800a566:	462e      	mov	r6, r5
 800a568:	46a2      	mov	sl, r4
 800a56a:	f1ba 0f01 	cmp.w	sl, #1
 800a56e:	f300 808a 	bgt.w	800a686 <__kernel_rem_pio2+0x60e>
 800a572:	2000      	movs	r0, #0
 800a574:	2100      	movs	r1, #0
 800a576:	2c01      	cmp	r4, #1
 800a578:	f300 80a6 	bgt.w	800a6c8 <__kernel_rem_pio2+0x650>
 800a57c:	f1bb 0f00 	cmp.w	fp, #0
 800a580:	f040 80a8 	bne.w	800a6d4 <__kernel_rem_pio2+0x65c>
 800a584:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 800a588:	9c02      	ldr	r4, [sp, #8]
 800a58a:	e9c4 2300 	strd	r2, r3, [r4]
 800a58e:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 800a592:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800a596:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a59a:	e035      	b.n	800a608 <__kernel_rem_pio2+0x590>
 800a59c:	3508      	adds	r5, #8
 800a59e:	ab48      	add	r3, sp, #288	; 0x120
 800a5a0:	441d      	add	r5, r3
 800a5a2:	4626      	mov	r6, r4
 800a5a4:	2000      	movs	r0, #0
 800a5a6:	2100      	movs	r1, #0
 800a5a8:	2e00      	cmp	r6, #0
 800a5aa:	da3c      	bge.n	800a626 <__kernel_rem_pio2+0x5ae>
 800a5ac:	f1bb 0f00 	cmp.w	fp, #0
 800a5b0:	d03f      	beq.n	800a632 <__kernel_rem_pio2+0x5ba>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5b8:	9d02      	ldr	r5, [sp, #8]
 800a5ba:	e9c5 2300 	strd	r2, r3, [r5]
 800a5be:	4602      	mov	r2, r0
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800a5c6:	f7f5 fe0b 	bl	80001e0 <__aeabi_dsub>
 800a5ca:	ae4a      	add	r6, sp, #296	; 0x128
 800a5cc:	2501      	movs	r5, #1
 800a5ce:	42ac      	cmp	r4, r5
 800a5d0:	da32      	bge.n	800a638 <__kernel_rem_pio2+0x5c0>
 800a5d2:	f1bb 0f00 	cmp.w	fp, #0
 800a5d6:	d002      	beq.n	800a5de <__kernel_rem_pio2+0x566>
 800a5d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5dc:	4619      	mov	r1, r3
 800a5de:	9b02      	ldr	r3, [sp, #8]
 800a5e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a5e4:	e010      	b.n	800a608 <__kernel_rem_pio2+0x590>
 800a5e6:	ab98      	add	r3, sp, #608	; 0x260
 800a5e8:	441d      	add	r5, r3
 800a5ea:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	2c00      	cmp	r4, #0
 800a5f4:	da11      	bge.n	800a61a <__kernel_rem_pio2+0x5a2>
 800a5f6:	f1bb 0f00 	cmp.w	fp, #0
 800a5fa:	d002      	beq.n	800a602 <__kernel_rem_pio2+0x58a>
 800a5fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a600:	4619      	mov	r1, r3
 800a602:	9b02      	ldr	r3, [sp, #8]
 800a604:	e9c3 0100 	strd	r0, r1, [r3]
 800a608:	9b03      	ldr	r3, [sp, #12]
 800a60a:	f003 0007 	and.w	r0, r3, #7
 800a60e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800a612:	ecbd 8b02 	vpop	{d8}
 800a616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a61a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a61e:	f7f5 fde1 	bl	80001e4 <__adddf3>
 800a622:	3c01      	subs	r4, #1
 800a624:	e7e5      	b.n	800a5f2 <__kernel_rem_pio2+0x57a>
 800a626:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a62a:	f7f5 fddb 	bl	80001e4 <__adddf3>
 800a62e:	3e01      	subs	r6, #1
 800a630:	e7ba      	b.n	800a5a8 <__kernel_rem_pio2+0x530>
 800a632:	4602      	mov	r2, r0
 800a634:	460b      	mov	r3, r1
 800a636:	e7bf      	b.n	800a5b8 <__kernel_rem_pio2+0x540>
 800a638:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a63c:	f7f5 fdd2 	bl	80001e4 <__adddf3>
 800a640:	3501      	adds	r5, #1
 800a642:	e7c4      	b.n	800a5ce <__kernel_rem_pio2+0x556>
 800a644:	ed16 7b02 	vldr	d7, [r6, #-8]
 800a648:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 800a64c:	ec53 2b17 	vmov	r2, r3, d7
 800a650:	4640      	mov	r0, r8
 800a652:	4649      	mov	r1, r9
 800a654:	ed8d 7b00 	vstr	d7, [sp]
 800a658:	f7f5 fdc4 	bl	80001e4 <__adddf3>
 800a65c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a660:	4602      	mov	r2, r0
 800a662:	460b      	mov	r3, r1
 800a664:	4640      	mov	r0, r8
 800a666:	4649      	mov	r1, r9
 800a668:	f7f5 fdba 	bl	80001e0 <__aeabi_dsub>
 800a66c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a670:	f7f5 fdb8 	bl	80001e4 <__adddf3>
 800a674:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a678:	e966 0102 	strd	r0, r1, [r6, #-8]!
 800a67c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a680:	ed06 7b02 	vstr	d7, [r6, #-8]
 800a684:	e76c      	b.n	800a560 <__kernel_rem_pio2+0x4e8>
 800a686:	ed16 7b02 	vldr	d7, [r6, #-8]
 800a68a:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 800a68e:	ec53 2b17 	vmov	r2, r3, d7
 800a692:	4640      	mov	r0, r8
 800a694:	4649      	mov	r1, r9
 800a696:	ed8d 7b00 	vstr	d7, [sp]
 800a69a:	f7f5 fda3 	bl	80001e4 <__adddf3>
 800a69e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6a2:	4602      	mov	r2, r0
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	4640      	mov	r0, r8
 800a6a8:	4649      	mov	r1, r9
 800a6aa:	f7f5 fd99 	bl	80001e0 <__aeabi_dsub>
 800a6ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6b2:	f7f5 fd97 	bl	80001e4 <__adddf3>
 800a6b6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a6ba:	e966 0102 	strd	r0, r1, [r6, #-8]!
 800a6be:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6c2:	ed06 7b02 	vstr	d7, [r6, #-8]
 800a6c6:	e750      	b.n	800a56a <__kernel_rem_pio2+0x4f2>
 800a6c8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800a6cc:	f7f5 fd8a 	bl	80001e4 <__adddf3>
 800a6d0:	3c01      	subs	r4, #1
 800a6d2:	e750      	b.n	800a576 <__kernel_rem_pio2+0x4fe>
 800a6d4:	9a02      	ldr	r2, [sp, #8]
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	6013      	str	r3, [r2, #0]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6110      	str	r0, [r2, #16]
 800a6de:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a6e2:	6053      	str	r3, [r2, #4]
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	6093      	str	r3, [r2, #8]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a6ee:	60d3      	str	r3, [r2, #12]
 800a6f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6f4:	6153      	str	r3, [r2, #20]
 800a6f6:	e787      	b.n	800a608 <__kernel_rem_pio2+0x590>
 800a6f8:	00000000 	.word	0x00000000
 800a6fc:	3ff00000 	.word	0x3ff00000
	...
 800a708:	0800b2d8 	.word	0x0800b2d8
 800a70c:	41700000 	.word	0x41700000
 800a710:	3e700000 	.word	0x3e700000
 800a714:	00000000 	.word	0x00000000

0800a718 <__kernel_sin>:
 800a718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71c:	ec55 4b10 	vmov	r4, r5, d0
 800a720:	b085      	sub	sp, #20
 800a722:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a726:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a72a:	ed8d 1b00 	vstr	d1, [sp]
 800a72e:	9002      	str	r0, [sp, #8]
 800a730:	da06      	bge.n	800a740 <__kernel_sin+0x28>
 800a732:	ee10 0a10 	vmov	r0, s0
 800a736:	4629      	mov	r1, r5
 800a738:	f7f6 f9b6 	bl	8000aa8 <__aeabi_d2iz>
 800a73c:	2800      	cmp	r0, #0
 800a73e:	d051      	beq.n	800a7e4 <__kernel_sin+0xcc>
 800a740:	4622      	mov	r2, r4
 800a742:	462b      	mov	r3, r5
 800a744:	4620      	mov	r0, r4
 800a746:	4629      	mov	r1, r5
 800a748:	f7f5 fefe 	bl	8000548 <__aeabi_dmul>
 800a74c:	4682      	mov	sl, r0
 800a74e:	468b      	mov	fp, r1
 800a750:	4602      	mov	r2, r0
 800a752:	460b      	mov	r3, r1
 800a754:	4620      	mov	r0, r4
 800a756:	4629      	mov	r1, r5
 800a758:	f7f5 fef6 	bl	8000548 <__aeabi_dmul>
 800a75c:	a341      	add	r3, pc, #260	; (adr r3, 800a864 <__kernel_sin+0x14c>)
 800a75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a762:	4680      	mov	r8, r0
 800a764:	4689      	mov	r9, r1
 800a766:	4650      	mov	r0, sl
 800a768:	4659      	mov	r1, fp
 800a76a:	f7f5 feed 	bl	8000548 <__aeabi_dmul>
 800a76e:	a33f      	add	r3, pc, #252	; (adr r3, 800a86c <__kernel_sin+0x154>)
 800a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a774:	f7f5 fd34 	bl	80001e0 <__aeabi_dsub>
 800a778:	4652      	mov	r2, sl
 800a77a:	465b      	mov	r3, fp
 800a77c:	f7f5 fee4 	bl	8000548 <__aeabi_dmul>
 800a780:	a33c      	add	r3, pc, #240	; (adr r3, 800a874 <__kernel_sin+0x15c>)
 800a782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a786:	f7f5 fd2d 	bl	80001e4 <__adddf3>
 800a78a:	4652      	mov	r2, sl
 800a78c:	465b      	mov	r3, fp
 800a78e:	f7f5 fedb 	bl	8000548 <__aeabi_dmul>
 800a792:	a33a      	add	r3, pc, #232	; (adr r3, 800a87c <__kernel_sin+0x164>)
 800a794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a798:	f7f5 fd22 	bl	80001e0 <__aeabi_dsub>
 800a79c:	4652      	mov	r2, sl
 800a79e:	465b      	mov	r3, fp
 800a7a0:	f7f5 fed2 	bl	8000548 <__aeabi_dmul>
 800a7a4:	a337      	add	r3, pc, #220	; (adr r3, 800a884 <__kernel_sin+0x16c>)
 800a7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7aa:	f7f5 fd1b 	bl	80001e4 <__adddf3>
 800a7ae:	9b02      	ldr	r3, [sp, #8]
 800a7b0:	4606      	mov	r6, r0
 800a7b2:	460f      	mov	r7, r1
 800a7b4:	b9db      	cbnz	r3, 800a7ee <__kernel_sin+0xd6>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	4650      	mov	r0, sl
 800a7bc:	4659      	mov	r1, fp
 800a7be:	f7f5 fec3 	bl	8000548 <__aeabi_dmul>
 800a7c2:	a325      	add	r3, pc, #148	; (adr r3, 800a858 <__kernel_sin+0x140>)
 800a7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c8:	f7f5 fd0a 	bl	80001e0 <__aeabi_dsub>
 800a7cc:	4642      	mov	r2, r8
 800a7ce:	464b      	mov	r3, r9
 800a7d0:	f7f5 feba 	bl	8000548 <__aeabi_dmul>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	4620      	mov	r0, r4
 800a7da:	4629      	mov	r1, r5
 800a7dc:	f7f5 fd02 	bl	80001e4 <__adddf3>
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	460d      	mov	r5, r1
 800a7e4:	ec45 4b10 	vmov	d0, r4, r5
 800a7e8:	b005      	add	sp, #20
 800a7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	4b1b      	ldr	r3, [pc, #108]	; (800a860 <__kernel_sin+0x148>)
 800a7f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7f6:	f7f5 fea7 	bl	8000548 <__aeabi_dmul>
 800a7fa:	4632      	mov	r2, r6
 800a7fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a800:	463b      	mov	r3, r7
 800a802:	4640      	mov	r0, r8
 800a804:	4649      	mov	r1, r9
 800a806:	f7f5 fe9f 	bl	8000548 <__aeabi_dmul>
 800a80a:	4602      	mov	r2, r0
 800a80c:	460b      	mov	r3, r1
 800a80e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a812:	f7f5 fce5 	bl	80001e0 <__aeabi_dsub>
 800a816:	4652      	mov	r2, sl
 800a818:	465b      	mov	r3, fp
 800a81a:	f7f5 fe95 	bl	8000548 <__aeabi_dmul>
 800a81e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a822:	f7f5 fcdd 	bl	80001e0 <__aeabi_dsub>
 800a826:	a30c      	add	r3, pc, #48	; (adr r3, 800a858 <__kernel_sin+0x140>)
 800a828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82c:	4606      	mov	r6, r0
 800a82e:	460f      	mov	r7, r1
 800a830:	4640      	mov	r0, r8
 800a832:	4649      	mov	r1, r9
 800a834:	f7f5 fe88 	bl	8000548 <__aeabi_dmul>
 800a838:	4602      	mov	r2, r0
 800a83a:	460b      	mov	r3, r1
 800a83c:	4630      	mov	r0, r6
 800a83e:	4639      	mov	r1, r7
 800a840:	f7f5 fcd0 	bl	80001e4 <__adddf3>
 800a844:	4602      	mov	r2, r0
 800a846:	460b      	mov	r3, r1
 800a848:	4620      	mov	r0, r4
 800a84a:	4629      	mov	r1, r5
 800a84c:	f7f5 fcc8 	bl	80001e0 <__aeabi_dsub>
 800a850:	e7c6      	b.n	800a7e0 <__kernel_sin+0xc8>
 800a852:	bf00      	nop
 800a854:	f3af 8000 	nop.w
 800a858:	55555549 	.word	0x55555549
 800a85c:	3fc55555 	.word	0x3fc55555
 800a860:	3fe00000 	.word	0x3fe00000
 800a864:	5acfd57c 	.word	0x5acfd57c
 800a868:	3de5d93a 	.word	0x3de5d93a
 800a86c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a870:	3e5ae5e6 	.word	0x3e5ae5e6
 800a874:	57b1fe7d 	.word	0x57b1fe7d
 800a878:	3ec71de3 	.word	0x3ec71de3
 800a87c:	19c161d5 	.word	0x19c161d5
 800a880:	3f2a01a0 	.word	0x3f2a01a0
 800a884:	1110f8a6 	.word	0x1110f8a6
 800a888:	3f811111 	.word	0x3f811111

0800a88c <fabs>:
 800a88c:	ec53 2b10 	vmov	r2, r3, d0
 800a890:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a894:	ec43 2b10 	vmov	d0, r2, r3
 800a898:	4770      	bx	lr
 800a89a:	0000      	movs	r0, r0
 800a89c:	0000      	movs	r0, r0
	...

0800a8a0 <floor>:
 800a8a0:	ec51 0b10 	vmov	r0, r1, d0
 800a8a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a8ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a8b0:	2e13      	cmp	r6, #19
 800a8b2:	ee10 8a10 	vmov	r8, s0
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	ee10 5a10 	vmov	r5, s0
 800a8bc:	dc35      	bgt.n	800a92a <floor+0x8a>
 800a8be:	2e00      	cmp	r6, #0
 800a8c0:	da17      	bge.n	800a8f2 <floor+0x52>
 800a8c2:	a335      	add	r3, pc, #212	; (adr r3, 800a998 <floor+0xf8>)
 800a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c8:	f7f5 fc8c 	bl	80001e4 <__adddf3>
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	f7f6 f8ca 	bl	8000a68 <__aeabi_dcmpgt>
 800a8d4:	b150      	cbz	r0, 800a8ec <floor+0x4c>
 800a8d6:	2c00      	cmp	r4, #0
 800a8d8:	da5a      	bge.n	800a990 <floor+0xf0>
 800a8da:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a8de:	ea53 0308 	orrs.w	r3, r3, r8
 800a8e2:	4b2f      	ldr	r3, [pc, #188]	; (800a9a0 <floor+0x100>)
 800a8e4:	f04f 0500 	mov.w	r5, #0
 800a8e8:	bf18      	it	ne
 800a8ea:	461c      	movne	r4, r3
 800a8ec:	4621      	mov	r1, r4
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	e025      	b.n	800a93e <floor+0x9e>
 800a8f2:	4f2c      	ldr	r7, [pc, #176]	; (800a9a4 <floor+0x104>)
 800a8f4:	4137      	asrs	r7, r6
 800a8f6:	ea01 0307 	and.w	r3, r1, r7
 800a8fa:	4303      	orrs	r3, r0
 800a8fc:	d01f      	beq.n	800a93e <floor+0x9e>
 800a8fe:	a326      	add	r3, pc, #152	; (adr r3, 800a998 <floor+0xf8>)
 800a900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a904:	f7f5 fc6e 	bl	80001e4 <__adddf3>
 800a908:	2200      	movs	r2, #0
 800a90a:	2300      	movs	r3, #0
 800a90c:	f7f6 f8ac 	bl	8000a68 <__aeabi_dcmpgt>
 800a910:	2800      	cmp	r0, #0
 800a912:	d0eb      	beq.n	800a8ec <floor+0x4c>
 800a914:	2c00      	cmp	r4, #0
 800a916:	bfbe      	ittt	lt
 800a918:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a91c:	fa43 f606 	asrlt.w	r6, r3, r6
 800a920:	19a4      	addlt	r4, r4, r6
 800a922:	ea24 0407 	bic.w	r4, r4, r7
 800a926:	2500      	movs	r5, #0
 800a928:	e7e0      	b.n	800a8ec <floor+0x4c>
 800a92a:	2e33      	cmp	r6, #51	; 0x33
 800a92c:	dd0b      	ble.n	800a946 <floor+0xa6>
 800a92e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a932:	d104      	bne.n	800a93e <floor+0x9e>
 800a934:	ee10 2a10 	vmov	r2, s0
 800a938:	460b      	mov	r3, r1
 800a93a:	f7f5 fc53 	bl	80001e4 <__adddf3>
 800a93e:	ec41 0b10 	vmov	d0, r0, r1
 800a942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a946:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a94a:	f04f 33ff 	mov.w	r3, #4294967295
 800a94e:	fa23 f707 	lsr.w	r7, r3, r7
 800a952:	4238      	tst	r0, r7
 800a954:	d0f3      	beq.n	800a93e <floor+0x9e>
 800a956:	a310      	add	r3, pc, #64	; (adr r3, 800a998 <floor+0xf8>)
 800a958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95c:	f7f5 fc42 	bl	80001e4 <__adddf3>
 800a960:	2200      	movs	r2, #0
 800a962:	2300      	movs	r3, #0
 800a964:	f7f6 f880 	bl	8000a68 <__aeabi_dcmpgt>
 800a968:	2800      	cmp	r0, #0
 800a96a:	d0bf      	beq.n	800a8ec <floor+0x4c>
 800a96c:	2c00      	cmp	r4, #0
 800a96e:	da02      	bge.n	800a976 <floor+0xd6>
 800a970:	2e14      	cmp	r6, #20
 800a972:	d103      	bne.n	800a97c <floor+0xdc>
 800a974:	3401      	adds	r4, #1
 800a976:	ea25 0507 	bic.w	r5, r5, r7
 800a97a:	e7b7      	b.n	800a8ec <floor+0x4c>
 800a97c:	2301      	movs	r3, #1
 800a97e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a982:	fa03 f606 	lsl.w	r6, r3, r6
 800a986:	4435      	add	r5, r6
 800a988:	45a8      	cmp	r8, r5
 800a98a:	bf88      	it	hi
 800a98c:	18e4      	addhi	r4, r4, r3
 800a98e:	e7f2      	b.n	800a976 <floor+0xd6>
 800a990:	2500      	movs	r5, #0
 800a992:	462c      	mov	r4, r5
 800a994:	e7aa      	b.n	800a8ec <floor+0x4c>
 800a996:	bf00      	nop
 800a998:	8800759c 	.word	0x8800759c
 800a99c:	7e37e43c 	.word	0x7e37e43c
 800a9a0:	bff00000 	.word	0xbff00000
 800a9a4:	000fffff 	.word	0x000fffff

0800a9a8 <matherr>:
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	4770      	bx	lr
 800a9ac:	0000      	movs	r0, r0
	...

0800a9b0 <scalbn>:
 800a9b0:	b570      	push	{r4, r5, r6, lr}
 800a9b2:	ec55 4b10 	vmov	r4, r5, d0
 800a9b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a9ba:	4606      	mov	r6, r0
 800a9bc:	462b      	mov	r3, r5
 800a9be:	b9b2      	cbnz	r2, 800a9ee <scalbn+0x3e>
 800a9c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a9c4:	4323      	orrs	r3, r4
 800a9c6:	d03c      	beq.n	800aa42 <scalbn+0x92>
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	4b33      	ldr	r3, [pc, #204]	; (800aa98 <scalbn+0xe8>)
 800a9cc:	4629      	mov	r1, r5
 800a9ce:	ee10 0a10 	vmov	r0, s0
 800a9d2:	f7f5 fdb9 	bl	8000548 <__aeabi_dmul>
 800a9d6:	4a31      	ldr	r2, [pc, #196]	; (800aa9c <scalbn+0xec>)
 800a9d8:	4296      	cmp	r6, r2
 800a9da:	4604      	mov	r4, r0
 800a9dc:	460d      	mov	r5, r1
 800a9de:	460b      	mov	r3, r1
 800a9e0:	da13      	bge.n	800aa0a <scalbn+0x5a>
 800a9e2:	a329      	add	r3, pc, #164	; (adr r3, 800aa88 <scalbn+0xd8>)
 800a9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e8:	f7f5 fdae 	bl	8000548 <__aeabi_dmul>
 800a9ec:	e00a      	b.n	800aa04 <scalbn+0x54>
 800a9ee:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a9f2:	428a      	cmp	r2, r1
 800a9f4:	d10c      	bne.n	800aa10 <scalbn+0x60>
 800a9f6:	ee10 2a10 	vmov	r2, s0
 800a9fa:	462b      	mov	r3, r5
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	4629      	mov	r1, r5
 800aa00:	f7f5 fbf0 	bl	80001e4 <__adddf3>
 800aa04:	4604      	mov	r4, r0
 800aa06:	460d      	mov	r5, r1
 800aa08:	e01b      	b.n	800aa42 <scalbn+0x92>
 800aa0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aa0e:	3a36      	subs	r2, #54	; 0x36
 800aa10:	4432      	add	r2, r6
 800aa12:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800aa16:	428a      	cmp	r2, r1
 800aa18:	dd0b      	ble.n	800aa32 <scalbn+0x82>
 800aa1a:	ec45 4b11 	vmov	d1, r4, r5
 800aa1e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800aa90 <scalbn+0xe0>
 800aa22:	f000 f83f 	bl	800aaa4 <copysign>
 800aa26:	a31a      	add	r3, pc, #104	; (adr r3, 800aa90 <scalbn+0xe0>)
 800aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2c:	ec51 0b10 	vmov	r0, r1, d0
 800aa30:	e7da      	b.n	800a9e8 <scalbn+0x38>
 800aa32:	2a00      	cmp	r2, #0
 800aa34:	dd08      	ble.n	800aa48 <scalbn+0x98>
 800aa36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa3a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa3e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa42:	ec45 4b10 	vmov	d0, r4, r5
 800aa46:	bd70      	pop	{r4, r5, r6, pc}
 800aa48:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800aa4c:	da0d      	bge.n	800aa6a <scalbn+0xba>
 800aa4e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800aa52:	429e      	cmp	r6, r3
 800aa54:	ec45 4b11 	vmov	d1, r4, r5
 800aa58:	dce1      	bgt.n	800aa1e <scalbn+0x6e>
 800aa5a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800aa88 <scalbn+0xd8>
 800aa5e:	f000 f821 	bl	800aaa4 <copysign>
 800aa62:	a309      	add	r3, pc, #36	; (adr r3, 800aa88 <scalbn+0xd8>)
 800aa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa68:	e7e0      	b.n	800aa2c <scalbn+0x7c>
 800aa6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa6e:	3236      	adds	r2, #54	; 0x36
 800aa70:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa74:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa78:	4620      	mov	r0, r4
 800aa7a:	4629      	mov	r1, r5
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	4b08      	ldr	r3, [pc, #32]	; (800aaa0 <scalbn+0xf0>)
 800aa80:	e7b2      	b.n	800a9e8 <scalbn+0x38>
 800aa82:	bf00      	nop
 800aa84:	f3af 8000 	nop.w
 800aa88:	c2f8f359 	.word	0xc2f8f359
 800aa8c:	01a56e1f 	.word	0x01a56e1f
 800aa90:	8800759c 	.word	0x8800759c
 800aa94:	7e37e43c 	.word	0x7e37e43c
 800aa98:	43500000 	.word	0x43500000
 800aa9c:	ffff3cb0 	.word	0xffff3cb0
 800aaa0:	3c900000 	.word	0x3c900000

0800aaa4 <copysign>:
 800aaa4:	ec53 2b10 	vmov	r2, r3, d0
 800aaa8:	ee11 0a90 	vmov	r0, s3
 800aaac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800aab0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800aab4:	ea41 0300 	orr.w	r3, r1, r0
 800aab8:	ec43 2b10 	vmov	d0, r2, r3
 800aabc:	4770      	bx	lr
	...

0800aac0 <__errno>:
 800aac0:	4b01      	ldr	r3, [pc, #4]	; (800aac8 <__errno+0x8>)
 800aac2:	6818      	ldr	r0, [r3, #0]
 800aac4:	4770      	bx	lr
 800aac6:	bf00      	nop
 800aac8:	200003b4 	.word	0x200003b4

0800aacc <_sbrk>:
 800aacc:	4b04      	ldr	r3, [pc, #16]	; (800aae0 <_sbrk+0x14>)
 800aace:	6819      	ldr	r1, [r3, #0]
 800aad0:	4602      	mov	r2, r0
 800aad2:	b909      	cbnz	r1, 800aad8 <_sbrk+0xc>
 800aad4:	4903      	ldr	r1, [pc, #12]	; (800aae4 <_sbrk+0x18>)
 800aad6:	6019      	str	r1, [r3, #0]
 800aad8:	6818      	ldr	r0, [r3, #0]
 800aada:	4402      	add	r2, r0
 800aadc:	601a      	str	r2, [r3, #0]
 800aade:	4770      	bx	lr
 800aae0:	2000093c 	.word	0x2000093c
 800aae4:	2000a474 	.word	0x2000a474

0800aae8 <_init>:
 800aae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaea:	bf00      	nop
 800aaec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaee:	bc08      	pop	{r3}
 800aaf0:	469e      	mov	lr, r3
 800aaf2:	4770      	bx	lr

0800aaf4 <_fini>:
 800aaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf6:	bf00      	nop
 800aaf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aafa:	bc08      	pop	{r3}
 800aafc:	469e      	mov	lr, r3
 800aafe:	4770      	bx	lr
